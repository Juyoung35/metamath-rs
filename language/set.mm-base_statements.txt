# CLASSICAL FIRST-ORDER LOGIC WITH EQUALITY
    ## Pre-logic
        $c ( $.
        $c ) $.
        $c -> $.
        $c -. $.
        $c wff $.
        $c |- $.
        $c & $.
        $c => $.
        ### Inferences for assisting proof development
        
    
    ## Propositional calculus
        ### Recursively define primitive wffs for propositional calculus
            WFF wn $a wff -. ph $.
            WFF wi $a wff ( ph -> ps ) $.
        
        ### The axioms of propositional calculus
            AXIOM ax-mp $a |- ps $.
            AXIOM ax-1 $a |- ( ph -> ( ps -> ph ) ) $.
            AXIOM ax-2 $a |- ( ( ph -> ( ps -> ch ) ) -> ( ( ph -> ps ) -> ( ph -> ch ) ) ) $.
            AXIOM ax-3 $a |- ( ( -. ph -> -. ps ) -> ( ps -> ph ) ) $.
        
        ### Logical implication
        
        ### Logical negation
        
        ### Logical equivalence
            $c <-> $.
            WFF wb $a wff ( ph <-> ps ) $.
            DEFINITION df-bi $a |- -. ( ( ( ph <-> ps ) -> -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) ) -> -. ( -. ( ( ph -> ps ) -> -. ( ps -> ph ) ) -> ( ph <-> ps ) ) ) $.
        
        ### Logical conjunction
            $c /\ $.
            WFF wa $a wff ( ph /\ ps ) $.
            DEFINITION df-an $a |- ( ( ph /\ ps ) <-> -. ( ph -> -. ps ) ) $.
        
        ### Logical disjunction
            $c \/ $.
            WFF wo $a wff ( ph \/ ps ) $.
            DEFINITION df-or $a |- ( ( ph \/ ps ) <-> ( -. ph -> ps ) ) $.
        
        ### Mixed connectives
        
        ### The conditional operator for propositions
            $c , $.
            $c if- $.
            WFF wif $a wff if- ( ph , ps , ch ) $.
            DEFINITION df-ifp $a |- ( if- ( ph , ps , ch ) <-> ( ( ph /\ ps ) \/ ( -. ph /\ ch ) ) ) $.
        
        ### The weak deduction theorem for propositional calculus
        
        ### Abbreviated conjunction and disjunction of three wff's
            WFF w3o $a wff ( ph \/ ps \/ ch ) $.
            WFF w3a $a wff ( ph /\ ps /\ ch ) $.
            DEFINITION df-3or $a |- ( ( ph \/ ps \/ ch ) <-> ( ( ph \/ ps ) \/ ch ) ) $.
            DEFINITION df-3an $a |- ( ( ph /\ ps /\ ch ) <-> ( ( ph /\ ps ) /\ ch ) ) $.
        
        ### Logical "nand" (Sheffer stroke)
            $c -/\ $.
            WFF wnan $a wff ( ph -/\ ps ) $.
            DEFINITION df-nan $a |- ( ( ph -/\ ps ) <-> -. ( ph /\ ps ) ) $.
        
        ### Logical "xor"
            $c \/_ $.
            WFF wxo $a wff ( ph \/_ ps ) $.
            DEFINITION df-xor $a |- ( ( ph \/_ ps ) <-> -. ( ph <-> ps ) ) $.
        
        ### Logical "nor"
            $c -\/ $.
            WFF wnor $a wff ( ph -\/ ps ) $.
            DEFINITION df-nor $a |- ( ( ph -\/ ps ) <-> -. ( ph \/ ps ) ) $.
        
        ### True and false constants
            #### Universal quantifier for use by df-tru
                $c A. $.
                $c setvar $.
                WFF wal $a wff A. x ph $.
            
            #### Equality predicate for use by df-tru
                $c class $.
                CLASS cv $a class x $.
                $c = $.
                WFF wceq $a wff A = B $.
            
            #### The true constant
                $c T. $.
                WFF wtru $a wff T. $.
                DEFINITION df-tru $a |- ( T. <-> ( A. x x = x -> A. x x = x ) ) $.
            
            #### The false constant
                $c F. $.
                WFF wfal $a wff F. $.
                DEFINITION df-fal $a |- ( F. <-> -. T. ) $.
            
        
        ### Truth tables
            #### Implication
            
            #### Negation
            
            #### Equivalence
            
            #### Conjunction
            
            #### Disjunction
            
            #### Alternative denial
            
            #### Exclusive disjunction
            
            #### Joint denial
            
        
        ### Half adder and full adder in propositional calculus
            #### Full adder: sum
                $c hadd $.
                WFF whad $a wff hadd ( ph , ps , ch ) $.
                DEFINITION df-had $a |- ( hadd ( ph , ps , ch ) <-> ( ( ph \/_ ps ) \/_ ch ) ) $.
            
            #### Full adder: carry
                $c cadd $.
                WFF wcad $a wff cadd ( ph , ps , ch ) $.
                DEFINITION df-cad $a |- ( cadd ( ph , ps , ch ) <-> ( ( ph /\ ps ) \/ ( ch /\ ( ph \/_ ps ) ) ) ) $.
            
        
    
    ## Other axiomatizations related to classical propositional calculus
        ### Minimal implicational calculus
        
        ### Implicational Calculus
        
        ### Derive the Lukasiewicz axioms from Meredith's sole axiom
        
        ### Derive the standard axioms from the Lukasiewicz axioms
        
        ### Derive Nicod's axiom from the standard axioms
        
        ### Derive the Lukasiewicz axioms from Nicod's axiom
        
        ### Derive Nicod's Axiom from Lukasiewicz's First Sheffer Stroke Axiom
        
        ### Derive the Lukasiewicz Axioms from the Tarski-Bernays-Wajsberg Axioms
        
        ### Derive the Tarski-Bernays-Wajsberg axioms from Meredith's First CO Axiom
        
        ### Derive the Tarski-Bernays-Wajsberg axioms from Meredith's Second CO Axiom
        
        ### Derive the Lukasiewicz axioms from the Russell-Bernays Axioms
        
        ### Stoic logic non-modal portion (Chrysippus of Soli)
        
    
    ## Predicate calculus with equality:  Tarski's system S2 (1 rule, 6 schemes)
        ### Universal quantifier (continued); define "exists" and "not free"
            #### Existential quantifier
                $c E. $.
                WFF wex $a wff E. x ph $.
                DEFINITION df-ex $a |- ( E. x ph <-> -. A. x -. ph ) $.
            
            #### Nonfreeness predicate
                $c F/ $.
                WFF wnf $a wff F/ x ph $.
                DEFINITION df-nf $a |- ( F/ x ph <-> ( E. x ph -> A. x ph ) ) $.
            
        
        ### Rule scheme ax-gen (Generalization)
            AXIOM ax-gen $a |- A. x ph $.
        
        ### Axiom scheme ax-4 (Quantified Implication)
            AXIOM ax-4 $a |- ( A. x ( ph -> ps ) -> ( A. x ph -> A. x ps ) ) $.
            #### The empty domain of discourse
            
        
        ### Axiom scheme ax-5 (Distinctness) - first use of $d
            AXIOM ax-5 $a |- ( ph -> A. x ph ) $.
        
        ### Equality predicate (continued)
        
        ### Axiom scheme ax-6 (Existence)
            AXIOM ax-6 $a |- -. A. x -. x = y $.
        
        ### Axiom scheme ax-7 (Equality)
            AXIOM ax-7 $a |- ( x = y -> ( x = z -> y = z ) ) $.
        
        ### Define proper substitution
            $c [ $.
            $c / $.
            $c ] $.
            WFF wsb $a wff [ y / x ] ph $.
            DEFINITION df-sb $a |- ( [ t / x ] ph <-> A. y ( y = t -> A. x ( x = y -> ph ) ) ) $.
        
        ### Membership predicate
            $c e. $.
            WFF wcel $a wff A e. B $.
        
        ### Axiom scheme ax-8 (Left Equality for Binary Predicate)
            AXIOM ax-8 $a |- ( x = y -> ( x e. z -> y e. z ) ) $.
        
        ### Axiom scheme ax-9 (Right Equality for Binary Predicate)
            AXIOM ax-9 $a |- ( x = y -> ( z e. x -> z e. y ) ) $.
        
        ### Logical redundancy of ax-10 , ax-11 , ax-12 , ax-13
        
    
    ## Predicate calculus with equality:  Auxiliary axiom schemes (4 schemes)
        ### Axiom scheme ax-10 (Quantified Negation)
            AXIOM ax-10 $a |- ( -. A. x ph -> A. x -. A. x ph ) $.
        
        ### Axiom scheme ax-11 (Quantifier Commutation)
            AXIOM ax-11 $a |- ( A. x A. y ph -> A. y A. x ph ) $.
        
        ### Axiom scheme ax-12 (Substitution)
            AXIOM ax-12 $a |- ( x = y -> ( A. y ph -> A. x ( x = y -> ph ) ) ) $.
        
        ### Axiom scheme ax-13 (Quantified Equality)
            AXIOM ax-13 $a |- ( -. x = y -> ( y = z -> A. x y = z ) ) $.
        
    
    ## Uniqueness and unique existence
        ### Uniqueness: the at-most-one quantifier
            $c E* $.
            WFF wmo $a wff E* x ph $.
            DEFINITION df-mo $a |- ( E* x ph <-> E. y A. x ( ph -> x = y ) ) $.
        
        ### Unique existence: the unique existential quantifier
            $c E! $.
            WFF weu $a wff E! x ph $.
            DEFINITION df-eu $a |- ( E! x ph <-> ( E. x ph /\ E* x ph ) ) $.
        
    
    ## Other axiomatizations related to classical predicate calculus
        ### Aristotelian logic: Assertic syllogisms
        
        ### Intuitionistic logic
        
    
# ZF (ZERMELO-FRAENKEL) SET THEORY
    ## ZF Set Theory - start with the Axiom of Extensionality
        ### Introduce the Axiom of Extensionality
            AXIOM ax-ext $a |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $.
        
        ### Classes
            $c { $.
            $c | $.
            $c } $.
            #### Class abstractions
                CLASS cab $a class { x | ph } $.
                DEFINITION df-clab $a |- ( x e. { y | ph } <-> [ x / y ] ph ) $.
            
            #### Class equality
                DEFINITION df-cleq $a |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $.
            
            #### Class membership
                DEFINITION df-clel $a |- ( A e. B <-> E. x ( x = A /\ x e. B ) ) $.
            
            #### Elementary properties of class abstractions
            
        
        ### Class form not-free predicate
            $c F/_ $.
            WFF wnfc $a wff F/_ x A $.
            DEFINITION df-nfc $a |- ( F/_ x A <-> A. y F/ x y e. A ) $.
        
        ### Negated equality and membership
            #### Negated equality
                $c =/= $.
                WFF wne $a wff A =/= B $.
                DEFINITION df-ne $a |- ( A =/= B <-> -. A = B ) $.
            
            #### Negated membership
                $c e/ $.
                WFF wnel $a wff A e/ B $.
                DEFINITION df-nel $a |- ( A e/ B <-> -. A e. B ) $.
            
        
        ### Restricted quantification
            #### Restricted universal and existential quantification
                WFF wral $a wff A. x e. A ph $.
                DEFINITION df-ral $a |- ( A. x e. A ph <-> A. x ( x e. A -> ph ) ) $.
                WFF wrex $a wff E. x e. A ph $.
                DEFINITION df-rex $a |- ( E. x e. A ph <-> E. x ( x e. A /\ ph ) ) $.
            
            #### Restricted existential uniqueness and at-most-one quantifier
                WFF wreu $a wff E! x e. A ph $.
                WFF wrmo $a wff E* x e. A ph $.
                DEFINITION df-rmo $a |- ( E* x e. A ph <-> E* x ( x e. A /\ ph ) ) $.
                DEFINITION df-reu $a |- ( E! x e. A ph <-> E! x ( x e. A /\ ph ) ) $.
            
            #### Restricted class abstraction
                CLASS crab $a class { x e. A | ph } $.
                DEFINITION df-rab $a |- { x e. A | ph } = { x | ( x e. A /\ ph ) } $.
            
        
        ### The universal class
            $c _V $.
            CLASS cvv $a class _V $.
            DEFINITION df-v $a |- _V = { x | x = x } $.
        
        ### Conditional equality (experimental)
            $c CondEq $.
            WFF wcdeq $a wff CondEq ( x = y -> ph ) $.
            DEFINITION df-cdeq $a |- ( CondEq ( x = y -> ph ) <-> ( x = y -> ph ) ) $.
        
        ### Russell's Paradox
        
        ### Proper substitution of classes for sets
            $c [. $.
            $c ]. $.
            WFF wsbc $a wff [. A / x ]. ph $.
            DEFINITION df-sbc $a |- ( [. A / x ]. ph <-> A e. { x | ph } ) $.
        
        ### Proper substitution of classes for sets into classes
            $c [_ $.
            $c ]_ $.
            CLASS csb $a class [_ A / x ]_ B $.
            DEFINITION df-csb $a |- [_ A / x ]_ B = { y | [. A / x ]. y e. B } $.
        
        ### Define basic set operations and relations
            $c \ $.
            $c u. $.
            $c i^i $.
            $c C_ $.
            $c C. $.
            CLASS cdif $a class ( A \ B ) $.
            CLASS cun $a class ( A u. B ) $.
            CLASS cin $a class ( A i^i B ) $.
            WFF wss $a wff A C_ B $.
            WFF wpss $a wff A C. B $.
            DEFINITION df-dif $a |- ( A \ B ) = { x | ( x e. A /\ -. x e. B ) } $.
            DEFINITION df-un $a |- ( A u. B ) = { x | ( x e. A \/ x e. B ) } $.
            DEFINITION df-in $a |- ( A i^i B ) = { x | ( x e. A /\ x e. B ) } $.
        
        ### Subclasses and subsets
            DEFINITION df-ss $a |- ( A C_ B <-> ( A i^i B ) = A ) $.
            DEFINITION df-pss $a |- ( A C. B <-> ( A C_ B /\ A =/= B ) ) $.
        
        ### The difference, union, and intersection of two classes
            #### The difference of two classes
            
            #### The union of two classes
            
            #### The intersection of two classes
            
            #### The symmetric difference of two classes
                $c /_\ $.
                CLASS csymdif $a class ( A /_\ B ) $.
                DEFINITION df-symdif $a |- ( A /_\ B ) = ( ( A \ B ) u. ( B \ A ) ) $.
            
            #### Combinations of difference, union, and intersection of two classes
            
            #### Class abstractions with difference, union, and intersection of two classes
            
            #### Restricted uniqueness with difference, union, and intersection
            
        
        ### The empty set
            $c (/) $.
            CLASS c0 $a class (/) $.
            DEFINITION df-nul $a |- (/) = ( _V \ _V ) $.
        
        ### The conditional operator for classes
            $c if $.
            CLASS cif $a class if ( ph , A , B ) $.
            DEFINITION df-if $a |- if ( ph , A , B ) = { x | ( ( x e. A /\ ph ) \/ ( x e. B /\ -. ph ) ) } $.
        
        ### The weak deduction theorem for set theory
        
        ### Power classes
            $c ~P $.
            CLASS cpw $a class ~P A $.
            DEFINITION df-pw $a |- ~P A = { x | x C_ A } $.
        
        ### Unordered and ordered pairs
            $c <. $.
            $c >. $.
            CLASS csn $a class { A } $.
            DEFINITION df-sn $a |- { A } = { x | x = A } $.
            CLASS cpr $a class { A , B } $.
            DEFINITION df-pr $a |- { A , B } = ( { A } u. { B } ) $.
            CLASS ctp $a class { A , B , C } $.
            DEFINITION df-tp $a |- { A , B , C } = ( { A , B } u. { C } ) $.
            CLASS cop $a class <. A , B >. $.
            DEFINITION df-op $a |- <. A , B >. = { x | ( A e. _V /\ B e. _V /\ x e. { { A } , { A , B } } ) } $.
            CLASS cotp $a class <. A , B , C >. $.
            DEFINITION df-ot $a |- <. A , B , C >. = <. <. A , B >. , C >. $.
        
        ### The union of a class
            $c U. $.
            CLASS cuni $a class U. A $.
            DEFINITION df-uni $a |- U. A = { x | E. y ( x e. y /\ y e. A ) } $.
        
        ### The intersection of a class
            $c |^| $.
            CLASS cint $a class |^| A $.
            DEFINITION df-int $a |- |^| A = { x | A. y ( y e. A -> x e. y ) } $.
        
        ### Indexed union and intersection
            $c U_ $.
            $c |^|_ $.
            CLASS ciun $a class U_ x e. A B $.
            CLASS ciin $a class |^|_ x e. A B $.
            DEFINITION df-iun $a |- U_ x e. A B = { y | E. x e. A y e. B } $.
            DEFINITION df-iin $a |- |^|_ x e. A B = { y | A. x e. A y e. B } $.
        
        ### Disjointness
            $c Disj_ $.
            WFF wdisj $a wff Disj_ x e. A B $.
            DEFINITION df-disj $a |- ( Disj_ x e. A B <-> A. y E* x e. A y e. B ) $.
        
        ### Binary relations
            WFF wbr $a wff A R B $.
            DEFINITION df-br $a |- ( A R B <-> <. A , B >. e. R ) $.
        
        ### Ordered-pair class abstractions (class builders)
            CLASS copab $a class { <. x , y >. | ph } $.
            DEFINITION df-opab $a |- { <. x , y >. | ph } = { z | E. x E. y ( z = <. x , y >. /\ ph ) } $.
        
        ### Functions in maps-to notation
            $c |-> $.
            CLASS cmpt $a class ( x e. A |-> B ) $.
            DEFINITION df-mpt $a |- ( x e. A |-> B ) = { <. x , y >. | ( x e. A /\ y = B ) } $.
        
        ### Transitive classes
            $c Tr $.
            WFF wtr $a wff Tr A $.
            DEFINITION df-tr $a |- ( Tr A <-> U. A C_ A ) $.
        
    
    ## ZF Set Theory - add the Axiom of Replacement
        ### Introduce the Axiom of Replacement
            AXIOM ax-rep $a |- ( A. w E. y A. z ( A. y ph -> z = y ) -> E. y A. z ( z e. y <-> E. w ( w e. x /\ A. y ph ) ) ) $.
        
        ### Derive the Axiom of Separation
            AXIOM ax-sep $a |- E. y A. x ( x e. y <-> ( x e. z /\ ph ) ) $.
        
        ### Derive the Null Set Axiom
            AXIOM ax-nul $a |- E. x A. y -. y e. x $.
        
        ### Theorems requiring subset and intersection existence
        
        ### Theorems requiring empty set existence
        
    
    ## ZF Set Theory - add the Axiom of Power Sets
        ### Introduce the Axiom of Power Sets
            AXIOM ax-pow $a |- E. y A. z ( A. w ( w e. z -> w e. x ) -> z e. y ) $.
        
        ### Derive the Axiom of Pairing
            AXIOM ax-pr $a |- E. z A. w ( ( w = x \/ w = y ) -> w e. z ) $.
        
        ### Ordered pair theorem
        
        ### Ordered-pair class abstractions (cont.)
        
        ### Power class of union and intersection
        
        ### The identity relation
            $c _I $.
            CLASS cid $a class _I $.
            DEFINITION df-id $a |- _I = { <. x , y >. | x = y } $.
        
        ### The membership relation (or epsilon relation)
            $c _E $.
            CLASS cep $a class _E $.
            DEFINITION df-eprel $a |- _E = { <. x , y >. | x e. y } $.
        
        ### Partial and total orderings
            $c Po $.
            $c Or $.
            WFF wpo $a wff R Po A $.
            WFF wor $a wff R Or A $.
            DEFINITION df-po $a |- ( R Po A <-> A. x e. A A. y e. A A. z e. A ( -. x R x /\ ( ( x R y /\ y R z ) -> x R z ) ) ) $.
            DEFINITION df-so $a |- ( R Or A <-> ( R Po A /\ A. x e. A A. y e. A ( x R y \/ x = y \/ y R x ) ) ) $.
        
        ### Founded and well-ordering relations
            $c Fr $.
            $c Se $.
            $c We $.
            WFF wfr $a wff R Fr A $.
            WFF wse $a wff R Se A $.
            WFF wwe $a wff R We A $.
            DEFINITION df-fr $a |- ( R Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) -> E. y e. x A. z e. x -. z R y ) ) $.
            DEFINITION df-se $a |- ( R Se A <-> A. x e. A { y e. A | y R x } e. _V ) $.
            DEFINITION df-we $a |- ( R We A <-> ( R Fr A /\ R Or A ) ) $.
        
        ### Relations
            $c X. $.
            $c `' $.
            $c dom $.
            $c ran $.
            $c |` $.
            $c " $.
            $c o. $.
            $c Rel $.
            CLASS cxp $a class ( A X. B ) $.
            CLASS ccnv $a class `' A $.
            CLASS cdm $a class dom A $.
            CLASS crn $a class ran A $.
            CLASS cres $a class ( A |` B ) $.
            CLASS cima $a class ( A " B ) $.
            CLASS ccom $a class ( A o. B ) $.
            WFF wrel $a wff Rel A $.
            DEFINITION df-xp $a |- ( A X. B ) = { <. x , y >. | ( x e. A /\ y e. B ) } $.
            DEFINITION df-rel $a |- ( Rel A <-> A C_ ( _V X. _V ) ) $.
            DEFINITION df-cnv $a |- `' A = { <. x , y >. | y A x } $.
            DEFINITION df-co $a |- ( A o. B ) = { <. x , y >. | E. z ( x B z /\ z A y ) } $.
            DEFINITION df-dm $a |- dom A = { x | E. y x A y } $.
            DEFINITION df-rn $a |- ran A = dom `' A $.
            DEFINITION df-res $a |- ( A |` B ) = ( A i^i ( B X. _V ) ) $.
            DEFINITION df-ima $a |- ( A " B ) = ran ( A |` B ) $.
        
        ### The Predecessor Class
            $c Pred $.
            CLASS cpred $a class Pred ( R , A , X ) $.
            DEFINITION df-pred $a |- Pred ( R , A , X ) = ( A i^i ( `' R " { X } ) ) $.
        
        ### Well-founded induction (variant)
        
        ### Well-ordered induction
        
        ### Ordinals
            $c Ord $.
            $c On $.
            $c Lim $.
            $c suc $.
            WFF word $a wff Ord A $.
            CLASS con0 $a class On $.
            WFF wlim $a wff Lim A $.
            CLASS csuc $a class suc A $.
            DEFINITION df-ord $a |- ( Ord A <-> ( Tr A /\ _E We A ) ) $.
            DEFINITION df-on $a |- On = { x | Ord x } $.
            DEFINITION df-lim $a |- ( Lim A <-> ( Ord A /\ A =/= (/) /\ A = U. A ) ) $.
            DEFINITION df-suc $a |- suc A = ( A u. { A } ) $.
        
        ### Definite description binder (inverted iota)
            $c iota $.
            CLASS cio $a class ( iota x ph ) $.
            DEFINITION df-iota $a |- ( iota x ph ) = U. { y | { x | ph } = { y } } $.
        
        ### Functions
            $c : $.
            $c Fun $.
            $c Fn $.
            $c --> $.
            $c -1-1-> $.
            $c -onto-> $.
            $c -1-1-onto-> $.
            $c ` $.
            $c Isom $.
            WFF wfun $a wff Fun A $.
            WFF wfn $a wff A Fn B $.
            WFF wf $a wff F : A --> B $.
            WFF wf1 $a wff F : A -1-1-> B $.
            WFF wfo $a wff F : A -onto-> B $.
            WFF wf1o $a wff F : A -1-1-onto-> B $.
            CLASS cfv $a class ( F ` A ) $.
            WFF wiso $a wff H Isom R , S ( A , B ) $.
            DEFINITION df-fun $a |- ( Fun A <-> ( Rel A /\ ( A o. `' A ) C_ _I ) ) $.
            DEFINITION df-fn $a |- ( A Fn B <-> ( Fun A /\ dom A = B ) ) $.
            DEFINITION df-f $a |- ( F : A --> B <-> ( F Fn A /\ ran F C_ B ) ) $.
            DEFINITION df-f1 $a |- ( F : A -1-1-> B <-> ( F : A --> B /\ Fun `' F ) ) $.
            DEFINITION df-fo $a |- ( F : A -onto-> B <-> ( F Fn A /\ ran F = B ) ) $.
            DEFINITION df-f1o $a |- ( F : A -1-1-onto-> B <-> ( F : A -1-1-> B /\ F : A -onto-> B ) ) $.
            DEFINITION df-fv $a |- ( F ` A ) = ( iota x A F x ) $.
            DEFINITION df-isom $a |- ( H Isom R , S ( A , B ) <-> ( H : A -1-1-onto-> B /\ A. x e. A A. y e. A ( x R y <-> ( H ` x ) S ( H ` y ) ) ) ) $.
        
        ### Cantor's Theorem
        
        ### Restricted iota (description binder)
            $c iota_ $.
            CLASS crio $a class ( iota_ x e. A ph ) $.
            DEFINITION df-riota $a |- ( iota_ x e. A ph ) = ( iota x ( x e. A /\ ph ) ) $.
        
        ### Operations
            CLASS co $a class ( A F B ) $.
            CLASS coprab $a class { <. <. x , y >. , z >. | ph } $.
            CLASS cmpo $a class ( x e. A , y e. B |-> C ) $.
            DEFINITION df-ov $a |- ( A F B ) = ( F ` <. A , B >. ) $.
            DEFINITION df-oprab $a |- { <. <. x , y >. , z >. | ph } = { w | E. x E. y E. z ( w = <. <. x , y >. , z >. /\ ph ) } $.
            DEFINITION df-mpo $a |- ( x e. A , y e. B |-> C ) = { <. <. x , y >. , z >. | ( ( x e. A /\ y e. B ) /\ z = C ) } $.
            #### Variable-to-class conversion for operations
            
        
        ### Maps-to notation
        
        ### Function operation
            $c oF $.
            $c oR $.
            CLASS cof $a class oF R $.
            CLASS cofr $a class oR R $.
            DEFINITION df-of $a |- oF R = ( f e. _V , g e. _V |-> ( x e. ( dom f i^i dom g ) |-> ( ( f ` x ) R ( g ` x ) ) ) ) $.
            DEFINITION df-ofr $a |- oR R = { <. f , g >. | A. x e. ( dom f i^i dom g ) ( f ` x ) R ( g ` x ) } $.
        
        ### Proper subset relation
            $c [C.] $.
            CLASS crpss $a class [C.] $.
            DEFINITION df-rpss $a |- [C.] = { <. x , y >. | x C. y } $.
        
    
    ## ZF Set Theory - add the Axiom of Union
        ### Introduce the Axiom of Union
            AXIOM ax-un $a |- E. y A. z ( E. w ( z e. w /\ w e. x ) -> z e. y ) $.
        
        ### Ordinals (continued)
        
        ### Transfinite induction
        
        ### The natural numbers (i.e., finite ordinals)
            $c _om $.
            CLASS com $a class _om $.
            DEFINITION df-om $a |- _om = { x e. On | A. y ( Lim y -> x e. y ) } $.
        
        ### Peano's postulates
        
        ### Finite induction (for finite ordinals)
        
        ### Relations and functions (cont.)
        
        ### First and second members of an ordered pair
            $c 1st $.
            $c 2nd $.
            CLASS c1st $a class 1st $.
            CLASS c2nd $a class 2nd $.
            DEFINITION df-1st $a |- 1st = ( x e. _V |-> U. dom { x } ) $.
            DEFINITION df-2nd $a |- 2nd = ( x e. _V |-> U. ran { x } ) $.
        
        ### Induction on Cartesian products
        
        ### Ordering on Cartesian products
        
        ### Ordering Ordinal Sequences
        
        ### The support of functions
            $c supp $.
            CLASS csupp $a class supp $.
            DEFINITION df-supp $a |- supp = ( x e. _V , z e. _V |-> { i e. dom x | ( x " { i } ) =/= { z } } ) $.
        
        ### Special maps-to operations
        
        ### Function transposition
            $c tpos $.
            CLASS ctpos $a class tpos F $.
            DEFINITION df-tpos $a |- tpos F = ( F o. ( x e. ( `' dom F u. { (/) } ) |-> U. `' { x } ) ) $.
        
        ### Curry and uncurry
            $c curry $.
            $c uncurry $.
            CLASS ccur $a class curry A $.
            CLASS cunc $a class uncurry A $.
            DEFINITION df-cur $a |- curry F = ( x e. dom dom F |-> { <. y , z >. | <. x , y >. F z } ) $.
            DEFINITION df-unc $a |- uncurry F = { <. <. x , y >. , z >. | y ( F ` x ) z } $.
        
        ### Undefined values
            $c Undef $.
            CLASS cund $a class Undef $.
            DEFINITION df-undef $a |- Undef = ( s e. _V |-> ~P U. s ) $.
        
        ### Well-founded recursion
            $c frecs $.
            CLASS cfrecs $a class frecs ( R , A , F ) $.
            DEFINITION df-frecs $a |- frecs ( R , A , F ) = U. { f | E. x ( f Fn x /\ ( x C_ A /\ A. y e. x Pred ( R , A , y ) C_ x ) /\ A. y e. x ( f ` y ) = ( y F ( f |` Pred ( R , A , y ) ) ) ) } $.
        
        ### Well-ordered recursion
            $c wrecs $.
            CLASS cwrecs $a class wrecs ( R , A , F ) $.
            DEFINITION df-wrecs $a |- wrecs ( R , A , F ) = frecs ( R , A , ( F o. 2nd ) ) $.
        
        ### Functions on ordinals; strictly monotone ordinal functions
            $c Smo $.
            WFF wsmo $a wff Smo A $.
            DEFINITION df-smo $a |- ( Smo A <-> ( A : dom A --> On /\ Ord dom A /\ A. x e. dom A A. y e. dom A ( x e. y -> ( A ` x ) e. ( A ` y ) ) ) ) $.
        
        ### "Strong" transfinite recursion
            $c recs $.
            CLASS crecs $a class recs ( F ) $.
            DEFINITION df-recs $a |- recs ( F ) = wrecs ( _E , On , F ) $.
        
        ### Recursive definition generator
            $c rec $.
            CLASS crdg $a class rec ( F , I ) $.
            DEFINITION df-rdg $a |- rec ( F , I ) = recs ( ( g e. _V |-> if ( g = (/) , I , if ( Lim dom g , U. ran g , ( F ` ( g ` U. dom g ) ) ) ) ) ) $.
        
        ### Finite recursion
            $c seqom $.
            CLASS cseqom $a class seqom ( F , I ) $.
            DEFINITION df-seqom $a |- seqom ( F , I ) = ( rec ( ( i e. _om , v e. _V |-> <. suc i , ( i F v ) >. ) , <. (/) , ( _I ` I ) >. ) " _om ) $.
        
        ### Ordinal arithmetic
            $c 1o $.
            $c 2o $.
            $c 3o $.
            $c 4o $.
            $c +o $.
            $c .o $.
            $c ^o $.
            CLASS c1o $a class 1o $.
            CLASS c2o $a class 2o $.
            CLASS c3o $a class 3o $.
            CLASS c4o $a class 4o $.
            CLASS coa $a class +o $.
            CLASS comu $a class .o $.
            CLASS coe $a class ^o $.
            DEFINITION df-1o $a |- 1o = suc (/) $.
            DEFINITION df-2o $a |- 2o = suc 1o $.
            DEFINITION df-3o $a |- 3o = suc 2o $.
            DEFINITION df-4o $a |- 4o = suc 3o $.
            DEFINITION df-oadd $a |- +o = ( x e. On , y e. On |-> ( rec ( ( z e. _V |-> suc z ) , x ) ` y ) ) $.
            DEFINITION df-omul $a |- .o = ( x e. On , y e. On |-> ( rec ( ( z e. _V |-> ( z +o x ) ) , (/) ) ` y ) ) $.
            DEFINITION df-oexp $a |- ^o = ( x e. On , y e. On |-> if ( x = (/) , ( 1o \ y ) , ( rec ( ( z e. _V |-> ( z .o x ) ) , 1o ) ` y ) ) ) $.
        
        ### Natural number arithmetic
        
        ### Natural addition
            $c +no $.
            CLASS cnadd $a class +no $.
            DEFINITION df-nadd $a |- +no = frecs ( { <. x , y >. | ( x e. ( On X. On ) /\ y e. ( On X. On ) /\ ( ( ( 1st ` x ) _E ( 1st ` y ) \/ ( 1st ` x ) = ( 1st ` y ) ) /\ ( ( 2nd ` x ) _E ( 2nd ` y ) \/ ( 2nd ` x ) = ( 2nd ` y ) ) /\ x =/= y ) ) } , ( On X. On ) , ( z e. _V , a e. _V |-> |^| { w e. On | ( ( a " ( { ( 1st ` z ) } X. ( 2nd ` z ) ) ) C_ w /\ ( a " ( ( 1st ` z ) X. { ( 2nd ` z ) } ) ) C_ w ) } ) ) $.
        
        ### Equivalence relations and classes
            $c Er $.
            $c /. $.
            WFF wer $a wff R Er A $.
            CLASS cec $a class [ A ] R $.
            CLASS cqs $a class ( A /. R ) $.
            DEFINITION df-er $a |- ( R Er A <-> ( Rel R /\ dom R = A /\ ( `' R u. ( R o. R ) ) C_ R ) ) $.
            DEFINITION df-ec $a |- [ A ] R = ( R " { A } ) $.
            DEFINITION df-qs $a |- ( A /. R ) = { y | E. x e. A y = [ x ] R } $.
        
        ### The mapping operation
            $c ^m $.
            $c ^pm $.
            CLASS cmap $a class ^m $.
            CLASS cpm $a class ^pm $.
            DEFINITION df-map $a |- ^m = ( x e. _V , y e. _V |-> { f | f : y --> x } ) $.
            DEFINITION df-pm $a |- ^pm = ( x e. _V , y e. _V |-> { f e. ~P ( y X. x ) | Fun f } ) $.
        
        ### Infinite Cartesian products
            $c X_ $.
            CLASS cixp $a class X_ x e. A B $.
            DEFINITION df-ixp $a |- X_ x e. A B = { f | ( f Fn { x | x e. A } /\ A. x e. A ( f ` x ) e. B ) } $.
        
        ### Equinumerosity
            $c ~~ $.
            $c ~<_ $.
            $c ~< $.
            $c Fin $.
            CLASS cen $a class ~~ $.
            CLASS cdom $a class ~<_ $.
            CLASS csdm $a class ~< $.
            CLASS cfn $a class Fin $.
            DEFINITION df-en $a |- ~~ = { <. x , y >. | E. f f : x -1-1-onto-> y } $.
            DEFINITION df-dom $a |- ~<_ = { <. x , y >. | E. f f : x -1-1-> y } $.
            DEFINITION df-sdom $a |- ~< = ( ~<_ \ ~~ ) $.
            DEFINITION df-fin $a |- Fin = { x | E. y e. _om x ~~ y } $.
        
        ### Schroeder-Bernstein Theorem
        
        ### Equinumerosity (cont.)
        
        ### Finite sets
        
        ### Pigeonhole Principle
        
        ### Finite sets (cont.)
        
        ### Finitely supported functions
            $c finSupp $.
            CLASS cfsupp $a class finSupp $.
            DEFINITION df-fsupp $a |- finSupp = { <. r , z >. | ( Fun r /\ ( r supp z ) e. Fin ) } $.
        
        ### Finite intersections
            $c fi $.
            CLASS cfi $a class fi $.
            DEFINITION df-fi $a |- fi = ( x e. _V |-> { z | E. y e. ( ~P x i^i Fin ) z = |^| y } ) $.
        
        ### Hall's marriage theorem
        
        ### Supremum and infimum
            $c sup $.
            $c inf $.
            CLASS csup $a class sup ( A , B , R ) $.
            CLASS cinf $a class inf ( A , B , R ) $.
            DEFINITION df-sup $a |- sup ( A , B , R ) = U. { x e. B | ( A. y e. A -. x R y /\ A. y e. B ( y R x -> E. z e. A y R z ) ) } $.
            DEFINITION df-inf $a |- inf ( A , B , R ) = sup ( A , B , `' R ) $.
        
        ### Ordinal isomorphism, Hartogs's theorem
            $c OrdIso $.
            CLASS coi $a class OrdIso ( R , A ) $.
            DEFINITION df-oi $a |- OrdIso ( R , A ) = if ( ( R We A /\ R Se A ) , ( recs ( ( h e. _V |-> ( iota_ v e. { w e. A | A. j e. ran h j R w } A. u e. { w e. A | A. j e. ran h j R w } -. u R v ) ) ) |` { x e. On | E. t e. A A. z e. ( recs ( ( h e. _V |-> ( iota_ v e. { w e. A | A. j e. ran h j R w } A. u e. { w e. A | A. j e. ran h j R w } -. u R v ) ) ) " x ) z R t } ) , (/) ) $.
        
        ### Hartogs function
            $c har $.
            CLASS char $a class har $.
            DEFINITION df-har $a |- har = ( x e. _V |-> { y e. On | y ~<_ x } ) $.
        
        ### Weak dominance
            $c ~<_* $.
            CLASS cwdom $a class ~<_* $.
            DEFINITION df-wdom $a |- ~<_* = { <. x , y >. | ( x = (/) \/ E. z z : y -onto-> x ) } $.
        
    
    ## ZF Set Theory - add the Axiom of Regularity
        ### Introduce the Axiom of Regularity
            AXIOM ax-reg $a |- ( E. y y e. x -> E. y ( y e. x /\ A. z ( z e. y -> -. z e. x ) ) ) $.
        
        ### Axiom of Infinity equivalents
        
    
    ## ZF Set Theory - add the Axiom of Infinity
        ### Introduce the Axiom of Infinity
            AXIOM ax-inf $a |- E. y ( x e. y /\ A. z ( z e. y -> E. w ( z e. w /\ w e. y ) ) ) $.
            AXIOM ax-inf2 $a |- E. x ( E. y ( y e. x /\ A. z -. z e. y ) /\ A. y ( y e. x -> E. z ( z e. x /\ A. w ( w e. z <-> ( w e. y \/ w = y ) ) ) ) ) $.
        
        ### Existence of omega (the set of natural numbers)
        
        ### Cantor normal form
            $c CNF $.
            CLASS ccnf $a class CNF $.
            DEFINITION df-cnf $a |- CNF = ( x e. On , y e. On |-> ( f e. { g e. ( x ^m y ) | g finSupp (/) } |-> [_ OrdIso ( _E , ( f supp (/) ) ) / h ]_ ( seqom ( ( k e. _V , z e. _V |-> ( ( ( x ^o ( h ` k ) ) .o ( f ` ( h ` k ) ) ) +o z ) ) , (/) ) ` dom h ) ) ) $.
        
        ### Transitive closure of a relation
            $c t++ $.
            CLASS cttrcl $a class t++ R $.
            DEFINITION df-ttrcl $a |- t++ R = { <. x , y >. | E. n e. ( _om \ 1o ) E. f ( f Fn suc n /\ ( ( f ` (/) ) = x /\ ( f ` n ) = y ) /\ A. m e. n ( f ` m ) R ( f ` suc m ) ) } $.
        
        ### Transitive closure
            $c TC $.
            CLASS ctc $a class TC $.
            DEFINITION df-tc $a |- TC = ( x e. _V |-> |^| { y | ( x C_ y /\ Tr y ) } ) $.
        
        ### Well-Founded Induction
        
        ### Well-Founded Recursion
        
        ### Rank
            $c R1 $.
            $c rank $.
            CLASS cr1 $a class R1 $.
            CLASS crnk $a class rank $.
            DEFINITION df-r1 $a |- R1 = rec ( ( x e. _V |-> ~P x ) , (/) ) $.
            DEFINITION df-rank $a |- rank = ( x e. _V |-> |^| { y e. On | x e. ( R1 ` suc y ) } ) $.
        
        ### Scott's trick; collection principle; Hilbert's epsilon
        
        ### Disjoint union
            $c |_| $.
            $c inl $.
            $c inr $.
            CLASS cdju $a class ( A |_| B ) $.
            CLASS cinl $a class inl $.
            CLASS cinr $a class inr $.
            DEFINITION df-dju $a |- ( A |_| B ) = ( ( { (/) } X. A ) u. ( { 1o } X. B ) ) $.
            DEFINITION df-inl $a |- inl = ( x e. _V |-> <. (/) , x >. ) $.
            DEFINITION df-inr $a |- inr = ( x e. _V |-> <. 1o , x >. ) $.
        
        ### Cardinal numbers
            $c card $.
            $c aleph $.
            $c cf $.
            $c AC_ $.
            CLASS ccrd $a class card $.
            CLASS cale $a class aleph $.
            CLASS ccf $a class cf $.
            WFF wacn $a class AC_ A $.
            DEFINITION df-card $a |- card = ( x e. _V |-> |^| { y e. On | y ~~ x } ) $.
            DEFINITION df-aleph $a |- aleph = rec ( har , _om ) $.
            DEFINITION df-cf $a |- cf = ( x e. On |-> |^| { y | E. z ( y = ( card ` z ) /\ ( z C_ x /\ A. v e. x E. u e. z v C_ u ) ) } ) $.
            DEFINITION df-acn $a |- AC_ A = { x | ( A e. _V /\ A. f e. ( ( ~P x \ { (/) } ) ^m A ) E. g A. y e. A ( g ` y ) e. ( f ` y ) ) } $.
        
        ### Axiom of Choice equivalents
            $c CHOICE $.
            WFF wac $a wff CHOICE $.
            DEFINITION df-ac $a |- ( CHOICE <-> A. x E. f ( f C_ x /\ f Fn dom x ) ) $.
        
        ### Cardinal number arithmetic
        
        ### The Ackermann bijection
        
        ### Cofinality (without Axiom of Choice)
        
        ### Eight inequivalent definitions of finite set
            $c Fin1a Fin2 Fin3 Fin4 Fin5 Fin6 Fin7 $.
            CLASS cfin1a $a class Fin1a $.
            CLASS cfin2 $a class Fin2 $.
            CLASS cfin4 $a class Fin4 $.
            CLASS cfin3 $a class Fin3 $.
            CLASS cfin5 $a class Fin5 $.
            CLASS cfin6 $a class Fin6 $.
            CLASS cfin7 $a class Fin7 $.
            DEFINITION df-fin1a $a |- Fin1a = { x | A. y e. ~P x ( y e. Fin \/ ( x \ y ) e. Fin ) } $.
            DEFINITION df-fin2 $a |- Fin2 = { x | A. y e. ~P ~P x ( ( y =/= (/) /\ [C.] Or y ) -> U. y e. y ) } $.
            DEFINITION df-fin4 $a |- Fin4 = { x | -. E. y ( y C. x /\ y ~~ x ) } $.
            DEFINITION df-fin3 $a |- Fin3 = { x | ~P x e. Fin4 } $.
            DEFINITION df-fin5 $a |- Fin5 = { x | ( x = (/) \/ x ~< ( x |_| x ) ) } $.
            DEFINITION df-fin6 $a |- Fin6 = { x | ( x ~< 2o \/ x ~< ( x X. x ) ) } $.
            DEFINITION df-fin7 $a |- Fin7 = { x | -. E. y e. ( On \ _om ) x ~~ y } $.
        
        ### Hereditarily size-limited sets without Choice
        
    
# ZFC (ZERMELO-FRAENKEL WITH CHOICE) SET THEORY
    ## ZFC Set Theory - add Countable Choice and Dependent Choice
        ### Introduce the Axiom of Countable Choice
            AXIOM ax-cc $a |- ( x ~~ _om -> E. f A. z e. x ( z =/= (/) -> ( f ` z ) e. z ) ) $.
        
        ### Introduce the Axiom of Dependent Choice
            AXIOM ax-dc $a |- ( ( E. y E. z y x z /\ ran x C_ dom x ) -> E. f A. n e. _om ( f ` n ) x ( f ` suc n ) ) $.
        
    
    ## ZFC Set Theory - add the Axiom of Choice
        ### Introduce the Axiom of Choice
            AXIOM ax-ac $a |- E. y A. z A. w ( ( z e. w /\ w e. x ) -> E. v A. u ( E. t ( ( u e. w /\ w e. t ) /\ ( u e. t /\ t e. y ) ) <-> u = v ) ) $.
            AXIOM ax-ac2 $a |- E. y A. z E. v A. u ( ( y e. x /\ ( z e. y -> ( ( v e. x /\ -. y = v ) /\ z e. v ) ) ) \/ ( -. y e. x /\ ( z e. x -> ( ( v e. z /\ v e. y ) /\ ( ( u e. z /\ u e. y ) -> u = v ) ) ) ) ) $.
        
        ### AC equivalents:  well-ordering, Zorn's lemma
        
        ### Cardinal number theorems using Axiom of Choice
        
        ### Cardinal number arithmetic using Axiom of Choice
        
        ### Cofinality using the Axiom of Choice
        
    
    ## ZFC Axioms with no distinct variable requirements
    
    ## The Generalized Continuum Hypothesis
        ### Sets satisfying the Generalized Continuum Hypothesis
            $c GCH $.
            CLASS cgch $a class GCH $.
            DEFINITION df-gch $a |- GCH = ( Fin u. { x | A. y -. ( x ~< y /\ y ~< ~P x ) } ) $.
        
        ### Derivation of the Axiom of Choice
        
    
# TG (TARSKI-GROTHENDIECK) SET THEORY
    ## Inaccessibles
        ### Weakly and strongly inaccessible cardinals
            $c InaccW $.
            $c Inacc $.
            CLASS cwina $a class InaccW $.
            CLASS cina $a class Inacc $.
            DEFINITION df-wina $a |- InaccW = { x | ( x =/= (/) /\ ( cf ` x ) = x /\ A. y e. x E. z e. x y ~< z ) } $.
            DEFINITION df-ina $a |- Inacc = { x | ( x =/= (/) /\ ( cf ` x ) = x /\ A. y e. x ~P y ~< x ) } $.
        
        ### Weak universes
            $c WUni $.
            $c wUniCl $.
            CLASS cwun $a class WUni $.
            CLASS cwunm $a class wUniCl $.
            DEFINITION df-wun $a |- WUni = { u | ( Tr u /\ u =/= (/) /\ A. x e. u ( U. x e. u /\ ~P x e. u /\ A. y e. u { x , y } e. u ) ) } $.
            DEFINITION df-wunc $a |- wUniCl = ( x e. _V |-> |^| { u e. WUni | x C_ u } ) $.
        
        ### Tarski classes
            $c Tarski $.
            CLASS ctsk $a class Tarski $.
            DEFINITION df-tsk $a |- Tarski = { y | ( A. z e. y ( ~P z C_ y /\ E. w e. y ~P z C_ w ) /\ A. z e. ~P y ( z ~~ y \/ z e. y ) ) } $.
        
        ### Grothendieck universes
            $c Univ $.
            CLASS cgru $a class Univ $.
            DEFINITION df-gru $a |- Univ = { u | ( Tr u /\ A. x e. u ( ~P x e. u /\ A. y e. u { x , y } e. u /\ A. y e. ( u ^m x ) U. ran y e. u ) ) } $.
        
    
    ## ZFC Set Theory plus the Tarski-Grothendieck Axiom
        ### Introduce the Tarski-Grothendieck Axiom
            AXIOM ax-groth $a |- E. y ( x e. y /\ A. z e. y ( A. w ( w C_ z -> w e. y ) /\ E. w e. y A. v ( v C_ z -> v e. w ) ) /\ A. z ( z C_ y -> ( z ~~ y \/ z e. y ) ) ) $.
        
        ### Derive the Power Set, Infinity and Choice Axioms
        
        ### Tarski map function
            $c tarskiMap $.
            CLASS ctskm $a class tarskiMap $.
            DEFINITION df-tskm $a |- tarskiMap = ( x e. _V |-> |^| { y e. Tarski | x e. y } ) $.
        
    
# REAL AND COMPLEX NUMBERS
    ## Construction and axiomatization of real and complex numbers
        ### Dedekind-cut construction of real and complex numbers
            $c N. $.
            $c +N $.
            $c .N $.
            $c <N $.
            $c +pQ $.
            $c .pQ $.
            $c <pQ $.
            $c ~Q $.
            $c Q. $.
            $c 1Q $.
            $c /Q $.
            $c +Q $.
            $c .Q $.
            $c *Q $.
            $c <Q $.
            $c P. $.
            $c 1P $.
            $c +P. $.
            $c .P. $.
            $c <P $.
            $c ~R $.
            $c R. $.
            $c 0R $.
            $c 1R $.
            $c -1R $.
            $c +R $.
            $c .R $.
            $c <R $.
            $c <RR $.
            $c CC $.
            $c RR $.
            $c 0 $.
            $c 1 $.
            $c _i $.
            $c + $.
            $c x. $.
            CLASS cnpi $a class N. $.
            CLASS cpli $a class +N $.
            CLASS cmi $a class .N $.
            CLASS clti $a class <N $.
            CLASS cplpq $a class +pQ $.
            CLASS cmpq $a class .pQ $.
            CLASS cltpq $a class <pQ $.
            CLASS ceq $a class ~Q $.
            CLASS cnq $a class Q. $.
            CLASS c1q $a class 1Q $.
            CLASS cerq $a class /Q $.
            CLASS cplq $a class +Q $.
            CLASS cmq $a class .Q $.
            CLASS crq $a class *Q $.
            CLASS cltq $a class <Q $.
            CLASS cnp $a class P. $.
            CLASS c1p $a class 1P $.
            CLASS cpp $a class +P. $.
            CLASS cmp $a class .P. $.
            CLASS cltp $a class <P $.
            CLASS cer $a class ~R $.
            CLASS cnr $a class R. $.
            CLASS c0r $a class 0R $.
            CLASS c1r $a class 1R $.
            CLASS cm1r $a class -1R $.
            CLASS cplr $a class +R $.
            CLASS cmr $a class .R $.
            CLASS cltr $a class <R $.
            DEFINITION df-ni $a |- N. = ( _om \ { (/) } ) $.
            DEFINITION df-pli $a |- +N = ( +o |` ( N. X. N. ) ) $.
            DEFINITION df-mi $a |- .N = ( .o |` ( N. X. N. ) ) $.
            DEFINITION df-lti $a |- <N = ( _E i^i ( N. X. N. ) ) $.
            DEFINITION df-plpq $a |- +pQ = ( x e. ( N. X. N. ) , y e. ( N. X. N. ) |-> <. ( ( ( 1st ` x ) .N ( 2nd ` y ) ) +N ( ( 1st ` y ) .N ( 2nd ` x ) ) ) , ( ( 2nd ` x ) .N ( 2nd ` y ) ) >. ) $.
            DEFINITION df-mpq $a |- .pQ = ( x e. ( N. X. N. ) , y e. ( N. X. N. ) |-> <. ( ( 1st ` x ) .N ( 1st ` y ) ) , ( ( 2nd ` x ) .N ( 2nd ` y ) ) >. ) $.
            DEFINITION df-ltpq $a |- <pQ = { <. x , y >. | ( ( x e. ( N. X. N. ) /\ y e. ( N. X. N. ) ) /\ ( ( 1st ` x ) .N ( 2nd ` y ) ) <N ( ( 1st ` y ) .N ( 2nd ` x ) ) ) } $.
            DEFINITION df-enq $a |- ~Q = { <. x , y >. | ( ( x e. ( N. X. N. ) /\ y e. ( N. X. N. ) ) /\ E. z E. w E. v E. u ( ( x = <. z , w >. /\ y = <. v , u >. ) /\ ( z .N u ) = ( w .N v ) ) ) } $.
            DEFINITION df-nq $a |- Q. = { x e. ( N. X. N. ) | A. y e. ( N. X. N. ) ( x ~Q y -> -. ( 2nd ` y ) <N ( 2nd ` x ) ) } $.
            DEFINITION df-erq $a |- /Q = ( ~Q i^i ( ( N. X. N. ) X. Q. ) ) $.
            DEFINITION df-plq $a |- +Q = ( ( /Q o. +pQ ) |` ( Q. X. Q. ) ) $.
            DEFINITION df-mq $a |- .Q = ( ( /Q o. .pQ ) |` ( Q. X. Q. ) ) $.
            DEFINITION df-1nq $a |- 1Q = <. 1o , 1o >. $.
            DEFINITION df-rq $a |- *Q = ( `' .Q " { 1Q } ) $.
            DEFINITION df-ltnq $a |- <Q = ( <pQ i^i ( Q. X. Q. ) ) $.
            DEFINITION df-np $a |- P. = { x | ( ( (/) C. x /\ x C. Q. ) /\ A. y e. x ( A. z ( z <Q y -> z e. x ) /\ E. z e. x y <Q z ) ) } $.
            DEFINITION df-1p $a |- 1P = { x | x <Q 1Q } $.
            DEFINITION df-plp $a |- +P. = ( x e. P. , y e. P. |-> { w | E. v e. x E. u e. y w = ( v +Q u ) } ) $.
            DEFINITION df-mp $a |- .P. = ( x e. P. , y e. P. |-> { w | E. v e. x E. u e. y w = ( v .Q u ) } ) $.
            DEFINITION df-ltp $a |- <P = { <. x , y >. | ( ( x e. P. /\ y e. P. ) /\ x C. y ) } $.
            DEFINITION df-enr $a |- ~R = { <. x , y >. | ( ( x e. ( P. X. P. ) /\ y e. ( P. X. P. ) ) /\ E. z E. w E. v E. u ( ( x = <. z , w >. /\ y = <. v , u >. ) /\ ( z +P. u ) = ( w +P. v ) ) ) } $.
            DEFINITION df-nr $a |- R. = ( ( P. X. P. ) /. ~R ) $.
            DEFINITION df-plr $a |- +R = { <. <. x , y >. , z >. | ( ( x e. R. /\ y e. R. ) /\ E. w E. v E. u E. f ( ( x = [ <. w , v >. ] ~R /\ y = [ <. u , f >. ] ~R ) /\ z = [ <. ( w +P. u ) , ( v +P. f ) >. ] ~R ) ) } $.
            DEFINITION df-mr $a |- .R = { <. <. x , y >. , z >. | ( ( x e. R. /\ y e. R. ) /\ E. w E. v E. u E. f ( ( x = [ <. w , v >. ] ~R /\ y = [ <. u , f >. ] ~R ) /\ z = [ <. ( ( w .P. u ) +P. ( v .P. f ) ) , ( ( w .P. f ) +P. ( v .P. u ) ) >. ] ~R ) ) } $.
            DEFINITION df-ltr $a |- <R = { <. x , y >. | ( ( x e. R. /\ y e. R. ) /\ E. z E. w E. v E. u ( ( x = [ <. z , w >. ] ~R /\ y = [ <. v , u >. ] ~R ) /\ ( z +P. u ) <P ( w +P. v ) ) ) } $.
            DEFINITION df-0r $a |- 0R = [ <. 1P , 1P >. ] ~R $.
            DEFINITION df-1r $a |- 1R = [ <. ( 1P +P. 1P ) , 1P >. ] ~R $.
            DEFINITION df-m1r $a |- -1R = [ <. 1P , ( 1P +P. 1P ) >. ] ~R $.
            CLASS cc $a class CC $.
            CLASS cr $a class RR $.
            CLASS cc0 $a class 0 $.
            CLASS c1 $a class 1 $.
            CLASS ci $a class _i $.
            CLASS caddc $a class + $.
            CLASS cltrr $a class <RR $.
            CLASS cmul $a class x. $.
            DEFINITION df-c $a |- CC = ( R. X. R. ) $.
            DEFINITION df-0 $a |- 0 = <. 0R , 0R >. $.
            DEFINITION df-1 $a |- 1 = <. 1R , 0R >. $.
            DEFINITION df-i $a |- _i = <. 0R , 1R >. $.
            DEFINITION df-r $a |- RR = ( R. X. { 0R } ) $.
            DEFINITION df-add $a |- + = { <. <. x , y >. , z >. | ( ( x e. CC /\ y e. CC ) /\ E. w E. v E. u E. f ( ( x = <. w , v >. /\ y = <. u , f >. ) /\ z = <. ( w +R u ) , ( v +R f ) >. ) ) } $.
            DEFINITION df-mul $a |- x. = { <. <. x , y >. , z >. | ( ( x e. CC /\ y e. CC ) /\ E. w E. v E. u E. f ( ( x = <. w , v >. /\ y = <. u , f >. ) /\ z = <. ( ( w .R u ) +R ( -1R .R ( v .R f ) ) ) , ( ( v .R u ) +R ( w .R f ) ) >. ) ) } $.
            DEFINITION df-lt $a |- <RR = { <. x , y >. | ( ( x e. RR /\ y e. RR ) /\ E. z E. w ( ( x = <. z , 0R >. /\ y = <. w , 0R >. ) /\ z <R w ) ) } $.
        
        ### Final derivation of real and complex number postulates
        
        ### Real and complex number postulates restated as axioms
            AXIOM ax-cnex $a |- CC e. _V $.
            AXIOM ax-resscn $a |- RR C_ CC $.
            AXIOM ax-1cn $a |- 1 e. CC $.
            AXIOM ax-icn $a |- _i e. CC $.
            AXIOM ax-addcl $a |- ( ( A e. CC /\ B e. CC ) -> ( A + B ) e. CC ) $.
            AXIOM ax-addrcl $a |- ( ( A e. RR /\ B e. RR ) -> ( A + B ) e. RR ) $.
            AXIOM ax-mulcl $a |- ( ( A e. CC /\ B e. CC ) -> ( A x. B ) e. CC ) $.
            AXIOM ax-mulrcl $a |- ( ( A e. RR /\ B e. RR ) -> ( A x. B ) e. RR ) $.
            AXIOM ax-mulcom $a |- ( ( A e. CC /\ B e. CC ) -> ( A x. B ) = ( B x. A ) ) $.
            AXIOM ax-addass $a |- ( ( A e. CC /\ B e. CC /\ C e. CC ) -> ( ( A + B ) + C ) = ( A + ( B + C ) ) ) $.
            AXIOM ax-mulass $a |- ( ( A e. CC /\ B e. CC /\ C e. CC ) -> ( ( A x. B ) x. C ) = ( A x. ( B x. C ) ) ) $.
            AXIOM ax-distr $a |- ( ( A e. CC /\ B e. CC /\ C e. CC ) -> ( A x. ( B + C ) ) = ( ( A x. B ) + ( A x. C ) ) ) $.
            AXIOM ax-i2m1 $a |- ( ( _i x. _i ) + 1 ) = 0 $.
            AXIOM ax-1ne0 $a |- 1 =/= 0 $.
            AXIOM ax-1rid $a |- ( A e. RR -> ( A x. 1 ) = A ) $.
            AXIOM ax-rnegex $a |- ( A e. RR -> E. x e. RR ( A + x ) = 0 ) $.
            AXIOM ax-rrecex $a |- ( ( A e. RR /\ A =/= 0 ) -> E. x e. RR ( A x. x ) = 1 ) $.
            AXIOM ax-cnre $a |- ( A e. CC -> E. x e. RR E. y e. RR A = ( x + ( _i x. y ) ) ) $.
            AXIOM ax-pre-lttri $a |- ( ( A e. RR /\ B e. RR ) -> ( A <RR B <-> -. ( A = B \/ B <RR A ) ) ) $.
            AXIOM ax-pre-lttrn $a |- ( ( A e. RR /\ B e. RR /\ C e. RR ) -> ( ( A <RR B /\ B <RR C ) -> A <RR C ) ) $.
            AXIOM ax-pre-ltadd $a |- ( ( A e. RR /\ B e. RR /\ C e. RR ) -> ( A <RR B -> ( C + A ) <RR ( C + B ) ) ) $.
            AXIOM ax-pre-mulgt0 $a |- ( ( A e. RR /\ B e. RR ) -> ( ( 0 <RR A /\ 0 <RR B ) -> 0 <RR ( A x. B ) ) ) $.
            AXIOM ax-pre-sup $a |- ( ( A C_ RR /\ A =/= (/) /\ E. x e. RR A. y e. A y <RR x ) -> E. x e. RR ( A. y e. A -. x <RR y /\ A. y e. RR ( y <RR x -> E. z e. A y <RR z ) ) ) $.
            AXIOM ax-addf $a |- + : ( CC X. CC ) --> CC $.
            AXIOM ax-mulf $a |- x. : ( CC X. CC ) --> CC $.
        
    
    ## Derive the basic properties from the field axioms
        ### Some deductions from the field axioms for complex numbers
        
        ### Infinity and the extended real number system
            $c <_ $.
            $c +oo $.
            $c -oo $.
            $c RR* $.
            $c < $.
            CLASS cpnf $a class +oo $.
            CLASS cmnf $a class -oo $.
            CLASS cxr $a class RR* $.
            CLASS clt $a class < $.
            CLASS cle $a class <_ $.
            DEFINITION df-pnf $a |- +oo = ~P U. CC $.
            DEFINITION df-mnf $a |- -oo = ~P +oo $.
            DEFINITION df-xr $a |- RR* = ( RR u. { +oo , -oo } ) $.
            DEFINITION df-ltxr $a |- < = ( { <. x , y >. | ( x e. RR /\ y e. RR /\ x <RR y ) } u. ( ( ( RR u. { -oo } ) X. { +oo } ) u. ( { -oo } X. RR ) ) ) $.
            DEFINITION df-le $a |- <_ = ( ( RR* X. RR* ) \ `' < ) $.
        
        ### Restate the ordering postulates with extended real "less than"
        
        ### Ordering on reals
        
        ### Initial properties of the complex numbers
        
    
    ## Real and complex numbers - basic operations
        ### Addition
        
        ### Subtraction
            $c - $.
            $c -u $.
            CLASS cmin $a class - $.
            CLASS cneg $a class -u A $.
            DEFINITION df-sub $a |- - = ( x e. CC , y e. CC |-> ( iota_ z e. CC ( y + z ) = x ) ) $.
            DEFINITION df-neg $a |- -u A = ( 0 - A ) $.
        
        ### Multiplication
        
        ### Ordering on reals (cont.)
        
        ### Reciprocals
        
        ### Division
            CLASS cdiv $a class / $.
            DEFINITION df-div $a |- / = ( x e. CC , y e. ( CC \ { 0 } ) |-> ( iota_ z e. CC ( y x. z ) = x ) ) $.
        
        ### Ordering on reals (cont.)
        
        ### Completeness Axiom and Suprema
        
        ### Imaginary and complex number properties
        
        ### Function operation analogue theorems
        
    
    ## Integer sets
        ### Positive integers (as a subset of complex numbers)
            $c NN $.
            CLASS cn $a class NN $.
            DEFINITION df-nn $a |- NN = ( rec ( ( x e. _V |-> ( x + 1 ) ) , 1 ) " _om ) $.
        
        ### Principle of mathematical induction
        
        ### Decimal representation of numbers
            $c 2 $.
            $c 3 $.
            $c 4 $.
            $c 5 $.
            $c 6 $.
            $c 7 $.
            $c 8 $.
            $c 9 $.
            CLASS c2 $a class 2 $.
            CLASS c3 $a class 3 $.
            CLASS c4 $a class 4 $.
            CLASS c5 $a class 5 $.
            CLASS c6 $a class 6 $.
            CLASS c7 $a class 7 $.
            CLASS c8 $a class 8 $.
            CLASS c9 $a class 9 $.
            DEFINITION df-2 $a |- 2 = ( 1 + 1 ) $.
            DEFINITION df-3 $a |- 3 = ( 2 + 1 ) $.
            DEFINITION df-4 $a |- 4 = ( 3 + 1 ) $.
            DEFINITION df-5 $a |- 5 = ( 4 + 1 ) $.
            DEFINITION df-6 $a |- 6 = ( 5 + 1 ) $.
            DEFINITION df-7 $a |- 7 = ( 6 + 1 ) $.
            DEFINITION df-8 $a |- 8 = ( 7 + 1 ) $.
            DEFINITION df-9 $a |- 9 = ( 8 + 1 ) $.
        
        ### Some properties of specific numbers
        
        ### Simple number properties
        
        ### The Archimedean property
        
        ### Nonnegative integers (as a subset of complex numbers)
            $c NN0 $.
            CLASS cn0 $a class NN0 $.
            DEFINITION df-n0 $a |- NN0 = ( NN u. { 0 } ) $.
        
        ### Extended nonnegative integers
            $c NN0* $.
            CLASS cxnn0 $a class NN0* $.
            DEFINITION df-xnn0 $a |- NN0* = ( NN0 u. { +oo } ) $.
        
        ### Integers (as a subset of complex numbers)
            $c ZZ $.
            CLASS cz $a class ZZ $.
            DEFINITION df-z $a |- ZZ = { n e. RR | ( n = 0 \/ n e. NN \/ -u n e. NN ) } $.
        
        ### Decimal arithmetic
            $c ; $.
            CLASS cdc $a class ; A B $.
            DEFINITION df-dec $a |- ; A B = ( ( ( 9 + 1 ) x. A ) + B ) $.
        
        ### Upper sets of integers
            $c ZZ>= $.
            CLASS cuz $a class ZZ>= $.
            DEFINITION df-uz $a |- ZZ>= = ( j e. ZZ |-> { k e. ZZ | j <_ k } ) $.
        
        ### Well-ordering principle for bounded-below sets of integers
        
        ### Rational numbers (as a subset of complex numbers)
            $c QQ $.
            CLASS cq $a class QQ $.
            DEFINITION df-q $a |- QQ = ( / " ( ZZ X. NN ) ) $.
        
        ### Existence of the set of complex numbers
        
    
    ## Order sets
        ### Positive reals (as a subset of complex numbers)
            $c RR+ $.
            CLASS crp $a class RR+ $.
            DEFINITION df-rp $a |- RR+ = { x e. RR | 0 < x } $.
        
        ### Infinity and the extended real number system (cont.)
            $c -e $.
            $c +e $.
            $c *e $.
            CLASS cxne $a class -e A $.
            CLASS cxad $a class +e $.
            CLASS cxmu $a class *e $.
            DEFINITION df-xneg $a |- -e A = if ( A = +oo , -oo , if ( A = -oo , +oo , -u A ) ) $.
            DEFINITION df-xadd $a |- +e = ( x e. RR* , y e. RR* |-> if ( x = +oo , if ( y = -oo , 0 , +oo ) , if ( x = -oo , if ( y = +oo , 0 , -oo ) , if ( y = +oo , +oo , if ( y = -oo , -oo , ( x + y ) ) ) ) ) ) $.
            DEFINITION df-xmul $a |- *e = ( x e. RR* , y e. RR* |-> if ( ( x = 0 \/ y = 0 ) , 0 , if ( ( ( ( 0 < y /\ x = +oo ) \/ ( y < 0 /\ x = -oo ) ) \/ ( ( 0 < x /\ y = +oo ) \/ ( x < 0 /\ y = -oo ) ) ) , +oo , if ( ( ( ( 0 < y /\ x = -oo ) \/ ( y < 0 /\ x = +oo ) ) \/ ( ( 0 < x /\ y = -oo ) \/ ( x < 0 /\ y = +oo ) ) ) , -oo , ( x x. y ) ) ) ) ) $.
        
        ### Supremum and infimum on the extended reals
        
        ### Real number intervals
            $c (,) $.
            $c (,] $.
            $c [,) $.
            $c [,] $.
            CLASS cioo $a class (,) $.
            CLASS cioc $a class (,] $.
            CLASS cico $a class [,) $.
            CLASS cicc $a class [,] $.
            DEFINITION df-ioo $a |- (,) = ( x e. RR* , y e. RR* |-> { z e. RR* | ( x < z /\ z < y ) } ) $.
            DEFINITION df-ioc $a |- (,] = ( x e. RR* , y e. RR* |-> { z e. RR* | ( x < z /\ z <_ y ) } ) $.
            DEFINITION df-ico $a |- [,) = ( x e. RR* , y e. RR* |-> { z e. RR* | ( x <_ z /\ z < y ) } ) $.
            DEFINITION df-icc $a |- [,] = ( x e. RR* , y e. RR* |-> { z e. RR* | ( x <_ z /\ z <_ y ) } ) $.
        
        ### Finite intervals of integers
            $c ... $.
            CLASS cfz $a class ... $.
            DEFINITION df-fz $a |- ... = ( m e. ZZ , n e. ZZ |-> { k e. ZZ | ( m <_ k /\ k <_ n ) } ) $.
        
        ### Finite intervals of nonnegative integers
        
        ### Half-open integer ranges
            $c ..^ $.
            CLASS cfzo $a class ..^ $.
            DEFINITION df-fzo $a |- ..^ = ( m e. ZZ , n e. ZZ |-> ( m ... ( n - 1 ) ) ) $.
        
    
    ## Elementary integer functions
        ### The floor and ceiling functions
            $c |_ $.
            $c |^ $.
            CLASS cfl $a class |_ $.
            CLASS cceil $a class |^ $.
            DEFINITION df-fl $a |- |_ = ( x e. RR |-> ( iota_ y e. ZZ ( y <_ x /\ x < ( y + 1 ) ) ) ) $.
            DEFINITION df-ceil $a |- |^ = ( x e. RR |-> -u ( |_ ` -u x ) ) $.
        
        ### The modulo (remainder) operation
            $c mod $.
            $c == $.
            CLASS cmo $a class mod $.
            DEFINITION df-mod $a |- mod = ( x e. RR , y e. RR+ |-> ( x - ( y x. ( |_ ` ( x / y ) ) ) ) ) $.
        
        ### Miscellaneous theorems about integers
        
        ### Strong induction over upper sets of integers
        
        ### Finitely supported functions over the nonnegative integers
        
        ### The infinite sequence builder "seq" - extension
            $c seq $.
            CLASS cseq $a class seq M ( .+ , F ) $.
            DEFINITION df-seq $a |- seq M ( .+ , F ) = ( rec ( ( x e. _V , y e. _V |-> <. ( x + 1 ) , ( y .+ ( F ` ( x + 1 ) ) ) >. ) , <. M , ( F ` M ) >. ) " _om ) $.
        
        ### Integer powers
            $c ^ $.
            CLASS cexp $a class ^ $.
            DEFINITION df-exp $a |- ^ = ( x e. CC , y e. ZZ |-> if ( y = 0 , 1 , if ( 0 < y , ( seq 1 ( x. , ( NN X. { x } ) ) ` y ) , ( 1 / ( seq 1 ( x. , ( NN X. { x } ) ) ` -u y ) ) ) ) ) $.
        
        ### Ordered pair theorem for nonnegative integers
        
        ### Factorial function
            $c ! $.
            CLASS cfa $a class ! $.
            DEFINITION df-fac $a |- ! = ( { <. 0 , 1 >. } u. seq 1 ( x. , _I ) ) $.
        
        ### The binomial coefficient operation
            $c _C $.
            CLASS cbc $a class _C $.
            DEFINITION df-bc $a |- _C = ( n e. NN0 , k e. ZZ |-> if ( k e. ( 0 ... n ) , ( ( ! ` n ) / ( ( ! ` ( n - k ) ) x. ( ! ` k ) ) ) , 0 ) ) $.
        
        ### The ` # ` (set size) function
            $c # $.
            CLASS chash $a class # $.
            DEFINITION df-hash $a |- # = ( ( ( rec ( ( x e. _V |-> ( x + 1 ) ) , 0 ) |` _om ) o. card ) u. ( ( _V \ Fin ) X. { +oo } ) ) $.
            #### Proper unordered pairs and triples (sets of size 2 and 3)
            
            #### Functions with a domain containing at least two different elements
            
            #### Finite induction on the size of the first component of a binary relation
            
        
    
    ## Words over a set
        ### Definitions and basic theorems
            $c Word $.
            CLASS cword $a class Word S $.
            DEFINITION df-word $a |- Word S = { w | E. l e. NN0 w : ( 0 ..^ l ) --> S } $.
        
        ### Last symbol of a word
            $c lastS $.
            CLASS clsw $a class lastS $.
            DEFINITION df-lsw $a |- lastS = ( w e. _V |-> ( w ` ( ( # ` w ) - 1 ) ) ) $.
        
        ### Concatenations of words
            $c ++ $.
            CLASS cconcat $a class ++ $.
            DEFINITION df-concat $a |- ++ = ( s e. _V , t e. _V |-> ( x e. ( 0 ..^ ( ( # ` s ) + ( # ` t ) ) ) |-> if ( x e. ( 0 ..^ ( # ` s ) ) , ( s ` x ) , ( t ` ( x - ( # ` s ) ) ) ) ) ) $.
        
        ### Singleton words
            $c <" "> $.
            CLASS cs1 $a class <" A "> $.
            DEFINITION df-s1 $a |- <" A "> = { <. 0 , ( _I ` A ) >. } $.
        
        ### Concatenations with singleton words
        
        ### Subwords/substrings
            $c substr $.
            CLASS csubstr $a class substr $.
            DEFINITION df-substr $a |- substr = ( s e. _V , b e. ( ZZ X. ZZ ) |-> if ( ( ( 1st ` b ) ..^ ( 2nd ` b ) ) C_ dom s , ( x e. ( 0 ..^ ( ( 2nd ` b ) - ( 1st ` b ) ) ) |-> ( s ` ( x + ( 1st ` b ) ) ) ) , (/) ) ) $.
        
        ### Prefixes of a word
            $c prefix $.
            CLASS cpfx $a class prefix $.
            DEFINITION df-pfx $a |- prefix = ( s e. _V , l e. NN0 |-> ( s substr <. 0 , l >. ) ) $.
        
        ### Subwords of subwords
        
        ### Subwords and concatenations
        
        ### Subwords of concatenations
        
        ### Splicing words (substring replacement)
            $c splice $.
            CLASS csplice $a class splice $.
            DEFINITION df-splice $a |- splice = ( s e. _V , b e. _V |-> ( ( ( s prefix ( 1st ` ( 1st ` b ) ) ) ++ ( 2nd ` b ) ) ++ ( s substr <. ( 2nd ` ( 1st ` b ) ) , ( # ` s ) >. ) ) ) $.
        
        ### Reversing words
            $c reverse $.
            CLASS creverse $a class reverse $.
            DEFINITION df-reverse $a |- reverse = ( s e. _V |-> ( x e. ( 0 ..^ ( # ` s ) ) |-> ( s ` ( ( ( # ` s ) - 1 ) - x ) ) ) ) $.
        
        ### Repeated symbol words
            $c repeatS $.
            CLASS creps $a class repeatS $.
            DEFINITION df-reps $a |- repeatS = ( s e. _V , n e. NN0 |-> ( x e. ( 0 ..^ n ) |-> s ) ) $.
        
        ### Cyclical shifts of words
            $c cyclShift $.
            $c cyclShiftOLD $.
            CLASS ccsh $a class cyclShift $.
            DEFINITION df-csh $a |- cyclShift = ( w e. { f | E. l e. NN0 f Fn ( 0 ..^ l ) } , n e. ZZ |-> if ( w = (/) , (/) , ( ( w substr <. ( n mod ( # ` w ) ) , ( # ` w ) >. ) ++ ( w prefix ( n mod ( # ` w ) ) ) ) ) ) $.
        
        ### Mapping words by a function
        
        ### Longer string literals
            CLASS cs2 $a class <" A B "> $.
            CLASS cs3 $a class <" A B C "> $.
            CLASS cs4 $a class <" A B C D "> $.
            CLASS cs5 $a class <" A B C D E "> $.
            CLASS cs6 $a class <" A B C D E F "> $.
            CLASS cs7 $a class <" A B C D E F G "> $.
            CLASS cs8 $a class <" A B C D E F G H "> $.
            DEFINITION df-s2 $a |- <" A B "> = ( <" A "> ++ <" B "> ) $.
            DEFINITION df-s3 $a |- <" A B C "> = ( <" A B "> ++ <" C "> ) $.
            DEFINITION df-s4 $a |- <" A B C D "> = ( <" A B C "> ++ <" D "> ) $.
            DEFINITION df-s5 $a |- <" A B C D E "> = ( <" A B C D "> ++ <" E "> ) $.
            DEFINITION df-s6 $a |- <" A B C D E F "> = ( <" A B C D E "> ++ <" F "> ) $.
            DEFINITION df-s7 $a |- <" A B C D E F G "> = ( <" A B C D E F "> ++ <" G "> ) $.
            DEFINITION df-s8 $a |- <" A B C D E F G H "> = ( <" A B C D E F G "> ++ <" H "> ) $.
        
    
    ## Reflexive and transitive closures of relations
        ### The reflexive and transitive properties of relations
        
        ### Basic properties of closures
        
        ### Definitions and basic properties of transitive closures
            $c t+ $.
            $c t* $.
            CLASS ctcl $a class t+ $.
            CLASS crtcl $a class t* $.
            DEFINITION df-trcl $a |- t+ = ( x e. _V |-> |^| { z | ( x C_ z /\ ( z o. z ) C_ z ) } ) $.
            DEFINITION df-rtrcl $a |- t* = ( x e. _V |-> |^| { z | ( ( _I |` ( dom x u. ran x ) ) C_ z /\ x C_ z /\ ( z o. z ) C_ z ) } ) $.
        
        ### Exponentiation of relations
            $c ^r $.
            CLASS crelexp $a class ^r $.
            DEFINITION df-relexp $a |- ^r = ( r e. _V , n e. NN0 |-> if ( n = 0 , ( _I |` ( dom r u. ran r ) ) , ( seq 1 ( ( x e. _V , y e. _V |-> ( x o. r ) ) , ( z e. _V |-> r ) ) ` n ) ) ) $.
        
        ### Reflexive-transitive closure as an indexed union
            $c t*rec $.
            CLASS crtrcl $a class t*rec $.
            DEFINITION df-rtrclrec $a |- t*rec = ( r e. _V |-> U_ n e. NN0 ( r ^r n ) ) $.
        
        ### Principle of transitive induction.
        
    
    ## Elementary real and complex functions
        ### The "shift" operation
            $c shift $.
            CLASS cshi $a class shift $.
            DEFINITION df-shft $a |- shift = ( f e. _V , x e. CC |-> { <. y , z >. | ( y e. CC /\ ( y - x ) f z ) } ) $.
        
        ### Signum (sgn or sign) function
            $c sgn $.
            CLASS csgn $a class sgn $.
            DEFINITION df-sgn $a |- sgn = ( x e. RR* |-> if ( x = 0 , 0 , if ( x < 0 , -u 1 , 1 ) ) ) $.
        
        ### Real and imaginary parts; conjugate
            $c Re $.
            $c Im $.
            $c * $.
            CLASS ccj $a class * $.
            CLASS cre $a class Re $.
            CLASS cim $a class Im $.
            DEFINITION df-cj $a |- * = ( x e. CC |-> ( iota_ y e. CC ( ( x + y ) e. RR /\ ( _i x. ( x - y ) ) e. RR ) ) ) $.
            DEFINITION df-re $a |- Re = ( x e. CC |-> ( ( x + ( * ` x ) ) / 2 ) ) $.
            DEFINITION df-im $a |- Im = ( x e. CC |-> ( Re ` ( x / _i ) ) ) $.
        
        ### Square root; absolute value
            $c sqrt $.
            $c abs $.
            $c +- $.
            CLASS csqrt $a class sqrt $.
            CLASS cabs $a class abs $.
            DEFINITION df-sqrt $a |- sqrt = ( x e. CC |-> ( iota_ y e. CC ( ( y ^ 2 ) = x /\ 0 <_ ( Re ` y ) /\ ( _i x. y ) e/ RR+ ) ) ) $.
            DEFINITION df-abs $a |- abs = ( x e. CC |-> ( sqrt ` ( x x. ( * ` x ) ) ) ) $.
        
    
    ## Elementary limits and convergence
        ### Superior limit (lim sup)
            $c limsup $.
            CLASS clsp $a class limsup $.
            DEFINITION df-limsup $a |- limsup = ( x e. _V |-> inf ( ran ( k e. RR |-> sup ( ( ( x " ( k [,) +oo ) ) i^i RR* ) , RR* , < ) ) , RR* , < ) ) $.
        
        ### Limits
            $c ~~> $.
            $c ~~>r $.
            $c O(1) $.
            $c <_O(1) $.
            CLASS cli $a class ~~> $.
            CLASS crli $a class ~~>r $.
            CLASS co1 $a class O(1) $.
            CLASS clo1 $a class <_O(1) $.
            DEFINITION df-clim $a |- ~~> = { <. f , y >. | ( y e. CC /\ A. x e. RR+ E. j e. ZZ A. k e. ( ZZ>= ` j ) ( ( f ` k ) e. CC /\ ( abs ` ( ( f ` k ) - y ) ) < x ) ) } $.
            DEFINITION df-rlim $a |- ~~>r = { <. f , x >. | ( ( f e. ( CC ^pm RR ) /\ x e. CC ) /\ A. y e. RR+ E. z e. RR A. w e. dom f ( z <_ w -> ( abs ` ( ( f ` w ) - x ) ) < y ) ) } $.
            DEFINITION df-o1 $a |- O(1) = { f e. ( CC ^pm RR ) | E. x e. RR E. m e. RR A. y e. ( dom f i^i ( x [,) +oo ) ) ( abs ` ( f ` y ) ) <_ m } $.
            DEFINITION df-lo1 $a |- <_O(1) = { f e. ( RR ^pm RR ) | E. x e. RR E. m e. RR A. y e. ( dom f i^i ( x [,) +oo ) ) ( f ` y ) <_ m } $.
        
        ### Finite and infinite sums
            $c sum_ $.
            CLASS csu $a class sum_ k e. A B $.
            DEFINITION df-sum $a |- sum_ k e. A B = ( iota x ( E. m e. ZZ ( A C_ ( ZZ>= ` m ) /\ seq m ( + , ( n e. ZZ |-> if ( n e. A , [_ n / k ]_ B , 0 ) ) ) ~~> x ) \/ E. m e. NN E. f ( f : ( 1 ... m ) -1-1-onto-> A /\ x = ( seq 1 ( + , ( n e. NN |-> [_ ( f ` n ) / k ]_ B ) ) ` m ) ) ) ) $.
        
        ### The binomial theorem
        
        ### The inclusion/exclusion principle
        
        ### Infinite sums (cont.)
        
        ### Miscellaneous converging and diverging sequences
        
        ### Arithmetic series
        
        ### Geometric series
        
        ### Ratio test for infinite series convergence
        
        ### Mertens' theorem
        
        ### Finite and infinite products
            #### Product sequences
            
            #### Non-trivial convergence
            
            #### Complex products
                $c prod_ $.
                CLASS cprod $a class prod_ k e. A B $.
                DEFINITION df-prod $a |- prod_ k e. A B = ( iota x ( E. m e. ZZ ( A C_ ( ZZ>= ` m ) /\ E. n e. ( ZZ>= ` m ) E. y ( y =/= 0 /\ seq n ( x. , ( k e. ZZ |-> if ( k e. A , B , 1 ) ) ) ~~> y ) /\ seq m ( x. , ( k e. ZZ |-> if ( k e. A , B , 1 ) ) ) ~~> x ) \/ E. m e. NN E. f ( f : ( 1 ... m ) -1-1-onto-> A /\ x = ( seq 1 ( x. , ( n e. NN |-> [_ ( f ` n ) / k ]_ B ) ) ` m ) ) ) ) $.
            
            #### Finite products
            
            #### Infinite products
            
        
        ### Falling and Rising Factorial
            $c FallFac $.
            $c RiseFac $.
            CLASS cfallfac $a class FallFac $.
            CLASS crisefac $a class RiseFac $.
            DEFINITION df-risefac $a |- RiseFac = ( x e. CC , n e. NN0 |-> prod_ k e. ( 0 ... ( n - 1 ) ) ( x + k ) ) $.
            DEFINITION df-fallfac $a |- FallFac = ( x e. CC , n e. NN0 |-> prod_ k e. ( 0 ... ( n - 1 ) ) ( x - k ) ) $.
        
        ### Bernoulli polynomials and sums of k-th powers
            $c BernPoly $.
            CLASS cbp $a class BernPoly $.
            DEFINITION df-bpoly $a |- BernPoly = ( m e. NN0 , x e. CC |-> ( wrecs ( < , NN0 , ( g e. _V |-> [_ ( # ` dom g ) / n ]_ ( ( x ^ n ) - sum_ k e. dom g ( ( n _C k ) x. ( ( g ` k ) / ( ( n - k ) + 1 ) ) ) ) ) ) ` m ) ) $.
        
    
    ## Elementary trigonometry
        ### The exponential, sine, and cosine functions
            $c exp $.
            $c _e $.
            $c sin $.
            $c cos $.
            $c tan $.
            $c _pi $.
            CLASS ce $a class exp $.
            CLASS ceu $a class _e $.
            CLASS csin $a class sin $.
            CLASS ccos $a class cos $.
            CLASS ctan $a class tan $.
            CLASS cpi $a class _pi $.
            DEFINITION df-ef $a |- exp = ( x e. CC |-> sum_ k e. NN0 ( ( x ^ k ) / ( ! ` k ) ) ) $.
            DEFINITION df-e $a |- _e = ( exp ` 1 ) $.
            DEFINITION df-sin $a |- sin = ( x e. CC |-> ( ( ( exp ` ( _i x. x ) ) - ( exp ` ( -u _i x. x ) ) ) / ( 2 x. _i ) ) ) $.
            DEFINITION df-cos $a |- cos = ( x e. CC |-> ( ( ( exp ` ( _i x. x ) ) + ( exp ` ( -u _i x. x ) ) ) / 2 ) ) $.
            DEFINITION df-tan $a |- tan = ( x e. ( `' cos " ( CC \ { 0 } ) ) |-> ( ( sin ` x ) / ( cos ` x ) ) ) $.
            DEFINITION df-pi $a |- _pi = inf ( ( RR+ i^i ( `' sin " { 0 } ) ) , RR , < ) $.
            #### The circle constant (tau = 2 pi)
                $c _tau $.
                CLASS ctau $a class _tau $.
                DEFINITION df-tau $a |- _tau = inf ( ( RR+ i^i ( `' cos " { 1 } ) ) , RR , < ) $.
            
        
        ### _e is irrational
        
    
    ## Cardinality of real and complex number subsets
        ### Countability of integers and rationals
        
        ### The reals are uncountable
        
    
# ELEMENTARY NUMBER THEORY
    ## Elementary properties of divisibility
        ### Irrationality of square root of 2
        
        ### Some Number sets are chains of proper subsets
        
        ### The divides relation
            $c || $.
            CLASS cdvds $a class || $.
            DEFINITION df-dvds $a |- || = { <. x , y >. | ( ( x e. ZZ /\ y e. ZZ ) /\ E. n e. ZZ ( n x. x ) = y ) } $.
        
        ### Even and odd numbers
        
        ### The division algorithm
        
        ### Bit sequences
            $c bits $.
            $c sadd $.
            $c smul $.
            CLASS cbits $a class bits $.
            CLASS csad $a class sadd $.
            CLASS csmu $a class smul $.
            DEFINITION df-bits $a |- bits = ( n e. ZZ |-> { m e. NN0 | -. 2 || ( |_ ` ( n / ( 2 ^ m ) ) ) } ) $.
            DEFINITION df-sad $a |- sadd = ( x e. ~P NN0 , y e. ~P NN0 |-> { k e. NN0 | hadd ( k e. x , k e. y , (/) e. ( seq 0 ( ( c e. 2o , m e. NN0 |-> if ( cadd ( m e. x , m e. y , (/) e. c ) , 1o , (/) ) ) , ( n e. NN0 |-> if ( n = 0 , (/) , ( n - 1 ) ) ) ) ` k ) ) } ) $.
            DEFINITION df-smu $a |- smul = ( x e. ~P NN0 , y e. ~P NN0 |-> { k e. NN0 | k e. ( seq 0 ( ( p e. ~P NN0 , m e. NN0 |-> ( p sadd { n e. NN0 | ( m e. x /\ ( n - m ) e. y ) } ) ) , ( n e. NN0 |-> if ( n = 0 , (/) , ( n - 1 ) ) ) ) ` ( k + 1 ) ) } ) $.
        
        ### The greatest common divisor operator
            $c gcd $.
            CLASS cgcd $a class gcd $.
            DEFINITION df-gcd $a |- gcd = ( x e. ZZ , y e. ZZ |-> if ( ( x = 0 /\ y = 0 ) , 0 , sup ( { n e. ZZ | ( n || x /\ n || y ) } , RR , < ) ) ) $.
        
        ### B&eacute;zout's identity
        
        ### Algorithms
        
        ### Euclid's Algorithm
        
        ### The least common multiple
            $c lcm _lcm $.
            CLASS clcm $a class lcm $.
            CLASS clcmf $a class _lcm $.
            DEFINITION df-lcm $a |- lcm = ( x e. ZZ , y e. ZZ |-> if ( ( x = 0 \/ y = 0 ) , 0 , inf ( { n e. NN | ( x || n /\ y || n ) } , RR , < ) ) ) $.
            DEFINITION df-lcmf $a |- _lcm = ( z e. ~P ZZ |-> if ( 0 e. z , 0 , inf ( { n e. NN | A. m e. z m || n } , RR , < ) ) ) $.
        
        ### Coprimality and Euclid's lemma
        
        ### Cancellability of congruences
        
    
    ## Elementary prime number theory
        ### Elementary properties
            $c Prime $.
            CLASS cprime $a class Prime $.
            DEFINITION df-prm $a |- Prime = { p e. NN | { n e. NN | n || p } ~~ 2o } $.
        
        ### Coprimality and Euclid's lemma (cont.)
        
        ### Properties of the canonical representation of a rational
            $c numer denom $.
            CLASS cnumer $a class numer $.
            CLASS cdenom $a class denom $.
            DEFINITION df-numer $a |- numer = ( y e. QQ |-> ( 1st ` ( iota_ x e. ( ZZ X. NN ) ( ( ( 1st ` x ) gcd ( 2nd ` x ) ) = 1 /\ y = ( ( 1st ` x ) / ( 2nd ` x ) ) ) ) ) ) $.
            DEFINITION df-denom $a |- denom = ( y e. QQ |-> ( 2nd ` ( iota_ x e. ( ZZ X. NN ) ( ( ( 1st ` x ) gcd ( 2nd ` x ) ) = 1 /\ y = ( ( 1st ` x ) / ( 2nd ` x ) ) ) ) ) ) $.
        
        ### Euler's theorem
            $c odZ $.
            $c phi $.
            CLASS codz $a class odZ $.
            CLASS cphi $a class phi $.
            DEFINITION df-odz $a |- odZ = ( n e. NN |-> ( x e. { x e. ZZ | ( x gcd n ) = 1 } |-> inf ( { m e. NN | n || ( ( x ^ m ) - 1 ) } , RR , < ) ) ) $.
            DEFINITION df-phi $a |- phi = ( n e. NN |-> ( # ` { x e. ( 1 ... n ) | ( x gcd n ) = 1 } ) ) $.
        
        ### Arithmetic modulo a prime number
        
        ### Pythagorean Triples
        
        ### The prime count function
            $c pCnt $.
            CLASS cpc $a class pCnt $.
            DEFINITION df-pc $a |- pCnt = ( p e. Prime , r e. QQ |-> if ( r = 0 , +oo , ( iota z E. x e. ZZ E. y e. NN ( r = ( x / y ) /\ z = ( sup ( { n e. NN0 | ( p ^ n ) || x } , RR , < ) - sup ( { n e. NN0 | ( p ^ n ) || y } , RR , < ) ) ) ) ) ) $.
        
        ### Pocklington's theorem
        
        ### Infinite primes theorem
        
        ### Sum of prime reciprocals
        
        ### Fundamental theorem of arithmetic
        
        ### Lagrange's four-square theorem
            $c Z[i] $.
            CLASS cgz $a class Z[i] $.
            DEFINITION df-gz $a |- Z[i] = { x e. CC | ( ( Re ` x ) e. ZZ /\ ( Im ` x ) e. ZZ ) } $.
        
        ### Van der Waerden's theorem
            $c AP $.
            $c MonoAP $.
            $c PolyAP $.
            CLASS cvdwa $a class AP $.
            CLASS cvdwm $a class MonoAP $.
            CLASS cvdwp $a class PolyAP $.
            DEFINITION df-vdwap $a |- AP = ( k e. NN0 |-> ( a e. NN , d e. NN |-> ran ( m e. ( 0 ... ( k - 1 ) ) |-> ( a + ( m x. d ) ) ) ) ) $.
            DEFINITION df-vdwmc $a |- MonoAP = { <. k , f >. | E. c ( ran ( AP ` k ) i^i ~P ( `' f " { c } ) ) =/= (/) } $.
            DEFINITION df-vdwpc $a |- PolyAP = { <. <. m , k >. , f >. | E. a e. NN E. d e. ( NN ^m ( 1 ... m ) ) ( A. i e. ( 1 ... m ) ( ( a + ( d ` i ) ) ( AP ` k ) ( d ` i ) ) C_ ( `' f " { ( f ` ( a + ( d ` i ) ) ) } ) /\ ( # ` ran ( i e. ( 1 ... m ) |-> ( f ` ( a + ( d ` i ) ) ) ) ) = m ) } $.
        
        ### Ramsey's theorem
            $c Ramsey $.
            CLASS cram $a class Ramsey $.
            DEFINITION df-ram $a |- Ramsey = ( m e. NN0 , r e. _V |-> inf ( { n e. NN0 | A. s ( n <_ ( # ` s ) -> A. f e. ( dom r ^m { y e. ~P s | ( # ` y ) = m } ) E. c e. dom r E. x e. ~P s ( ( r ` c ) <_ ( # ` x ) /\ A. y e. ~P x ( ( # ` y ) = m -> ( f ` y ) = c ) ) ) } , RR* , < ) ) $.
        
        ### Primorial function
            $c #p $.
            CLASS cprmo $a class #p $.
            DEFINITION df-prmo $a |- #p = ( n e. NN0 |-> prod_ k e. ( 1 ... n ) if ( k e. Prime , k , 1 ) ) $.
        
        ### Prime gaps
        
        ### Decimal arithmetic (cont.)
        
        ### Cyclical shifts of words (cont.)
        
        ### Specific prime numbers
        
        ### Very large primes
        
    
# BASIC STRUCTURES
    ## Extensible structures
        ### Basic definitions
            #### Extensible structures as structures with components
                $c Struct $.
                CLASS cstr $a class Struct $.
                DEFINITION df-struct $a |- Struct = { <. f , x >. | ( x e. ( <_ i^i ( NN X. NN ) ) /\ Fun ( f \ { (/) } ) /\ dom f C_ ( ... ` x ) ) } $.
            
            #### Substitution of components
                $c sSet $.
                CLASS csts $a class sSet $.
                DEFINITION df-sets $a |- sSet = ( s e. _V , e e. _V |-> ( ( s |` ( _V \ dom { e } ) ) u. { e } ) ) $.
            
            #### Slots
                $c Slot $.
                CLASS cslot $a class Slot A $.
                DEFINITION df-slot $a |- Slot A = ( x e. _V |-> ( x ` A ) ) $.
            
            #### Structure component indices
                $c ndx $.
                CLASS cnx $a class ndx $.
                DEFINITION df-ndx $a |- ndx = ( _I |` NN ) $.
            
            #### Base sets
                $c Base $.
                CLASS cbs $a class Base $.
                DEFINITION df-base $a |- Base = Slot 1 $.
            
            #### Base set restrictions
                $c |`s $.
                CLASS cress $a class |`s $.
                DEFINITION df-ress $a |- |`s = ( w e. _V , x e. _V |-> if ( ( Base ` w ) C_ x , w , ( w sSet <. ( Base ` ndx ) , ( x i^i ( Base ` w ) ) >. ) ) ) $.
            
        
        ### Slot definitions
            $c +g $.
            $c .r $.
            $c *r $.
            $c Scalar $.
            $c .s $.
            $c .i $.
            $c TopSet $.
            $c le $.
            $c oc $.
            $c dist $.
            $c UnifSet $.
            $c Hom $.
            $c comp $.
            CLASS cplusg $a class +g $.
            CLASS cmulr $a class .r $.
            CLASS cstv $a class *r $.
            CLASS csca $a class Scalar $.
            CLASS cvsca $a class .s $.
            CLASS cip $a class .i $.
            CLASS cts $a class TopSet $.
            CLASS cple $a class le $.
            CLASS coc $a class oc $.
            CLASS cds $a class dist $.
            CLASS cunif $a class UnifSet $.
            CLASS chom $a class Hom $.
            CLASS cco $a class comp $.
            DEFINITION df-plusg $a |- +g = Slot 2 $.
            DEFINITION df-mulr $a |- .r = Slot 3 $.
            DEFINITION df-starv $a |- *r = Slot 4 $.
            DEFINITION df-sca $a |- Scalar = Slot 5 $.
            DEFINITION df-vsca $a |- .s = Slot 6 $.
            DEFINITION df-ip $a |- .i = Slot 8 $.
            DEFINITION df-tset $a |- TopSet = Slot 9 $.
            DEFINITION df-ple $a |- le = Slot ; 1 0 $.
            DEFINITION df-ocomp $a |- oc = Slot ; 1 1 $.
            DEFINITION df-ds $a |- dist = Slot ; 1 2 $.
            DEFINITION df-unif $a |- UnifSet = Slot ; 1 3 $.
            DEFINITION df-hom $a |- Hom = Slot ; 1 4 $.
            DEFINITION df-cco $a |- comp = Slot ; 1 5 $.
        
        ### Definition of the structure product
            $c |`t $.
            $c TopOpen $.
            CLASS crest $a class |`t $.
            CLASS ctopn $a class TopOpen $.
            DEFINITION df-rest $a |- |`t = ( j e. _V , x e. _V |-> ran ( y e. j |-> ( y i^i x ) ) ) $.
            DEFINITION df-topn $a |- TopOpen = ( w e. _V |-> ( ( TopSet ` w ) |`t ( Base ` w ) ) ) $.
            $c topGen $.
            $c Xt_ $.
            $c 0g $.
            $c gsum $.
            CLASS ctg $a class topGen $.
            CLASS cpt $a class Xt_ $.
            CLASS c0g $a class 0g $.
            CLASS cgsu $a class gsum $.
            DEFINITION df-0g $a |- 0g = ( g e. _V |-> ( iota e ( e e. ( Base ` g ) /\ A. x e. ( Base ` g ) ( ( e ( +g ` g ) x ) = x /\ ( x ( +g ` g ) e ) = x ) ) ) ) $.
            DEFINITION df-gsum $a |- gsum = ( w e. _V , f e. _V |-> [_ { x e. ( Base ` w ) | A. y e. ( Base ` w ) ( ( x ( +g ` w ) y ) = y /\ ( y ( +g ` w ) x ) = y ) } / o ]_ if ( ran f C_ o , ( 0g ` w ) , if ( dom f e. ran ... , ( iota x E. m E. n e. ( ZZ>= ` m ) ( dom f = ( m ... n ) /\ x = ( seq m ( ( +g ` w ) , f ) ` n ) ) ) , ( iota x E. g [. ( `' f " ( _V \ o ) ) / y ]. ( g : ( 1 ... ( # ` y ) ) -1-1-onto-> y /\ x = ( seq 1 ( ( +g ` w ) , ( f o. g ) ) ` ( # ` y ) ) ) ) ) ) ) $.
            DEFINITION df-topgen $a |- topGen = ( x e. _V |-> { y | y C_ U. ( x i^i ~P y ) } ) $.
            DEFINITION df-pt $a |- Xt_ = ( f e. _V |-> ( topGen ` { x | E. g ( ( g Fn dom f /\ A. y e. dom f ( g ` y ) e. ( f ` y ) /\ E. z e. Fin A. y e. ( dom f \ z ) ( g ` y ) = U. ( f ` y ) ) /\ x = X_ y e. dom f ( g ` y ) ) } ) ) $.
            $c Xs_ ^s $.
            CLASS cprds $a class Xs_ $.
            CLASS cpws $a class ^s $.
            DEFINITION df-prds $a |- Xs_ = ( s e. _V , r e. _V |-> [_ X_ x e. dom r ( Base ` ( r ` x ) ) / v ]_ [_ ( f e. v , g e. v |-> X_ x e. dom r ( ( f ` x ) ( Hom ` ( r ` x ) ) ( g ` x ) ) ) / h ]_ ( ( { <. ( Base ` ndx ) , v >. , <. ( +g ` ndx ) , ( f e. v , g e. v |-> ( x e. dom r |-> ( ( f ` x ) ( +g ` ( r ` x ) ) ( g ` x ) ) ) ) >. , <. ( .r ` ndx ) , ( f e. v , g e. v |-> ( x e. dom r |-> ( ( f ` x ) ( .r ` ( r ` x ) ) ( g ` x ) ) ) ) >. } u. { <. ( Scalar ` ndx ) , s >. , <. ( .s ` ndx ) , ( f e. ( Base ` s ) , g e. v |-> ( x e. dom r |-> ( f ( .s ` ( r ` x ) ) ( g ` x ) ) ) ) >. , <. ( .i ` ndx ) , ( f e. v , g e. v |-> ( s gsum ( x e. dom r |-> ( ( f ` x ) ( .i ` ( r ` x ) ) ( g ` x ) ) ) ) ) >. } ) u. ( { <. ( TopSet ` ndx ) , ( Xt_ ` ( TopOpen o. r ) ) >. , <. ( le ` ndx ) , { <. f , g >. | ( { f , g } C_ v /\ A. x e. dom r ( f ` x ) ( le ` ( r ` x ) ) ( g ` x ) ) } >. , <. ( dist ` ndx ) , ( f e. v , g e. v |-> sup ( ( ran ( x e. dom r |-> ( ( f ` x ) ( dist ` ( r ` x ) ) ( g ` x ) ) ) u. { 0 } ) , RR* , < ) ) >. } u. { <. ( Hom ` ndx ) , h >. , <. ( comp ` ndx ) , ( a e. ( v X. v ) , c e. v |-> ( d e. ( ( 2nd ` a ) h c ) , e e. ( h ` a ) |-> ( x e. dom r |-> ( ( d ` x ) ( <. ( ( 1st ` a ) ` x ) , ( ( 2nd ` a ) ` x ) >. ( comp ` ( r ` x ) ) ( c ` x ) ) ( e ` x ) ) ) ) ) >. } ) ) ) $.
            DEFINITION df-pws $a |- ^s = ( r e. _V , i e. _V |-> ( ( Scalar ` r ) Xs_ ( i X. { r } ) ) ) $.
        
        ### Definition of the structure quotient
            $c ordTop $.
            $c RR*s $.
            CLASS cordt $a class ordTop $.
            CLASS cxrs $a class RR*s $.
            DEFINITION df-ordt $a |- ordTop = ( r e. _V |-> ( topGen ` ( fi ` ( { dom r } u. ran ( ( x e. dom r |-> { y e. dom r | -. y r x } ) u. ( x e. dom r |-> { y e. dom r | -. x r y } ) ) ) ) ) ) $.
            DEFINITION df-xrs $a |- RR*s = ( { <. ( Base ` ndx ) , RR* >. , <. ( +g ` ndx ) , +e >. , <. ( .r ` ndx ) , *e >. } u. { <. ( TopSet ` ndx ) , ( ordTop ` <_ ) >. , <. ( le ` ndx ) , <_ >. , <. ( dist ` ndx ) , ( x e. RR* , y e. RR* |-> if ( x <_ y , ( y +e -e x ) , ( x +e -e y ) ) ) >. } ) $.
            $c "s $.
            $c /s $.
            $c qTop $.
            $c Xs. $.
            CLASS cqtop $a class qTop $.
            CLASS cimas $a class "s $.
            CLASS cqus $a class /s $.
            CLASS cxps $a class Xs. $.
            DEFINITION df-qtop $a |- qTop = ( j e. _V , f e. _V |-> { s e. ~P ( f " U. j ) | ( ( `' f " s ) i^i U. j ) e. j } ) $.
            DEFINITION df-imas $a |- "s = ( f e. _V , r e. _V |-> [_ ( Base ` r ) / v ]_ ( ( { <. ( Base ` ndx ) , ran f >. , <. ( +g ` ndx ) , U_ p e. v U_ q e. v { <. <. ( f ` p ) , ( f ` q ) >. , ( f ` ( p ( +g ` r ) q ) ) >. } >. , <. ( .r ` ndx ) , U_ p e. v U_ q e. v { <. <. ( f ` p ) , ( f ` q ) >. , ( f ` ( p ( .r ` r ) q ) ) >. } >. } u. { <. ( Scalar ` ndx ) , ( Scalar ` r ) >. , <. ( .s ` ndx ) , U_ q e. v ( p e. ( Base ` ( Scalar ` r ) ) , x e. { ( f ` q ) } |-> ( f ` ( p ( .s ` r ) q ) ) ) >. , <. ( .i ` ndx ) , U_ p e. v U_ q e. v { <. <. ( f ` p ) , ( f ` q ) >. , ( p ( .i ` r ) q ) >. } >. } ) u. { <. ( TopSet ` ndx ) , ( ( TopOpen ` r ) qTop f ) >. , <. ( le ` ndx ) , ( ( f o. ( le ` r ) ) o. `' f ) >. , <. ( dist ` ndx ) , ( x e. ran f , y e. ran f |-> inf ( U_ n e. NN ran ( g e. { h e. ( ( v X. v ) ^m ( 1 ... n ) ) | ( ( f ` ( 1st ` ( h ` 1 ) ) ) = x /\ ( f ` ( 2nd ` ( h ` n ) ) ) = y /\ A. i e. ( 1 ... ( n - 1 ) ) ( f ` ( 2nd ` ( h ` i ) ) ) = ( f ` ( 1st ` ( h ` ( i + 1 ) ) ) ) ) } |-> ( RR*s gsum ( ( dist ` r ) o. g ) ) ) , RR* , < ) ) >. } ) ) $.
            DEFINITION df-qus $a |- /s = ( r e. _V , e e. _V |-> ( ( x e. ( Base ` r ) |-> [ x ] e ) "s r ) ) $.
            DEFINITION df-xps $a |- Xs. = ( r e. _V , s e. _V |-> ( `' ( x e. ( Base ` r ) , y e. ( Base ` s ) |-> { <. (/) , x >. , <. 1o , y >. } ) "s ( ( Scalar ` r ) Xs_ { <. (/) , r >. , <. 1o , s >. } ) ) ) $.
        
    
    ## Moore spaces
        $c Moore mrCls mrInd ACS $.
        CLASS cmre $a class Moore $.
        CLASS cmrc $a class mrCls $.
        CLASS cmri $a class mrInd $.
        CLASS cacs $a class ACS $.
        DEFINITION df-mre $a |- Moore = ( x e. _V |-> { c e. ~P ~P x | ( x e. c /\ A. s e. ~P c ( s =/= (/) -> |^| s e. c ) ) } ) $.
        DEFINITION df-mrc $a |- mrCls = ( c e. U. ran Moore |-> ( x e. ~P U. c |-> |^| { s e. c | x C_ s } ) ) $.
        DEFINITION df-mri $a |- mrInd = ( c e. U. ran Moore |-> { s e. ~P U. c | A. x e. s -. x e. ( ( mrCls ` c ) ` ( s \ { x } ) ) } ) $.
        DEFINITION df-acs $a |- ACS = ( x e. _V |-> { c e. ( Moore ` x ) | E. f ( f : ~P x --> ~P x /\ A. s e. ~P x ( s e. c <-> U. ( f " ( ~P s i^i Fin ) ) C_ s ) ) } ) $.
        ### Moore closures
        
        ### Independent sets in a Moore system
        
        ### Algebraic closure systems
        
    
# BASIC CATEGORY THEORY
    ## Categories
        ### Categories
            $c Cat $.
            $c Id $.
            $c Homf $.
            $c comf $.
            CLASS ccat $a class Cat $.
            CLASS ccid $a class Id $.
            CLASS chomf $a class Homf $.
            CLASS ccomf $a class comf $.
            DEFINITION df-cat $a |- Cat = { c | [. ( Base ` c ) / b ]. [. ( Hom ` c ) / h ]. [. ( comp ` c ) / o ]. A. x e. b ( E. g e. ( x h x ) A. y e. b ( A. f e. ( y h x ) ( g ( <. y , x >. o x ) f ) = f /\ A. f e. ( x h y ) ( f ( <. x , x >. o y ) g ) = f ) /\ A. y e. b A. z e. b A. f e. ( x h y ) A. g e. ( y h z ) ( ( g ( <. x , y >. o z ) f ) e. ( x h z ) /\ A. w e. b A. k e. ( z h w ) ( ( k ( <. y , z >. o w ) g ) ( <. x , y >. o w ) f ) = ( k ( <. x , z >. o w ) ( g ( <. x , y >. o z ) f ) ) ) ) } $.
            DEFINITION df-cid $a |- Id = ( c e. Cat |-> [_ ( Base ` c ) / b ]_ [_ ( Hom ` c ) / h ]_ [_ ( comp ` c ) / o ]_ ( x e. b |-> ( iota_ g e. ( x h x ) A. y e. b ( A. f e. ( y h x ) ( g ( <. y , x >. o x ) f ) = f /\ A. f e. ( x h y ) ( f ( <. x , x >. o y ) g ) = f ) ) ) ) $.
            DEFINITION df-homf $a |- Homf = ( c e. _V |-> ( x e. ( Base ` c ) , y e. ( Base ` c ) |-> ( x ( Hom ` c ) y ) ) ) $.
            DEFINITION df-comf $a |- comf = ( c e. _V |-> ( x e. ( ( Base ` c ) X. ( Base ` c ) ) , y e. ( Base ` c ) |-> ( g e. ( ( 2nd ` x ) ( Hom ` c ) y ) , f e. ( ( Hom ` c ) ` x ) |-> ( g ( x ( comp ` c ) y ) f ) ) ) ) $.
        
        ### Opposite category
            $c oppCat $.
            CLASS coppc $a class oppCat $.
            DEFINITION df-oppc $a |- oppCat = ( f e. _V |-> ( ( f sSet <. ( Hom ` ndx ) , tpos ( Hom ` f ) >. ) sSet <. ( comp ` ndx ) , ( u e. ( ( Base ` f ) X. ( Base ` f ) ) , z e. ( Base ` f ) |-> tpos ( <. z , ( 2nd ` u ) >. ( comp ` f ) ( 1st ` u ) ) ) >. ) ) $.
        
        ### Monomorphisms and epimorphisms
            $c Mono $.
            $c Epi $.
            CLASS cmon $a class Mono $.
            CLASS cepi $a class Epi $.
            DEFINITION df-mon $a |- Mono = ( c e. Cat |-> [_ ( Base ` c ) / b ]_ [_ ( Hom ` c ) / h ]_ ( x e. b , y e. b |-> { f e. ( x h y ) | A. z e. b Fun `' ( g e. ( z h x ) |-> ( f ( <. z , x >. ( comp ` c ) y ) g ) ) } ) ) $.
            DEFINITION df-epi $a |- Epi = ( c e. Cat |-> tpos ( Mono ` ( oppCat ` c ) ) ) $.
        
        ### Sections, inverses, isomorphisms
            $c Sect $.
            $c Inv $.
            $c Iso $.
            CLASS csect $a class Sect $.
            CLASS cinv $a class Inv $.
            CLASS ciso $a class Iso $.
            DEFINITION df-sect $a |- Sect = ( c e. Cat |-> ( x e. ( Base ` c ) , y e. ( Base ` c ) |-> { <. f , g >. | [. ( Hom ` c ) / h ]. ( ( f e. ( x h y ) /\ g e. ( y h x ) ) /\ ( g ( <. x , y >. ( comp ` c ) x ) f ) = ( ( Id ` c ) ` x ) ) } ) ) $.
            DEFINITION df-inv $a |- Inv = ( c e. Cat |-> ( x e. ( Base ` c ) , y e. ( Base ` c ) |-> ( ( x ( Sect ` c ) y ) i^i `' ( y ( Sect ` c ) x ) ) ) ) $.
            DEFINITION df-iso $a |- Iso = ( c e. Cat |-> ( ( x e. _V |-> dom x ) o. ( Inv ` c ) ) ) $.
        
        ### Isomorphic objects
            $c ~=c $.
            CLASS ccic $a class ~=c $.
            DEFINITION df-cic $a |- ~=c = ( c e. Cat |-> ( ( Iso ` c ) supp (/) ) ) $.
        
        ### Subcategories
            $c C_cat $.
            $c |`cat $.
            $c Subcat $.
            CLASS cssc $a class C_cat $.
            CLASS cresc $a class |`cat $.
            CLASS csubc $a class Subcat $.
            DEFINITION df-ssc $a |- C_cat = { <. h , j >. | E. t ( j Fn ( t X. t ) /\ E. s e. ~P t h e. X_ x e. ( s X. s ) ~P ( j ` x ) ) } $.
            DEFINITION df-resc $a |- |`cat = ( c e. _V , h e. _V |-> ( ( c |`s dom dom h ) sSet <. ( Hom ` ndx ) , h >. ) ) $.
            DEFINITION df-subc $a |- Subcat = ( c e. Cat |-> { h | ( h C_cat ( Homf ` c ) /\ [. dom dom h / s ]. A. x e. s ( ( ( Id ` c ) ` x ) e. ( x h x ) /\ A. y e. s A. z e. s A. f e. ( x h y ) A. g e. ( y h z ) ( g ( <. x , y >. ( comp ` c ) z ) f ) e. ( x h z ) ) ) } ) $.
        
        ### Functors
            $c Func $.
            $c idFunc $.
            $c o.func $.
            $c |`f $.
            CLASS cfunc $a class Func $.
            CLASS cidfu $a class idFunc $.
            CLASS ccofu $a class o.func $.
            CLASS cresf $a class |`f $.
            DEFINITION df-func $a |- Func = ( t e. Cat , u e. Cat |-> { <. f , g >. | [. ( Base ` t ) / b ]. ( f : b --> ( Base ` u ) /\ g e. X_ z e. ( b X. b ) ( ( ( f ` ( 1st ` z ) ) ( Hom ` u ) ( f ` ( 2nd ` z ) ) ) ^m ( ( Hom ` t ) ` z ) ) /\ A. x e. b ( ( ( x g x ) ` ( ( Id ` t ) ` x ) ) = ( ( Id ` u ) ` ( f ` x ) ) /\ A. y e. b A. z e. b A. m e. ( x ( Hom ` t ) y ) A. n e. ( y ( Hom ` t ) z ) ( ( x g z ) ` ( n ( <. x , y >. ( comp ` t ) z ) m ) ) = ( ( ( y g z ) ` n ) ( <. ( f ` x ) , ( f ` y ) >. ( comp ` u ) ( f ` z ) ) ( ( x g y ) ` m ) ) ) ) } ) $.
            DEFINITION df-idfu $a |- idFunc = ( t e. Cat |-> [_ ( Base ` t ) / b ]_ <. ( _I |` b ) , ( z e. ( b X. b ) |-> ( _I |` ( ( Hom ` t ) ` z ) ) ) >. ) $.
            DEFINITION df-cofu $a |- o.func = ( g e. _V , f e. _V |-> <. ( ( 1st ` g ) o. ( 1st ` f ) ) , ( x e. dom dom ( 2nd ` f ) , y e. dom dom ( 2nd ` f ) |-> ( ( ( ( 1st ` f ) ` x ) ( 2nd ` g ) ( ( 1st ` f ) ` y ) ) o. ( x ( 2nd ` f ) y ) ) ) >. ) $.
            DEFINITION df-resf $a |- |`f = ( f e. _V , h e. _V |-> <. ( ( 1st ` f ) |` dom dom h ) , ( x e. dom h |-> ( ( ( 2nd ` f ) ` x ) |` ( h ` x ) ) ) >. ) $.
        
        ### Full & faithful functors
            $c Full $.
            $c Faith $.
            CLASS cful $a class Full $.
            CLASS cfth $a class Faith $.
            DEFINITION df-full $a |- Full = ( c e. Cat , d e. Cat |-> { <. f , g >. | ( f ( c Func d ) g /\ A. x e. ( Base ` c ) A. y e. ( Base ` c ) ran ( x g y ) = ( ( f ` x ) ( Hom ` d ) ( f ` y ) ) ) } ) $.
            DEFINITION df-fth $a |- Faith = ( c e. Cat , d e. Cat |-> { <. f , g >. | ( f ( c Func d ) g /\ A. x e. ( Base ` c ) A. y e. ( Base ` c ) Fun `' ( x g y ) ) } ) $.
        
        ### Natural transformations and the functor category
            $c Nat $.
            $c FuncCat $.
            CLASS cnat $a class Nat $.
            CLASS cfuc $a class FuncCat $.
            DEFINITION df-nat $a |- Nat = ( t e. Cat , u e. Cat |-> ( f e. ( t Func u ) , g e. ( t Func u ) |-> [_ ( 1st ` f ) / r ]_ [_ ( 1st ` g ) / s ]_ { a e. X_ x e. ( Base ` t ) ( ( r ` x ) ( Hom ` u ) ( s ` x ) ) | A. x e. ( Base ` t ) A. y e. ( Base ` t ) A. h e. ( x ( Hom ` t ) y ) ( ( a ` y ) ( <. ( r ` x ) , ( r ` y ) >. ( comp ` u ) ( s ` y ) ) ( ( x ( 2nd ` f ) y ) ` h ) ) = ( ( ( x ( 2nd ` g ) y ) ` h ) ( <. ( r ` x ) , ( s ` x ) >. ( comp ` u ) ( s ` y ) ) ( a ` x ) ) } ) ) $.
            DEFINITION df-fuc $a |- FuncCat = ( t e. Cat , u e. Cat |-> { <. ( Base ` ndx ) , ( t Func u ) >. , <. ( Hom ` ndx ) , ( t Nat u ) >. , <. ( comp ` ndx ) , ( v e. ( ( t Func u ) X. ( t Func u ) ) , h e. ( t Func u ) |-> [_ ( 1st ` v ) / f ]_ [_ ( 2nd ` v ) / g ]_ ( b e. ( g ( t Nat u ) h ) , a e. ( f ( t Nat u ) g ) |-> ( x e. ( Base ` t ) |-> ( ( b ` x ) ( <. ( ( 1st ` f ) ` x ) , ( ( 1st ` g ) ` x ) >. ( comp ` u ) ( ( 1st ` h ) ` x ) ) ( a ` x ) ) ) ) ) >. } ) $.
        
        ### Initial, terminal and zero objects of a category
            $c InitO $.
            $c TermO $.
            $c ZeroO $.
            CLASS cinito $a class InitO $.
            CLASS ctermo $a class TermO $.
            CLASS czeroo $a class ZeroO $.
            DEFINITION df-inito $a |- InitO = ( c e. Cat |-> { a e. ( Base ` c ) | A. b e. ( Base ` c ) E! h h e. ( a ( Hom ` c ) b ) } ) $.
            DEFINITION df-termo $a |- TermO = ( c e. Cat |-> { a e. ( Base ` c ) | A. b e. ( Base ` c ) E! h h e. ( b ( Hom ` c ) a ) } ) $.
            DEFINITION df-zeroo $a |- ZeroO = ( c e. Cat |-> ( ( InitO ` c ) i^i ( TermO ` c ) ) ) $.
        
    
    ## Arrows (disjointified hom-sets)
        $c domA $.
        $c codA $.
        $c Arrow $.
        $c HomA $.
        CLASS cdoma $a class domA $.
        CLASS ccoda $a class codA $.
        CLASS carw $a class Arrow $.
        CLASS choma $a class HomA $.
        DEFINITION df-doma $a |- domA = ( 1st o. 1st ) $.
        DEFINITION df-coda $a |- codA = ( 2nd o. 1st ) $.
        DEFINITION df-homa $a |- HomA = ( c e. Cat |-> ( x e. ( ( Base ` c ) X. ( Base ` c ) ) |-> ( { x } X. ( ( Hom ` c ) ` x ) ) ) ) $.
        DEFINITION df-arw $a |- Arrow = ( c e. Cat |-> U. ran ( HomA ` c ) ) $.
        ### Identity and composition for arrows
            $c IdA $.
            $c compA $.
            CLASS cida $a class IdA $.
            CLASS ccoa $a class compA $.
            DEFINITION df-ida $a |- IdA = ( c e. Cat |-> ( x e. ( Base ` c ) |-> <. x , x , ( ( Id ` c ) ` x ) >. ) ) $.
            DEFINITION df-coa $a |- compA = ( c e. Cat |-> ( g e. ( Arrow ` c ) , f e. { h e. ( Arrow ` c ) | ( codA ` h ) = ( domA ` g ) } |-> <. ( domA ` f ) , ( codA ` g ) , ( ( 2nd ` g ) ( <. ( domA ` f ) , ( domA ` g ) >. ( comp ` c ) ( codA ` g ) ) ( 2nd ` f ) ) >. ) ) $.
        
    
    ## Examples of categories
        ### The category of sets
            $c SetCat $.
            CLASS csetc $a class SetCat $.
            DEFINITION df-setc $a |- SetCat = ( u e. _V |-> { <. ( Base ` ndx ) , u >. , <. ( Hom ` ndx ) , ( x e. u , y e. u |-> ( y ^m x ) ) >. , <. ( comp ` ndx ) , ( v e. ( u X. u ) , z e. u |-> ( g e. ( z ^m ( 2nd ` v ) ) , f e. ( ( 2nd ` v ) ^m ( 1st ` v ) ) |-> ( g o. f ) ) ) >. } ) $.
        
        ### The category of categories
            $c CatCat $.
            CLASS ccatc $a class CatCat $.
            DEFINITION df-catc $a |- CatCat = ( u e. _V |-> [_ ( u i^i Cat ) / b ]_ { <. ( Base ` ndx ) , b >. , <. ( Hom ` ndx ) , ( x e. b , y e. b |-> ( x Func y ) ) >. , <. ( comp ` ndx ) , ( v e. ( b X. b ) , z e. b |-> ( g e. ( ( 2nd ` v ) Func z ) , f e. ( Func ` v ) |-> ( g o.func f ) ) ) >. } ) $.
        
        ### The category of extensible structures
            $c ExtStrCat $.
            CLASS cestrc $a class ExtStrCat $.
            DEFINITION df-estrc $a |- ExtStrCat = ( u e. _V |-> { <. ( Base ` ndx ) , u >. , <. ( Hom ` ndx ) , ( x e. u , y e. u |-> ( ( Base ` y ) ^m ( Base ` x ) ) ) >. , <. ( comp ` ndx ) , ( v e. ( u X. u ) , z e. u |-> ( g e. ( ( Base ` z ) ^m ( Base ` ( 2nd ` v ) ) ) , f e. ( ( Base ` ( 2nd ` v ) ) ^m ( Base ` ( 1st ` v ) ) ) |-> ( g o. f ) ) ) >. } ) $.
        
    
    ## Categorical constructions
        ### Product of categories
            $c Xc. $.
            $c 1stF $.
            $c 2ndF $.
            $c pairF $.
            CLASS cxpc $a class Xc. $.
            CLASS c1stf $a class 1stF $.
            CLASS c2ndf $a class 2ndF $.
            CLASS cprf $a class pairF $.
            DEFINITION df-xpc $a |- Xc. = ( r e. _V , s e. _V |-> [_ ( ( Base ` r ) X. ( Base ` s ) ) / b ]_ [_ ( u e. b , v e. b |-> ( ( ( 1st ` u ) ( Hom ` r ) ( 1st ` v ) ) X. ( ( 2nd ` u ) ( Hom ` s ) ( 2nd ` v ) ) ) ) / h ]_ { <. ( Base ` ndx ) , b >. , <. ( Hom ` ndx ) , h >. , <. ( comp ` ndx ) , ( x e. ( b X. b ) , y e. b |-> ( g e. ( ( 2nd ` x ) h y ) , f e. ( h ` x ) |-> <. ( ( 1st ` g ) ( <. ( 1st ` ( 1st ` x ) ) , ( 1st ` ( 2nd ` x ) ) >. ( comp ` r ) ( 1st ` y ) ) ( 1st ` f ) ) , ( ( 2nd ` g ) ( <. ( 2nd ` ( 1st ` x ) ) , ( 2nd ` ( 2nd ` x ) ) >. ( comp ` s ) ( 2nd ` y ) ) ( 2nd ` f ) ) >. ) ) >. } ) $.
            DEFINITION df-1stf $a |- 1stF = ( r e. Cat , s e. Cat |-> [_ ( ( Base ` r ) X. ( Base ` s ) ) / b ]_ <. ( 1st |` b ) , ( x e. b , y e. b |-> ( 1st |` ( x ( Hom ` ( r Xc. s ) ) y ) ) ) >. ) $.
            DEFINITION df-2ndf $a |- 2ndF = ( r e. Cat , s e. Cat |-> [_ ( ( Base ` r ) X. ( Base ` s ) ) / b ]_ <. ( 2nd |` b ) , ( x e. b , y e. b |-> ( 2nd |` ( x ( Hom ` ( r Xc. s ) ) y ) ) ) >. ) $.
            DEFINITION df-prf $a |- pairF = ( f e. _V , g e. _V |-> [_ dom ( 1st ` f ) / b ]_ <. ( x e. b |-> <. ( ( 1st ` f ) ` x ) , ( ( 1st ` g ) ` x ) >. ) , ( x e. b , y e. b |-> ( h e. dom ( x ( 2nd ` f ) y ) |-> <. ( ( x ( 2nd ` f ) y ) ` h ) , ( ( x ( 2nd ` g ) y ) ` h ) >. ) ) >. ) $.
        
        ### Functor evaluation
            $c evalF $.
            $c curryF $.
            $c uncurryF $.
            $c DiagFunc $.
            CLASS cevlf $a class evalF $.
            CLASS ccurf $a class curryF $.
            CLASS cuncf $a class uncurryF $.
            CLASS cdiag $a class DiagFunc $.
            DEFINITION df-evlf $a |- evalF = ( c e. Cat , d e. Cat |-> <. ( f e. ( c Func d ) , x e. ( Base ` c ) |-> ( ( 1st ` f ) ` x ) ) , ( x e. ( ( c Func d ) X. ( Base ` c ) ) , y e. ( ( c Func d ) X. ( Base ` c ) ) |-> [_ ( 1st ` x ) / m ]_ [_ ( 1st ` y ) / n ]_ ( a e. ( m ( c Nat d ) n ) , g e. ( ( 2nd ` x ) ( Hom ` c ) ( 2nd ` y ) ) |-> ( ( a ` ( 2nd ` y ) ) ( <. ( ( 1st ` m ) ` ( 2nd ` x ) ) , ( ( 1st ` m ) ` ( 2nd ` y ) ) >. ( comp ` d ) ( ( 1st ` n ) ` ( 2nd ` y ) ) ) ( ( ( 2nd ` x ) ( 2nd ` m ) ( 2nd ` y ) ) ` g ) ) ) ) >. ) $.
            DEFINITION df-curf $a |- curryF = ( e e. _V , f e. _V |-> [_ ( 1st ` e ) / c ]_ [_ ( 2nd ` e ) / d ]_ <. ( x e. ( Base ` c ) |-> <. ( y e. ( Base ` d ) |-> ( x ( 1st ` f ) y ) ) , ( y e. ( Base ` d ) , z e. ( Base ` d ) |-> ( g e. ( y ( Hom ` d ) z ) |-> ( ( ( Id ` c ) ` x ) ( <. x , y >. ( 2nd ` f ) <. x , z >. ) g ) ) ) >. ) , ( x e. ( Base ` c ) , y e. ( Base ` c ) |-> ( g e. ( x ( Hom ` c ) y ) |-> ( z e. ( Base ` d ) |-> ( g ( <. x , z >. ( 2nd ` f ) <. y , z >. ) ( ( Id ` d ) ` z ) ) ) ) ) >. ) $.
            DEFINITION df-uncf $a |- uncurryF = ( c e. _V , f e. _V |-> ( ( ( c ` 1 ) evalF ( c ` 2 ) ) o.func ( ( f o.func ( ( c ` 0 ) 1stF ( c ` 1 ) ) ) pairF ( ( c ` 0 ) 2ndF ( c ` 1 ) ) ) ) ) $.
            DEFINITION df-diag $a |- DiagFunc = ( c e. Cat , d e. Cat |-> ( <. c , d >. curryF ( c 1stF d ) ) ) $.
        
        ### Hom functor
            $c HomF $.
            $c Yon $.
            CLASS chof $a class HomF $.
            CLASS cyon $a class Yon $.
            DEFINITION df-hof $a |- HomF = ( c e. Cat |-> <. ( Homf ` c ) , [_ ( Base ` c ) / b ]_ ( x e. ( b X. b ) , y e. ( b X. b ) |-> ( f e. ( ( 1st ` y ) ( Hom ` c ) ( 1st ` x ) ) , g e. ( ( 2nd ` x ) ( Hom ` c ) ( 2nd ` y ) ) |-> ( h e. ( ( Hom ` c ) ` x ) |-> ( ( g ( x ( comp ` c ) ( 2nd ` y ) ) h ) ( <. ( 1st ` y ) , ( 1st ` x ) >. ( comp ` c ) ( 2nd ` y ) ) f ) ) ) ) >. ) $.
            DEFINITION df-yon $a |- Yon = ( c e. Cat |-> ( <. c , ( oppCat ` c ) >. curryF ( HomF ` ( oppCat ` c ) ) ) ) $.
        
    
# BASIC ORDER THEORY
    ## Dual of an order structure
        $c ODual $.
        CLASS codu $a class ODual $.
        DEFINITION df-odu $a |- ODual = ( w e. _V |-> ( w sSet <. ( le ` ndx ) , `' ( le ` w ) >. ) ) $.
    
    ## Preordered sets and directed sets
        $c Proset Dirset $.
        CLASS cproset $a class Proset $.
        CLASS cdrs $a class Dirset $.
        DEFINITION df-proset $a |- Proset = { f | [. ( Base ` f ) / b ]. [. ( le ` f ) / r ]. A. x e. b A. y e. b A. z e. b ( x r x /\ ( ( x r y /\ y r z ) -> x r z ) ) } $.
        DEFINITION df-drs $a |- Dirset = { f e. Proset | [. ( Base ` f ) / b ]. [. ( le ` f ) / r ]. ( b =/= (/) /\ A. x e. b A. y e. b E. z e. b ( x r z /\ y r z ) ) } $.
    
    ## Partially ordered sets (posets)
        $c Poset $.
        $c lt $.
        $c lub $.
        $c glb $.
        $c join $.
        $c meet $.
        CLASS cpo $a class Poset $.
        CLASS cplt $a class lt $.
        CLASS club $a class lub $.
        CLASS cglb $a class glb $.
        CLASS cjn $a class join $.
        CLASS cmee $a class meet $.
        DEFINITION df-poset $a |- Poset = { f | E. b E. r ( b = ( Base ` f ) /\ r = ( le ` f ) /\ A. x e. b A. y e. b A. z e. b ( x r x /\ ( ( x r y /\ y r x ) -> x = y ) /\ ( ( x r y /\ y r z ) -> x r z ) ) ) } $.
        DEFINITION df-plt $a |- lt = ( p e. _V |-> ( ( le ` p ) \ _I ) ) $.
        DEFINITION df-lub $a |- lub = ( p e. _V |-> ( ( s e. ~P ( Base ` p ) |-> ( iota_ x e. ( Base ` p ) ( A. y e. s y ( le ` p ) x /\ A. z e. ( Base ` p ) ( A. y e. s y ( le ` p ) z -> x ( le ` p ) z ) ) ) ) |` { s | E! x e. ( Base ` p ) ( A. y e. s y ( le ` p ) x /\ A. z e. ( Base ` p ) ( A. y e. s y ( le ` p ) z -> x ( le ` p ) z ) ) } ) ) $.
        DEFINITION df-glb $a |- glb = ( p e. _V |-> ( ( s e. ~P ( Base ` p ) |-> ( iota_ x e. ( Base ` p ) ( A. y e. s x ( le ` p ) y /\ A. z e. ( Base ` p ) ( A. y e. s z ( le ` p ) y -> z ( le ` p ) x ) ) ) ) |` { s | E! x e. ( Base ` p ) ( A. y e. s x ( le ` p ) y /\ A. z e. ( Base ` p ) ( A. y e. s z ( le ` p ) y -> z ( le ` p ) x ) ) } ) ) $.
        DEFINITION df-join $a |- join = ( p e. _V |-> { <. <. x , y >. , z >. | { x , y } ( lub ` p ) z } ) $.
        DEFINITION df-meet $a |- meet = ( p e. _V |-> { <. <. x , y >. , z >. | { x , y } ( glb ` p ) z } ) $.
    
    ## Totally ordered sets (tosets)
        $c Toset $.
        CLASS ctos $a class Toset $.
        DEFINITION df-toset $a |- Toset = { f e. Poset | [. ( Base ` f ) / b ]. [. ( le ` f ) / r ]. A. x e. b A. y e. b ( x r y \/ y r x ) } $.
        $c 1. $.
        $c 0. $.
        $c Lat $.
        CLASS cp0 $a class 0. $.
        CLASS cp1 $a class 1. $.
        DEFINITION df-p0 $a |- 0. = ( p e. _V |-> ( ( glb ` p ) ` ( Base ` p ) ) ) $.
        DEFINITION df-p1 $a |- 1. = ( p e. _V |-> ( ( lub ` p ) ` ( Base ` p ) ) ) $.
    
    ## Lattices
        ### Lattices
            CLASS clat $a class Lat $.
            DEFINITION df-lat $a |- Lat = { p e. Poset | ( dom ( join ` p ) = ( ( Base ` p ) X. ( Base ` p ) ) /\ dom ( meet ` p ) = ( ( Base ` p ) X. ( Base ` p ) ) ) } $.
        
        ### Complete lattices
            $c CLat $.
            CLASS ccla $a class CLat $.
            DEFINITION df-clat $a |- CLat = { p e. Poset | ( dom ( lub ` p ) = ~P ( Base ` p ) /\ dom ( glb ` p ) = ~P ( Base ` p ) ) } $.
        
        ### Distributive lattices
            $c DLat $.
            CLASS cdlat $a class DLat $.
            DEFINITION df-dlat $a |- DLat = { k e. Lat | [. ( Base ` k ) / b ]. [. ( join ` k ) / j ]. [. ( meet ` k ) / m ]. A. x e. b A. y e. b A. z e. b ( x m ( y j z ) ) = ( ( x m y ) j ( x m z ) ) } $.
        
        ### Subset order structures
            $c toInc $.
            CLASS cipo $a class toInc $.
            DEFINITION df-ipo $a |- toInc = ( f e. _V |-> [_ { <. x , y >. | ( { x , y } C_ f /\ x C_ y ) } / o ]_ ( { <. ( Base ` ndx ) , f >. , <. ( TopSet ` ndx ) , ( ordTop ` o ) >. } u. { <. ( le ` ndx ) , o >. , <. ( oc ` ndx ) , ( x e. f |-> U. { y e. f | ( y i^i x ) = (/) } ) >. } ) ) $.
        
    
    ## Posets, directed sets, and lattices as relations
        ### Posets and lattices as relations
            $c PosetRel $.
            $c TosetRel $.
            CLASS cps $a class PosetRel $.
            CLASS ctsr $a class TosetRel $.
            DEFINITION df-ps $a |- PosetRel = { r | ( Rel r /\ ( r o. r ) C_ r /\ ( r i^i `' r ) = ( _I |` U. U. r ) ) } $.
            DEFINITION df-tsr $a |- TosetRel = { r e. PosetRel | ( dom r X. dom r ) C_ ( r u. `' r ) } $.
        
        ### Directed sets, nets
            $c DirRel $.
            CLASS cdir $a class DirRel $.
            $c tail $.
            CLASS ctail $a class tail $.
            DEFINITION df-dir $a |- DirRel = { r | ( ( Rel r /\ ( _I |` U. U. r ) C_ r ) /\ ( ( r o. r ) C_ r /\ ( U. U. r X. U. U. r ) C_ ( `' r o. r ) ) ) } $.
            DEFINITION df-tail $a |- tail = ( r e. DirRel |-> ( x e. U. U. r |-> ( r " { x } ) ) ) $.
        
    
# BASIC ALGEBRAIC STRUCTURES
    ## Monoids
        ### Magmas
            $c +f $.
            $c Mgm $.
            CLASS cplusf $a class +f $.
            CLASS cmgm $a class Mgm $.
            DEFINITION df-plusf $a |- +f = ( g e. _V |-> ( x e. ( Base ` g ) , y e. ( Base ` g ) |-> ( x ( +g ` g ) y ) ) ) $.
            DEFINITION df-mgm $a |- Mgm = { g | [. ( Base ` g ) / b ]. [. ( +g ` g ) / o ]. A. x e. b A. y e. b ( x o y ) e. b } $.
        
        ### Identity elements
        
        ### Iterated sums in a magma
        
        ### Semigroups
            $c Smgrp $.
            CLASS csgrp $a class Smgrp $.
            DEFINITION df-sgrp $a |- Smgrp = { g e. Mgm | [. ( Base ` g ) / b ]. [. ( +g ` g ) / o ]. A. x e. b A. y e. b A. z e. b ( ( x o y ) o z ) = ( x o ( y o z ) ) } $.
        
        ### Definition and basic properties of monoids
            $c Mnd $.
            CLASS cmnd $a class Mnd $.
            DEFINITION df-mnd $a |- Mnd = { g e. Smgrp | [. ( Base ` g ) / b ]. [. ( +g ` g ) / p ]. E. e e. b A. x e. b ( ( e p x ) = x /\ ( x p e ) = x ) } $.
        
        ### Monoid homomorphisms and submonoids
            $c MndHom $.
            $c SubMnd $.
            CLASS cmhm $a class MndHom $.
            CLASS csubmnd $a class SubMnd $.
            DEFINITION df-mhm $a |- MndHom = ( s e. Mnd , t e. Mnd |-> { f e. ( ( Base ` t ) ^m ( Base ` s ) ) | ( A. x e. ( Base ` s ) A. y e. ( Base ` s ) ( f ` ( x ( +g ` s ) y ) ) = ( ( f ` x ) ( +g ` t ) ( f ` y ) ) /\ ( f ` ( 0g ` s ) ) = ( 0g ` t ) ) } ) $.
            DEFINITION df-submnd $a |- SubMnd = ( s e. Mnd |-> { t e. ~P ( Base ` s ) | ( ( 0g ` s ) e. t /\ A. x e. t A. y e. t ( x ( +g ` s ) y ) e. t ) } ) $.
        
        ### Iterated sums in a monoid
        
        ### Free monoids
            $c freeMnd $.
            $c varFMnd $.
            CLASS cfrmd $a class freeMnd $.
            CLASS cvrmd $a class varFMnd $.
            DEFINITION df-frmd $a |- freeMnd = ( i e. _V |-> { <. ( Base ` ndx ) , Word i >. , <. ( +g ` ndx ) , ( ++ |` ( Word i X. Word i ) ) >. } ) $.
            DEFINITION df-vrmd $a |- varFMnd = ( i e. _V |-> ( j e. i |-> <" j "> ) ) $.
            #### Monoid of endofunctions
                $c EndoFMnd $.
                CLASS cefmnd $a class EndoFMnd $.
                DEFINITION df-efmnd $a |- EndoFMnd = ( x e. _V |-> [_ ( x ^m x ) / b ]_ { <. ( Base ` ndx ) , b >. , <. ( +g ` ndx ) , ( f e. b , g e. b |-> ( f o. g ) ) >. , <. ( TopSet ` ndx ) , ( Xt_ ` ( x X. { ~P x } ) ) >. } ) $.
            
        
        ### Examples and counterexamples for magmas, semigroups and monoids
        
    
    ## Groups
        ### Definition and basic properties
            $c Grp $.
            $c invg $.
            $c -g $.
            CLASS cgrp $a class Grp $.
            CLASS cminusg $a class invg $.
            CLASS csg $a class -g $.
            DEFINITION df-grp $a |- Grp = { g e. Mnd | A. a e. ( Base ` g ) E. m e. ( Base ` g ) ( m ( +g ` g ) a ) = ( 0g ` g ) } $.
            DEFINITION df-minusg $a |- invg = ( g e. _V |-> ( x e. ( Base ` g ) |-> ( iota_ w e. ( Base ` g ) ( w ( +g ` g ) x ) = ( 0g ` g ) ) ) ) $.
            DEFINITION df-sbg $a |- -g = ( g e. _V |-> ( x e. ( Base ` g ) , y e. ( Base ` g ) |-> ( x ( +g ` g ) ( ( invg ` g ) ` y ) ) ) ) $.
        
        ### Group multiple operation
            $c .g $.
            CLASS cmg $a class .g $.
            DEFINITION df-mulg $a |- .g = ( g e. _V |-> ( n e. ZZ , x e. ( Base ` g ) |-> if ( n = 0 , ( 0g ` g ) , [_ seq 1 ( ( +g ` g ) , ( NN X. { x } ) ) / s ]_ if ( 0 < n , ( s ` n ) , ( ( invg ` g ) ` ( s ` -u n ) ) ) ) ) ) $.
        
        ### Subgroups and Quotient groups
            $c ~QG $.
            $c SubGrp $.
            $c NrmSGrp $.
            CLASS csubg $a class SubGrp $.
            CLASS cnsg $a class NrmSGrp $.
            CLASS cqg $a class ~QG $.
            DEFINITION df-subg $a |- SubGrp = ( w e. Grp |-> { s e. ~P ( Base ` w ) | ( w |`s s ) e. Grp } ) $.
            DEFINITION df-nsg $a |- NrmSGrp = ( w e. Grp |-> { s e. ( SubGrp ` w ) | [. ( Base ` w ) / b ]. [. ( +g ` w ) / p ]. A. x e. b A. y e. b ( ( x p y ) e. s <-> ( y p x ) e. s ) } ) $.
            DEFINITION df-eqg $a |- ~QG = ( r e. _V , i e. _V |-> { <. x , y >. | ( { x , y } C_ ( Base ` r ) /\ ( ( ( invg ` r ) ` x ) ( +g ` r ) y ) e. i ) } ) $.
        
        ### Cyclic monoids and groups
        
        ### Elementary theory of group homomorphisms
            $c GrpHom $.
            CLASS cghm $a class GrpHom $.
            DEFINITION df-ghm $a |- GrpHom = ( s e. Grp , t e. Grp |-> { g | [. ( Base ` s ) / w ]. ( g : w --> ( Base ` t ) /\ A. x e. w A. y e. w ( g ` ( x ( +g ` s ) y ) ) = ( ( g ` x ) ( +g ` t ) ( g ` y ) ) ) } ) $.
        
        ### Isomorphisms of groups
            $c GrpIso $.
            $c ~=g $.
            CLASS cgim $a class GrpIso $.
            CLASS cgic $a class ~=g $.
            DEFINITION df-gim $a |- GrpIso = ( s e. Grp , t e. Grp |-> { g e. ( s GrpHom t ) | g : ( Base ` s ) -1-1-onto-> ( Base ` t ) } ) $.
            DEFINITION df-gic $a |- ~=g = ( `' GrpIso " ( _V \ 1o ) ) $.
        
        ### Group actions
            $c GrpAct $.
            CLASS cga $a class GrpAct $.
            DEFINITION df-ga $a |- GrpAct = ( g e. Grp , s e. _V |-> [_ ( Base ` g ) / b ]_ { m e. ( s ^m ( b X. s ) ) | A. x e. s ( ( ( 0g ` g ) m x ) = x /\ A. y e. b A. z e. b ( ( y ( +g ` g ) z ) m x ) = ( y m ( z m x ) ) ) } ) $.
        
        ### Centralizers and centers
            $c Cntr $.
            $c Cntz $.
            CLASS ccntz $a class Cntz $.
            CLASS ccntr $a class Cntr $.
            DEFINITION df-cntz $a |- Cntz = ( m e. _V |-> ( s e. ~P ( Base ` m ) |-> { x e. ( Base ` m ) | A. y e. s ( x ( +g ` m ) y ) = ( y ( +g ` m ) x ) } ) ) $.
            DEFINITION df-cntr $a |- Cntr = ( m e. _V |-> ( ( Cntz ` m ) ` ( Base ` m ) ) ) $.
        
        ### The opposite group
            $c oppG $.
            CLASS coppg $a class oppG $.
            DEFINITION df-oppg $a |- oppG = ( w e. _V |-> ( w sSet <. ( +g ` ndx ) , tpos ( +g ` w ) >. ) ) $.
        
        ### Symmetric groups
            #### Definition and basic properties
                $c SymGrp $.
                CLASS csymg $a class SymGrp $.
                DEFINITION df-symg $a |- SymGrp = ( x e. _V |-> ( ( EndoFMnd ` x ) |`s { h | h : x -1-1-onto-> x } ) ) $.
            
            #### Cayley's theorem
            
            #### Permutations fixing one element
            
            #### Transpositions in the symmetric group
                $c pmTrsp $.
                CLASS cpmtr $a class pmTrsp $.
                DEFINITION df-pmtr $a |- pmTrsp = ( d e. _V |-> ( p e. { y e. ~P d | y ~~ 2o } |-> ( z e. d |-> if ( z e. p , U. ( p \ { z } ) , z ) ) ) ) $.
            
            #### The sign of a permutation
                $c pmSgn pmEven $.
                CLASS cpsgn $a class pmSgn $.
                CLASS cevpm $a class pmEven $.
                DEFINITION df-psgn $a |- pmSgn = ( d e. _V |-> ( x e. { p e. ( Base ` ( SymGrp ` d ) ) | dom ( p \ _I ) e. Fin } |-> ( iota s E. w e. Word ran ( pmTrsp ` d ) ( x = ( ( SymGrp ` d ) gsum w ) /\ s = ( -u 1 ^ ( # ` w ) ) ) ) ) ) $.
                DEFINITION df-evpm $a |- pmEven = ( d e. _V |-> ( `' ( pmSgn ` d ) " { 1 } ) ) $.
            
        
        ### p-Groups and Sylow groups; Sylow's theorems
            $c od $.
            $c gEx $.
            $c pGrp $.
            $c pSyl $.
            CLASS cod $a class od $.
            CLASS cgex $a class gEx $.
            CLASS cpgp $a class pGrp $.
            CLASS cslw $a class pSyl $.
            DEFINITION df-od $a |- od = ( g e. _V |-> ( x e. ( Base ` g ) |-> [_ { n e. NN | ( n ( .g ` g ) x ) = ( 0g ` g ) } / i ]_ if ( i = (/) , 0 , inf ( i , RR , < ) ) ) ) $.
            DEFINITION df-gex $a |- gEx = ( g e. _V |-> [_ { n e. NN | A. x e. ( Base ` g ) ( n ( .g ` g ) x ) = ( 0g ` g ) } / i ]_ if ( i = (/) , 0 , inf ( i , RR , < ) ) ) $.
            DEFINITION df-pgp $a |- pGrp = { <. p , g >. | ( ( p e. Prime /\ g e. Grp ) /\ A. x e. ( Base ` g ) E. n e. NN0 ( ( od ` g ) ` x ) = ( p ^ n ) ) } $.
            DEFINITION df-slw $a |- pSyl = ( p e. Prime , g e. Grp |-> { h e. ( SubGrp ` g ) | A. k e. ( SubGrp ` g ) ( ( h C_ k /\ p pGrp ( g |`s k ) ) <-> h = k ) } ) $.
        
        ### Direct products
            $c LSSum $.
            $c proj1 $.
            CLASS clsm $a class LSSum $.
            CLASS cpj1 $a class proj1 $.
            DEFINITION df-lsm $a |- LSSum = ( w e. _V |-> ( t e. ~P ( Base ` w ) , u e. ~P ( Base ` w ) |-> ran ( x e. t , y e. u |-> ( x ( +g ` w ) y ) ) ) ) $.
            DEFINITION df-pj1 $a |- proj1 = ( w e. _V |-> ( t e. ~P ( Base ` w ) , u e. ~P ( Base ` w ) |-> ( z e. ( t ( LSSum ` w ) u ) |-> ( iota_ x e. t E. y e. u z = ( x ( +g ` w ) y ) ) ) ) ) $.
            #### Direct products (extension)
            
        
        ### Free groups
            $c ~FG $.
            $c freeGrp $.
            $c varFGrp $.
            CLASS cefg $a class ~FG $.
            CLASS cfrgp $a class freeGrp $.
            CLASS cvrgp $a class varFGrp $.
            DEFINITION df-efg $a |- ~FG = ( i e. _V |-> |^| { r | ( r Er Word ( i X. 2o ) /\ A. x e. Word ( i X. 2o ) A. n e. ( 0 ... ( # ` x ) ) A. y e. i A. z e. 2o x r ( x splice <. n , n , <" <. y , z >. <. y , ( 1o \ z ) >. "> >. ) ) } ) $.
            DEFINITION df-frgp $a |- freeGrp = ( i e. _V |-> ( ( freeMnd ` ( i X. 2o ) ) /s ( ~FG ` i ) ) ) $.
            DEFINITION df-vrgp $a |- varFGrp = ( i e. _V |-> ( j e. i |-> [ <" <. j , (/) >. "> ] ( ~FG ` i ) ) ) $.
        
        ### Abelian groups
            #### Definition and basic properties
                $c CMnd $.
                $c Abel $.
                CLASS ccmn $a class CMnd $.
                CLASS cabl $a class Abel $.
                DEFINITION df-cmn $a |- CMnd = { g e. Mnd | A. a e. ( Base ` g ) A. b e. ( Base ` g ) ( a ( +g ` g ) b ) = ( b ( +g ` g ) a ) } $.
                DEFINITION df-abl $a |- Abel = ( Grp i^i CMnd ) $.
            
            #### Cyclic groups
                $c CycGrp $.
                CLASS ccyg $a class CycGrp $.
                DEFINITION df-cyg $a |- CycGrp = { g e. Grp | E. x e. ( Base ` g ) ran ( n e. ZZ |-> ( n ( .g ` g ) x ) ) = ( Base ` g ) } $.
            
            #### Group sum operation
            
            #### Group sums over (ranges of) integers
            
            #### Internal direct products
                $c DProd $.
                $c dProj $.
                CLASS cdprd $a class DProd $.
                CLASS cdpj $a class dProj $.
                DEFINITION df-dprd $a |- DProd = ( g e. Grp , s e. { h | ( h : dom h --> ( SubGrp ` g ) /\ A. x e. dom h ( A. y e. ( dom h \ { x } ) ( h ` x ) C_ ( ( Cntz ` g ) ` ( h ` y ) ) /\ ( ( h ` x ) i^i ( ( mrCls ` ( SubGrp ` g ) ) ` U. ( h " ( dom h \ { x } ) ) ) ) = { ( 0g ` g ) } ) ) } |-> ran ( f e. { h e. X_ x e. dom s ( s ` x ) | h finSupp ( 0g ` g ) } |-> ( g gsum f ) ) ) $.
                DEFINITION df-dpj $a |- dProj = ( g e. Grp , s e. ( dom DProd " { g } ) |-> ( i e. dom s |-> ( ( s ` i ) ( proj1 ` g ) ( g DProd ( s |` ( dom s \ { i } ) ) ) ) ) ) $.
            
            #### The Fundamental Theorem of Abelian Groups
            
        
        ### Simple groups
            #### Definition and basic properties
                $c SimpGrp $.
                CLASS csimpg $a class SimpGrp $.
                DEFINITION df-simpg $a |- SimpGrp = { g e. Grp | ( NrmSGrp ` g ) ~~ 2o } $.
            
            #### Classification of abelian simple groups
            
        
    
    ## Rings
        ### Multiplicative Group
            $c mulGrp $.
            CLASS cmgp $a class mulGrp $.
            DEFINITION df-mgp $a |- mulGrp = ( w e. _V |-> ( w sSet <. ( +g ` ndx ) , ( .r ` w ) >. ) ) $.
        
        ### Ring unity (multiplicative identity)
            $c 1r $.
            CLASS cur $a class 1r $.
            DEFINITION df-ur $a |- 1r = ( 0g o. mulGrp ) $.
        
        ### Semirings
            $c SRing $.
            CLASS csrg $a class SRing $.
            DEFINITION df-srg $a |- SRing = { f e. CMnd | ( ( mulGrp ` f ) e. Mnd /\ [. ( Base ` f ) / r ]. [. ( +g ` f ) / p ]. [. ( .r ` f ) / t ]. [. ( 0g ` f ) / n ]. A. x e. r ( A. y e. r A. z e. r ( ( x t ( y p z ) ) = ( ( x t y ) p ( x t z ) ) /\ ( ( x p y ) t z ) = ( ( x t z ) p ( y t z ) ) ) /\ ( ( n t x ) = n /\ ( x t n ) = n ) ) ) } $.
            #### The binomial theorem for semirings
            
        
        ### Definition and basic properties of unital rings
            $c Ring $.
            $c CRing $.
            CLASS crg $a class Ring $.
            CLASS ccrg $a class CRing $.
            DEFINITION df-ring $a |- Ring = { f e. Grp | ( ( mulGrp ` f ) e. Mnd /\ [. ( Base ` f ) / r ]. [. ( +g ` f ) / p ]. [. ( .r ` f ) / t ]. A. x e. r A. y e. r A. z e. r ( ( x t ( y p z ) ) = ( ( x t y ) p ( x t z ) ) /\ ( ( x p y ) t z ) = ( ( x t z ) p ( y t z ) ) ) ) } $.
            DEFINITION df-cring $a |- CRing = { f e. Ring | ( mulGrp ` f ) e. CMnd } $.
        
        ### Opposite ring
            $c oppR $.
            CLASS coppr $a class oppR $.
            DEFINITION df-oppr $a |- oppR = ( f e. _V |-> ( f sSet <. ( .r ` ndx ) , tpos ( .r ` f ) >. ) ) $.
        
        ### Divisibility
            $c ||r $.
            $c Unit $.
            $c Irred $.
            CLASS cdsr $a class ||r $.
            CLASS cui $a class Unit $.
            CLASS cir $a class Irred $.
            DEFINITION df-dvdsr $a |- ||r = ( w e. _V |-> { <. x , y >. | ( x e. ( Base ` w ) /\ E. z e. ( Base ` w ) ( z ( .r ` w ) x ) = y ) } ) $.
            DEFINITION df-unit $a |- Unit = ( w e. _V |-> ( `' ( ( ||r ` w ) i^i ( ||r ` ( oppR ` w ) ) ) " { ( 1r ` w ) } ) ) $.
            DEFINITION df-irred $a |- Irred = ( w e. _V |-> [_ ( ( Base ` w ) \ ( Unit ` w ) ) / b ]_ { z e. b | A. x e. b A. y e. b ( x ( .r ` w ) y ) =/= z } ) $.
            $c invr $.
            CLASS cinvr $a class invr $.
            DEFINITION df-invr $a |- invr = ( r e. _V |-> ( invg ` ( ( mulGrp ` r ) |`s ( Unit ` r ) ) ) ) $.
            $c /r $.
            CLASS cdvr $a class /r $.
            DEFINITION df-dvr $a |- /r = ( r e. _V |-> ( x e. ( Base ` r ) , y e. ( Unit ` r ) |-> ( x ( .r ` r ) ( ( invr ` r ) ` y ) ) ) ) $.
        
        ### Ring primes
            $c RPrime $.
            CLASS crpm $a class RPrime $.
            DEFINITION df-rprm $a |- RPrime = ( w e. _V |-> [_ ( Base ` w ) / b ]_ { p e. ( b \ ( ( Unit ` w ) u. { ( 0g ` w ) } ) ) | A. x e. b A. y e. b [. ( ||r ` w ) / d ]. ( p d ( x ( .r ` w ) y ) -> ( p d x \/ p d y ) ) } ) $.
        
        ### Ring homomorphisms
            $c RingHom $.
            $c RingIso $.
            $c ~=r $.
            CLASS crh $a class RingHom $.
            CLASS crs $a class RingIso $.
            CLASS cric $a class ~=r $.
            DEFINITION df-rnghom $a |- RingHom = ( r e. Ring , s e. Ring |-> [_ ( Base ` r ) / v ]_ [_ ( Base ` s ) / w ]_ { f e. ( w ^m v ) | ( ( f ` ( 1r ` r ) ) = ( 1r ` s ) /\ A. x e. v A. y e. v ( ( f ` ( x ( +g ` r ) y ) ) = ( ( f ` x ) ( +g ` s ) ( f ` y ) ) /\ ( f ` ( x ( .r ` r ) y ) ) = ( ( f ` x ) ( .r ` s ) ( f ` y ) ) ) ) } ) $.
            DEFINITION df-rngiso $a |- RingIso = ( r e. _V , s e. _V |-> { f e. ( r RingHom s ) | `' f e. ( s RingHom r ) } ) $.
            DEFINITION df-ric $a |- ~=r = ( `' RingIso " ( _V \ 1o ) ) $.
        
        ### Nonzero rings and zero rings
            $c NzRing $.
            CLASS cnzr $a class NzRing $.
            DEFINITION df-nzr $a |- NzRing = { r e. Ring | ( 1r ` r ) =/= ( 0g ` r ) } $.
        
        ### Local rings
            $c LRing $.
            CLASS clring $a class LRing $.
            DEFINITION df-lring $a |- LRing = { r e. NzRing | A. x e. ( Base ` r ) A. y e. ( Base ` r ) ( ( x ( +g ` r ) y ) = ( 1r ` r ) -> ( x e. ( Unit ` r ) \/ y e. ( Unit ` r ) ) ) } $.
        
        ### Subrings of a ring
            $c SubRing $.
            $c RingSpan $.
            CLASS csubrg $a class SubRing $.
            CLASS crgspn $a class RingSpan $.
            DEFINITION df-subrg $a |- SubRing = ( w e. Ring |-> { s e. ~P ( Base ` w ) | ( ( w |`s s ) e. Ring /\ ( 1r ` w ) e. s ) } ) $.
            DEFINITION df-rgspn $a |- RingSpan = ( w e. _V |-> ( s e. ~P ( Base ` w ) |-> |^| { t e. ( SubRing ` w ) | s C_ t } ) ) $.
        
    
    ## Division rings and fields
        ### Definition and basic properties
            $c DivRing $.
            $c Field $.
            CLASS cdr $a class DivRing $.
            CLASS cfield $a class Field $.
            DEFINITION df-drng $a |- DivRing = { r e. Ring | ( Unit ` r ) = ( ( Base ` r ) \ { ( 0g ` r ) } ) } $.
            DEFINITION df-field $a |- Field = ( DivRing i^i CRing ) $.
        
        ### Sub-division rings
            $c SubDRing $.
            CLASS csdrg $a class SubDRing $.
            DEFINITION df-sdrg $a |- SubDRing = ( w e. DivRing |-> { s e. ( SubRing ` w ) | ( w |`s s ) e. DivRing } ) $.
        
        ### Absolute value (abstract algebra)
            $c AbsVal $.
            CLASS cabv $a class AbsVal $.
            DEFINITION df-abv $a |- AbsVal = ( r e. Ring |-> { f e. ( ( 0 [,) +oo ) ^m ( Base ` r ) ) | A. x e. ( Base ` r ) ( ( ( f ` x ) = 0 <-> x = ( 0g ` r ) ) /\ A. y e. ( Base ` r ) ( ( f ` ( x ( .r ` r ) y ) ) = ( ( f ` x ) x. ( f ` y ) ) /\ ( f ` ( x ( +g ` r ) y ) ) <_ ( ( f ` x ) + ( f ` y ) ) ) ) } ) $.
        
        ### Star rings
            $c *Ring $.
            $c *rf $.
            CLASS cstf $a class *rf $.
            CLASS csr $a class *Ring $.
            DEFINITION df-staf $a |- *rf = ( f e. _V |-> ( x e. ( Base ` f ) |-> ( ( *r ` f ) ` x ) ) ) $.
            DEFINITION df-srng $a |- *Ring = { f | [. ( *rf ` f ) / i ]. ( i e. ( f RingHom ( oppR ` f ) ) /\ i = `' i ) } $.
        
    
    ## Left modules
        ### Definition and basic properties
            $c LMod $.
            $c .sf $.
            CLASS clmod $a class LMod $.
            CLASS cscaf $a class .sf $.
            DEFINITION df-lmod $a |- LMod = { g e. Grp | [. ( Base ` g ) / v ]. [. ( +g ` g ) / a ]. [. ( Scalar ` g ) / f ]. [. ( .s ` g ) / s ]. [. ( Base ` f ) / k ]. [. ( +g ` f ) / p ]. [. ( .r ` f ) / t ]. ( f e. Ring /\ A. q e. k A. r e. k A. x e. v A. w e. v ( ( ( r s w ) e. v /\ ( r s ( w a x ) ) = ( ( r s w ) a ( r s x ) ) /\ ( ( q p r ) s w ) = ( ( q s w ) a ( r s w ) ) ) /\ ( ( ( q t r ) s w ) = ( q s ( r s w ) ) /\ ( ( 1r ` f ) s w ) = w ) ) ) } $.
            DEFINITION df-scaf $a |- .sf = ( g e. _V |-> ( x e. ( Base ` ( Scalar ` g ) ) , y e. ( Base ` g ) |-> ( x ( .s ` g ) y ) ) ) $.
        
        ### Subspaces and spans in a left module
            $c LSubSp $.
            CLASS clss $a class LSubSp $.
            DEFINITION df-lss $a |- LSubSp = ( w e. _V |-> { s e. ( ~P ( Base ` w ) \ { (/) } ) | A. x e. ( Base ` ( Scalar ` w ) ) A. a e. s A. b e. s ( ( x ( .s ` w ) a ) ( +g ` w ) b ) e. s } ) $.
            $c LSpan $.
            CLASS clspn $a class LSpan $.
            DEFINITION df-lsp $a |- LSpan = ( w e. _V |-> ( s e. ~P ( Base ` w ) |-> |^| { t e. ( LSubSp ` w ) | s C_ t } ) ) $.
        
        ### Homomorphisms and isomorphisms of left modules
            $c LMHom $.
            $c LMIso $.
            $c ~=m $.
            CLASS clmhm $a class LMHom $.
            CLASS clmim $a class LMIso $.
            CLASS clmic $a class ~=m $.
            DEFINITION df-lmhm $a |- LMHom = ( s e. LMod , t e. LMod |-> { f e. ( s GrpHom t ) | [. ( Scalar ` s ) / w ]. ( ( Scalar ` t ) = w /\ A. x e. ( Base ` w ) A. y e. ( Base ` s ) ( f ` ( x ( .s ` s ) y ) ) = ( x ( .s ` t ) ( f ` y ) ) ) } ) $.
            DEFINITION df-lmim $a |- LMIso = ( s e. LMod , t e. LMod |-> { g e. ( s LMHom t ) | g : ( Base ` s ) -1-1-onto-> ( Base ` t ) } ) $.
            DEFINITION df-lmic $a |- ~=m = ( `' LMIso " ( _V \ 1o ) ) $.
        
        ### Subspace sum; bases for a left module
            $c LBasis $.
            CLASS clbs $a class LBasis $.
            DEFINITION df-lbs $a |- LBasis = ( w e. _V |-> { b e. ~P ( Base ` w ) | [. ( LSpan ` w ) / n ]. [. ( Scalar ` w ) / s ]. ( ( n ` b ) = ( Base ` w ) /\ A. x e. b A. y e. ( ( Base ` s ) \ { ( 0g ` s ) } ) -. ( y ( .s ` w ) x ) e. ( n ` ( b \ { x } ) ) ) } ) $.
        
    
    ## Vector spaces
        ### Definition and basic properties
            $c LVec $.
            CLASS clvec $a class LVec $.
            DEFINITION df-lvec $a |- LVec = { f e. LMod | ( Scalar ` f ) e. DivRing } $.
        
    
    ## Ideals
        ### The subring algebra; ideals
            $c subringAlg $.
            $c ringLMod $.
            $c RSpan $.
            $c LIdeal $.
            CLASS csra $a class subringAlg $.
            CLASS crglmod $a class ringLMod $.
            CLASS clidl $a class LIdeal $.
            CLASS crsp $a class RSpan $.
            DEFINITION df-sra $a |- subringAlg = ( w e. _V |-> ( s e. ~P ( Base ` w ) |-> ( ( ( w sSet <. ( Scalar ` ndx ) , ( w |`s s ) >. ) sSet <. ( .s ` ndx ) , ( .r ` w ) >. ) sSet <. ( .i ` ndx ) , ( .r ` w ) >. ) ) ) $.
            DEFINITION df-rgmod $a |- ringLMod = ( w e. _V |-> ( ( subringAlg ` w ) ` ( Base ` w ) ) ) $.
            DEFINITION df-lidl $a |- LIdeal = ( LSubSp o. ringLMod ) $.
            DEFINITION df-rsp $a |- RSpan = ( LSpan o. ringLMod ) $.
        
        ### Two-sided ideals and quotient rings
            $c 2Ideal $.
            CLASS c2idl $a class 2Ideal $.
            DEFINITION df-2idl $a |- 2Ideal = ( r e. _V |-> ( ( LIdeal ` r ) i^i ( LIdeal ` ( oppR ` r ) ) ) ) $.
        
        ### Principal ideal rings.  Divisibility in the integers
            $c LPIdeal LPIR $.
            CLASS clpidl $a class LPIdeal $.
            CLASS clpir $a class LPIR $.
            DEFINITION df-lpidl $a |- LPIdeal = ( w e. Ring |-> U_ g e. ( Base ` w ) { ( ( RSpan ` w ) ` { g } ) } ) $.
            DEFINITION df-lpir $a |- LPIR = { w e. Ring | ( LIdeal ` w ) = ( LPIdeal ` w ) } $.
        
        ### Left regular elements.  More kinds of rings
            $c RLReg $.
            $c Domn $.
            $c IDomn $.
            $c PID $.
            CLASS crlreg $a class RLReg $.
            CLASS cdomn $a class Domn $.
            CLASS cidom $a class IDomn $.
            CLASS cpid $a class PID $.
            DEFINITION df-rlreg $a |- RLReg = ( r e. _V |-> { x e. ( Base ` r ) | A. y e. ( Base ` r ) ( ( x ( .r ` r ) y ) = ( 0g ` r ) -> y = ( 0g ` r ) ) } ) $.
            DEFINITION df-domn $a |- Domn = { r e. NzRing | [. ( Base ` r ) / b ]. [. ( 0g ` r ) / z ]. A. x e. b A. y e. b ( ( x ( .r ` r ) y ) = z -> ( x = z \/ y = z ) ) } $.
            DEFINITION df-idom $a |- IDomn = ( CRing i^i Domn ) $.
            DEFINITION df-pid $a |- PID = ( IDomn i^i LPIR ) $.
        
    
    ## The complex numbers as an algebraic extensible structure
        ### Definition and basic properties
            $c PsMet $.
            $c *Met $.
            $c Met $.
            $c ball $.
            $c fBas $.
            $c filGen $.
            $c MetOpen $.
            $c metUnif $.
            CLASS cpsmet $a class PsMet $.
            CLASS cxmet $a class *Met $.
            CLASS cmet $a class Met $.
            CLASS cbl $a class ball $.
            CLASS cfbas $a class fBas $.
            CLASS cfg $a class filGen $.
            CLASS cmopn $a class MetOpen $.
            CLASS cmetu $a class metUnif $.
            DEFINITION df-psmet $a |- PsMet = ( x e. _V |-> { d e. ( RR* ^m ( x X. x ) ) | A. y e. x ( ( y d y ) = 0 /\ A. z e. x A. w e. x ( y d z ) <_ ( ( w d y ) +e ( w d z ) ) ) } ) $.
            DEFINITION df-xmet $a |- *Met = ( x e. _V |-> { d e. ( RR* ^m ( x X. x ) ) | A. y e. x A. z e. x ( ( ( y d z ) = 0 <-> y = z ) /\ A. w e. x ( y d z ) <_ ( ( w d y ) +e ( w d z ) ) ) } ) $.
            DEFINITION df-met $a |- Met = ( x e. _V |-> { d e. ( RR ^m ( x X. x ) ) | A. y e. x A. z e. x ( ( ( y d z ) = 0 <-> y = z ) /\ A. w e. x ( y d z ) <_ ( ( w d y ) + ( w d z ) ) ) } ) $.
            DEFINITION df-bl $a |- ball = ( d e. _V |-> ( x e. dom dom d , z e. RR* |-> { y e. dom dom d | ( x d y ) < z } ) ) $.
            DEFINITION df-mopn $a |- MetOpen = ( d e. U. ran *Met |-> ( topGen ` ran ( ball ` d ) ) ) $.
            DEFINITION df-fbas $a |- fBas = ( w e. _V |-> { x e. ~P ~P w | ( x =/= (/) /\ (/) e/ x /\ A. y e. x A. z e. x ( x i^i ~P ( y i^i z ) ) =/= (/) ) } ) $.
            DEFINITION df-fg $a |- filGen = ( w e. _V , x e. ( fBas ` w ) |-> { y e. ~P w | ( x i^i ~P y ) =/= (/) } ) $.
            DEFINITION df-metu $a |- metUnif = ( d e. U. ran PsMet |-> ( ( dom dom d X. dom dom d ) filGen ran ( a e. RR+ |-> ( `' d " ( 0 [,) a ) ) ) ) ) $.
            $c CCfld $.
            CLASS ccnfld $a class CCfld $.
            DEFINITION df-cnfld $a |- CCfld = ( ( { <. ( Base ` ndx ) , CC >. , <. ( +g ` ndx ) , + >. , <. ( .r ` ndx ) , x. >. } u. { <. ( *r ` ndx ) , * >. } ) u. ( { <. ( TopSet ` ndx ) , ( MetOpen ` ( abs o. - ) ) >. , <. ( le ` ndx ) , <_ >. , <. ( dist ` ndx ) , ( abs o. - ) >. } u. { <. ( UnifSet ` ndx ) , ( metUnif ` ( abs o. - ) ) >. } ) ) $.
        
        ### Ring of integers
            $c ZZring $.
            CLASS czring $a class ZZring $.
            DEFINITION df-zring $a |- ZZring = ( CCfld |`s ZZ ) $.
        
        ### Algebraic constructions based on the complex numbers
            $c ZRHom $.
            $c ZMod $.
            $c chr $.
            $c Z/nZ $.
            CLASS czrh $a class ZRHom $.
            CLASS czlm $a class ZMod $.
            CLASS cchr $a class chr $.
            CLASS czn $a class Z/nZ $.
            DEFINITION df-zrh $a |- ZRHom = ( r e. _V |-> U. ( ZZring RingHom r ) ) $.
            DEFINITION df-zlm $a |- ZMod = ( g e. _V |-> ( ( g sSet <. ( Scalar ` ndx ) , ZZring >. ) sSet <. ( .s ` ndx ) , ( .g ` g ) >. ) ) $.
            DEFINITION df-chr $a |- chr = ( g e. _V |-> ( ( od ` g ) ` ( 1r ` g ) ) ) $.
            DEFINITION df-zn $a |- Z/nZ = ( n e. NN0 |-> [_ ZZring / z ]_ [_ ( z /s ( z ~QG ( ( RSpan ` z ) ` { n } ) ) ) / s ]_ ( s sSet <. ( le ` ndx ) , [_ ( ( ZRHom ` s ) |` if ( n = 0 , ZZ , ( 0 ..^ n ) ) ) / f ]_ ( ( f o. <_ ) o. `' f ) >. ) ) $.
        
        ### Signs as subgroup of the complex numbers
        
        ### Embedding of permutation signs into a ring
        
        ### The ordered field of real numbers
            $c RRfld $.
            CLASS crefld $a class RRfld $.
            DEFINITION df-refld $a |- RRfld = ( CCfld |`s RR ) $.
        
    
    ## Generalized pre-Hilbert and Hilbert spaces
        ### Definition and basic properties
            $c PreHil $.
            $c .if $.
            CLASS cphl $a class PreHil $.
            CLASS cipf $a class .if $.
            DEFINITION df-phl $a |- PreHil = { g e. LVec | [. ( Base ` g ) / v ]. [. ( .i ` g ) / h ]. [. ( Scalar ` g ) / f ]. ( f e. *Ring /\ A. x e. v ( ( y e. v |-> ( y h x ) ) e. ( g LMHom ( ringLMod ` f ) ) /\ ( ( x h x ) = ( 0g ` f ) -> x = ( 0g ` g ) ) /\ A. y e. v ( ( *r ` f ) ` ( x h y ) ) = ( y h x ) ) ) } $.
            DEFINITION df-ipf $a |- .if = ( g e. _V |-> ( x e. ( Base ` g ) , y e. ( Base ` g ) |-> ( x ( .i ` g ) y ) ) ) $.
        
        ### Orthocomplements and closed subspaces
            $c ocv $.
            $c ClSubSp $.
            $c toHL $.
            CLASS cocv $a class ocv $.
            CLASS ccss $a class ClSubSp $.
            CLASS cthl $a class toHL $.
            DEFINITION df-ocv $a |- ocv = ( h e. _V |-> ( s e. ~P ( Base ` h ) |-> { x e. ( Base ` h ) | A. y e. s ( x ( .i ` h ) y ) = ( 0g ` ( Scalar ` h ) ) } ) ) $.
            DEFINITION df-css $a |- ClSubSp = ( h e. _V |-> { s | s = ( ( ocv ` h ) ` ( ( ocv ` h ) ` s ) ) } ) $.
            DEFINITION df-thl $a |- toHL = ( h e. _V |-> ( ( toInc ` ( ClSubSp ` h ) ) sSet <. ( oc ` ndx ) , ( ocv ` h ) >. ) ) $.
        
        ### Orthogonal projection and orthonormal bases
            $c proj $.
            $c Hil $.
            $c OBasis $.
            CLASS cpj $a class proj $.
            CLASS chil $a class Hil $.
            CLASS cobs $a class OBasis $.
            DEFINITION df-pj $a |- proj = ( h e. _V |-> ( ( x e. ( LSubSp ` h ) |-> ( x ( proj1 ` h ) ( ( ocv ` h ) ` x ) ) ) i^i ( _V X. ( ( Base ` h ) ^m ( Base ` h ) ) ) ) ) $.
            DEFINITION df-hil $a |- Hil = { h e. PreHil | dom ( proj ` h ) = ( ClSubSp ` h ) } $.
            DEFINITION df-obs $a |- OBasis = ( h e. PreHil |-> { b e. ~P ( Base ` h ) | ( A. x e. b A. y e. b ( x ( .i ` h ) y ) = if ( x = y , ( 1r ` ( Scalar ` h ) ) , ( 0g ` ( Scalar ` h ) ) ) /\ ( ( ocv ` h ) ` b ) = { ( 0g ` h ) } ) } ) $.
        
    
# BASIC LINEAR ALGEBRA
    ## Vectors and free modules
        ### Direct sum of left modules
            $c (+)m $.
            CLASS cdsmm $a class (+)m $.
            DEFINITION df-dsmm $a |- (+)m = ( s e. _V , r e. _V |-> ( ( s Xs_ r ) |`s { f e. X_ x e. dom r ( Base ` ( r ` x ) ) | { x e. dom r | ( f ` x ) =/= ( 0g ` ( r ` x ) ) } e. Fin } ) ) $.
        
        ### Free modules
            $c freeLMod $.
            CLASS cfrlm $a class freeLMod $.
            DEFINITION df-frlm $a |- freeLMod = ( r e. _V , i e. _V |-> ( r (+)m ( i X. { ( ringLMod ` r ) } ) ) ) $.
        
        ### Standard basis (unit vectors)
            $c unitVec $.
            CLASS cuvc $a class unitVec $.
            DEFINITION df-uvc $a |- unitVec = ( r e. _V , i e. _V |-> ( j e. i |-> ( k e. i |-> if ( k = j , ( 1r ` r ) , ( 0g ` r ) ) ) ) ) $.
        
        ### Independent sets and families
            $c LIndF LIndS $.
            CLASS clindf $a class LIndF $.
            CLASS clinds $a class LIndS $.
            DEFINITION df-lindf $a |- LIndF = { <. f , w >. | ( f : dom f --> ( Base ` w ) /\ [. ( Scalar ` w ) / s ]. A. x e. dom f A. k e. ( ( Base ` s ) \ { ( 0g ` s ) } ) -. ( k ( .s ` w ) ( f ` x ) ) e. ( ( LSpan ` w ) ` ( f " ( dom f \ { x } ) ) ) ) } $.
            DEFINITION df-linds $a |- LIndS = ( w e. _V |-> { s e. ~P ( Base ` w ) | ( _I |` s ) LIndF w } ) $.
        
        ### Characterization of free modules
        
    
    ## Associative algebras
        ### Definition and basic properties
            $c AssAlg $.
            $c AlgSpan $.
            $c algSc $.
            CLASS casa $a class AssAlg $.
            CLASS casp $a class AlgSpan $.
            CLASS cascl $a class algSc $.
            DEFINITION df-assa $a |- AssAlg = { w e. ( LMod i^i Ring ) | [. ( Scalar ` w ) / f ]. A. r e. ( Base ` f ) A. x e. ( Base ` w ) A. y e. ( Base ` w ) [. ( .s ` w ) / s ]. [. ( .r ` w ) / t ]. ( ( ( r s x ) t y ) = ( r s ( x t y ) ) /\ ( x t ( r s y ) ) = ( r s ( x t y ) ) ) } $.
            DEFINITION df-asp $a |- AlgSpan = ( w e. AssAlg |-> ( s e. ~P ( Base ` w ) |-> |^| { t e. ( ( SubRing ` w ) i^i ( LSubSp ` w ) ) | s C_ t } ) ) $.
            DEFINITION df-ascl $a |- algSc = ( w e. _V |-> ( x e. ( Base ` ( Scalar ` w ) ) |-> ( x ( .s ` w ) ( 1r ` w ) ) ) ) $.
        
    
    ## Abstract multivariate polynomials
        ### Definition and basic properties
            $c mPwSer $.
            $c mVar $.
            $c mPoly $.
            $c <bag $.
            $c ordPwSer $.
            CLASS cmps $a class mPwSer $.
            CLASS cmvr $a class mVar $.
            CLASS cmpl $a class mPoly $.
            CLASS cltb $a class <bag $.
            CLASS copws $a class ordPwSer $.
            DEFINITION df-psr $a |- mPwSer = ( i e. _V , r e. _V |-> [_ { h e. ( NN0 ^m i ) | ( `' h " NN ) e. Fin } / d ]_ [_ ( ( Base ` r ) ^m d ) / b ]_ ( { <. ( Base ` ndx ) , b >. , <. ( +g ` ndx ) , ( oF ( +g ` r ) |` ( b X. b ) ) >. , <. ( .r ` ndx ) , ( f e. b , g e. b |-> ( k e. d |-> ( r gsum ( x e. { y e. d | y oR <_ k } |-> ( ( f ` x ) ( .r ` r ) ( g ` ( k oF - x ) ) ) ) ) ) ) >. } u. { <. ( Scalar ` ndx ) , r >. , <. ( .s ` ndx ) , ( x e. ( Base ` r ) , f e. b |-> ( ( d X. { x } ) oF ( .r ` r ) f ) ) >. , <. ( TopSet ` ndx ) , ( Xt_ ` ( d X. { ( TopOpen ` r ) } ) ) >. } ) ) $.
            DEFINITION df-mvr $a |- mVar = ( i e. _V , r e. _V |-> ( x e. i |-> ( f e. { h e. ( NN0 ^m i ) | ( `' h " NN ) e. Fin } |-> if ( f = ( y e. i |-> if ( y = x , 1 , 0 ) ) , ( 1r ` r ) , ( 0g ` r ) ) ) ) ) $.
            DEFINITION df-mpl $a |- mPoly = ( i e. _V , r e. _V |-> [_ ( i mPwSer r ) / w ]_ ( w |`s { f e. ( Base ` w ) | f finSupp ( 0g ` r ) } ) ) $.
            DEFINITION df-ltbag $a |- <bag = ( r e. _V , i e. _V |-> { <. x , y >. | ( { x , y } C_ { h e. ( NN0 ^m i ) | ( `' h " NN ) e. Fin } /\ E. z e. i ( ( x ` z ) < ( y ` z ) /\ A. w e. i ( z r w -> ( x ` w ) = ( y ` w ) ) ) ) } ) $.
            DEFINITION df-opsr $a |- ordPwSer = ( i e. _V , s e. _V |-> ( r e. ~P ( i X. i ) |-> [_ ( i mPwSer s ) / p ]_ ( p sSet <. ( le ` ndx ) , { <. x , y >. | ( { x , y } C_ ( Base ` p ) /\ ( [. { h e. ( NN0 ^m i ) | ( `' h " NN ) e. Fin } / d ]. E. z e. d ( ( x ` z ) ( lt ` s ) ( y ` z ) /\ A. w e. d ( w ( r <bag i ) z -> ( x ` w ) = ( y ` w ) ) ) \/ x = y ) ) } >. ) ) ) $.
        
        ### Polynomial evaluation
            $c evalSub $.
            $c eval $.
            CLASS ces $a class evalSub $.
            CLASS cevl $a class eval $.
            DEFINITION df-evls $a |- evalSub = ( i e. _V , s e. CRing |-> [_ ( Base ` s ) / b ]_ ( r e. ( SubRing ` s ) |-> [_ ( i mPoly ( s |`s r ) ) / w ]_ ( iota_ f e. ( w RingHom ( s ^s ( b ^m i ) ) ) ( ( f o. ( algSc ` w ) ) = ( x e. r |-> ( ( b ^m i ) X. { x } ) ) /\ ( f o. ( i mVar ( s |`s r ) ) ) = ( x e. i |-> ( g e. ( b ^m i ) |-> ( g ` x ) ) ) ) ) ) ) $.
            DEFINITION df-evl $a |- eval = ( i e. _V , r e. _V |-> ( ( i evalSub r ) ` ( Base ` r ) ) ) $.
        
        ### Additional definitions for (multivariate) polynomials
            $c selectVars $.
            $c mHomP $.
            $c mPSDer $.
            $c AlgInd $.
            CLASS cslv $a class selectVars $.
            CLASS cmhp $a class mHomP $.
            CLASS cpsd $a class mPSDer $.
            CLASS cai $a class AlgInd $.
            DEFINITION df-selv $a |- selectVars = ( i e. _V , r e. _V |-> ( j e. ~P i |-> ( f e. ( Base ` ( i mPoly r ) ) |-> [_ ( ( i \ j ) mPoly r ) / u ]_ [_ ( j mPoly u ) / t ]_ [_ ( algSc ` t ) / c ]_ [_ ( c o. ( algSc ` u ) ) / d ]_ ( ( ( ( i evalSub t ) ` ran d ) ` ( d o. f ) ) ` ( x e. i |-> if ( x e. j , ( ( j mVar u ) ` x ) , ( c ` ( ( ( i \ j ) mVar r ) ` x ) ) ) ) ) ) ) ) $.
            DEFINITION df-mhp $a |- mHomP = ( i e. _V , r e. _V |-> ( n e. NN0 |-> { f e. ( Base ` ( i mPoly r ) ) | ( f supp ( 0g ` r ) ) C_ { g e. { h e. ( NN0 ^m i ) | ( `' h " NN ) e. Fin } | ( ( CCfld |`s NN0 ) gsum g ) = n } } ) ) $.
            DEFINITION df-psd $a |- mPSDer = ( i e. _V , r e. _V |-> ( x e. i |-> ( f e. ( Base ` ( i mPwSer r ) ) |-> ( k e. { h e. ( NN0 ^m i ) | ( `' h " NN ) e. Fin } |-> ( ( ( k ` x ) + 1 ) ( .g ` r ) ( f ` ( k oF + ( y e. i |-> if ( y = x , 1 , 0 ) ) ) ) ) ) ) ) ) $.
            DEFINITION df-algind $a |- AlgInd = ( w e. _V , k e. ~P ( Base ` w ) |-> { v e. ~P ( Base ` w ) | Fun `' ( f e. ( Base ` ( v mPoly ( w |`s k ) ) ) |-> ( ( ( ( v evalSub w ) ` k ) ` f ) ` ( _I |` v ) ) ) } ) $.
        
        ### Univariate polynomials
            $c PwSer1 $.
            $c var1 $.
            $c Poly1 $.
            $c coe1 $.
            $c toPoly1 $.
            CLASS cps1 $a class PwSer1 $.
            CLASS cv1 $a class var1 $.
            CLASS cpl1 $a class Poly1 $.
            CLASS cco1 $a class coe1 $.
            CLASS ctp1 $a class toPoly1 $.
            DEFINITION df-psr1 $a |- PwSer1 = ( r e. _V |-> ( ( 1o ordPwSer r ) ` (/) ) ) $.
            DEFINITION df-vr1 $a |- var1 = ( r e. _V |-> ( ( 1o mVar r ) ` (/) ) ) $.
            DEFINITION df-ply1 $a |- Poly1 = ( r e. _V |-> ( ( PwSer1 ` r ) |`s ( Base ` ( 1o mPoly r ) ) ) ) $.
            DEFINITION df-coe1 $a |- coe1 = ( f e. _V |-> ( n e. NN0 |-> ( f ` ( 1o X. { n } ) ) ) ) $.
            DEFINITION df-toply1 $a |- toPoly1 = ( f e. _V |-> ( n e. ( NN0 ^m 1o ) |-> ( f ` ( n ` (/) ) ) ) ) $.
        
        ### Univariate polynomial evaluation
            $c evalSub1 $.
            $c eval1 $.
            CLASS ces1 $a class evalSub1 $.
            CLASS ce1 $a class eval1 $.
            DEFINITION df-evls1 $a |- evalSub1 = ( s e. _V , r e. ~P ( Base ` s ) |-> [_ ( Base ` s ) / b ]_ ( ( x e. ( b ^m ( b ^m 1o ) ) |-> ( x o. ( y e. b |-> ( 1o X. { y } ) ) ) ) o. ( ( 1o evalSub s ) ` r ) ) ) $.
            DEFINITION df-evl1 $a |- eval1 = ( r e. _V |-> [_ ( Base ` r ) / b ]_ ( ( x e. ( b ^m ( b ^m 1o ) ) |-> ( x o. ( y e. b |-> ( 1o X. { y } ) ) ) ) o. ( 1o eval r ) ) ) $.
        
    
    ## Matrices
        ### The matrix multiplication
            $c maMul $.
            CLASS cmmul $a class maMul $.
            DEFINITION df-mamu $a |- maMul = ( r e. _V , o e. _V |-> [_ ( 1st ` ( 1st ` o ) ) / m ]_ [_ ( 2nd ` ( 1st ` o ) ) / n ]_ [_ ( 2nd ` o ) / p ]_ ( x e. ( ( Base ` r ) ^m ( m X. n ) ) , y e. ( ( Base ` r ) ^m ( n X. p ) ) |-> ( i e. m , k e. p |-> ( r gsum ( j e. n |-> ( ( i x j ) ( .r ` r ) ( j y k ) ) ) ) ) ) ) $.
        
        ### Square matrices
            $c Mat $.
            CLASS cmat $a class Mat $.
            DEFINITION df-mat $a |- Mat = ( n e. Fin , r e. _V |-> ( ( r freeLMod ( n X. n ) ) sSet <. ( .r ` ndx ) , ( r maMul <. n , n , n >. ) >. ) ) $.
        
        ### The matrix algebra
        
        ### Matrices of dimension 0 and 1
        
        ### The subalgebras of diagonal and scalar matrices
            $c DMat ScMat $.
            CLASS cdmat $a class DMat $.
            CLASS cscmat $a class ScMat $.
            DEFINITION df-dmat $a |- DMat = ( n e. Fin , r e. _V |-> { m e. ( Base ` ( n Mat r ) ) | A. i e. n A. j e. n ( i =/= j -> ( i m j ) = ( 0g ` r ) ) } ) $.
            DEFINITION df-scmat $a |- ScMat = ( n e. Fin , r e. _V |-> [_ ( n Mat r ) / a ]_ { m e. ( Base ` a ) | E. c e. ( Base ` r ) m = ( c ( .s ` a ) ( 1r ` a ) ) } ) $.
        
        ### Multiplication of a matrix with a "column vector"
            $c maVecMul $.
            CLASS cmvmul $a class maVecMul $.
            DEFINITION df-mvmul $a |- maVecMul = ( r e. _V , o e. _V |-> [_ ( 1st ` o ) / m ]_ [_ ( 2nd ` o ) / n ]_ ( x e. ( ( Base ` r ) ^m ( m X. n ) ) , y e. ( ( Base ` r ) ^m n ) |-> ( i e. m |-> ( r gsum ( j e. n |-> ( ( i x j ) ( .r ` r ) ( y ` j ) ) ) ) ) ) ) $.
        
        ### Replacement functions for a square matrix
            $c matRRep matRepV $.
            CLASS cmarrep $a class matRRep $.
            CLASS cmatrepV $a class matRepV $.
            DEFINITION df-marrep $a |- matRRep = ( n e. _V , r e. _V |-> ( m e. ( Base ` ( n Mat r ) ) , s e. ( Base ` r ) |-> ( k e. n , l e. n |-> ( i e. n , j e. n |-> if ( i = k , if ( j = l , s , ( 0g ` r ) ) , ( i m j ) ) ) ) ) ) $.
            DEFINITION df-marepv $a |- matRepV = ( n e. _V , r e. _V |-> ( m e. ( Base ` ( n Mat r ) ) , v e. ( ( Base ` r ) ^m n ) |-> ( k e. n |-> ( i e. n , j e. n |-> if ( j = k , ( v ` i ) , ( i m j ) ) ) ) ) ) $.
        
        ### Submatrices
            $c subMat $.
            CLASS csubma $a class subMat $.
            DEFINITION df-subma $a |- subMat = ( n e. _V , r e. _V |-> ( m e. ( Base ` ( n Mat r ) ) |-> ( k e. n , l e. n |-> ( i e. ( n \ { k } ) , j e. ( n \ { l } ) |-> ( i m j ) ) ) ) ) $.
        
    
    ## The determinant
        ### Definition and basic properties
            $c maDet $.
            CLASS cmdat $a class maDet $.
            DEFINITION df-mdet $a |- maDet = ( n e. _V , r e. _V |-> ( m e. ( Base ` ( n Mat r ) ) |-> ( r gsum ( p e. ( Base ` ( SymGrp ` n ) ) |-> ( ( ( ( ZRHom ` r ) o. ( pmSgn ` n ) ) ` p ) ( .r ` r ) ( ( mulGrp ` r ) gsum ( x e. n |-> ( ( p ` x ) m x ) ) ) ) ) ) ) ) $.
        
        ### Determinants of 2 x 2 -matrices
        
        ### The matrix adjugate/adjunct
            $c maAdju $.
            $c minMatR1 $.
            CLASS cmadu $a class maAdju $.
            CLASS cminmar1 $a class minMatR1 $.
            DEFINITION df-madu $a |- maAdju = ( n e. _V , r e. _V |-> ( m e. ( Base ` ( n Mat r ) ) |-> ( i e. n , j e. n |-> ( ( n maDet r ) ` ( k e. n , l e. n |-> if ( k = j , if ( l = i , ( 1r ` r ) , ( 0g ` r ) ) , ( k m l ) ) ) ) ) ) ) $.
            DEFINITION df-minmar1 $a |- minMatR1 = ( n e. _V , r e. _V |-> ( m e. ( Base ` ( n Mat r ) ) |-> ( k e. n , l e. n |-> ( i e. n , j e. n |-> if ( i = k , if ( j = l , ( 1r ` r ) , ( 0g ` r ) ) , ( i m j ) ) ) ) ) ) $.
        
        ### Laplace expansion of determinants (special case)
        
        ### Inverse matrix
        
        ### Cramer's rule
        
    
    ## Polynomial matrices
        ### Basic properties
        
        ### Constant polynomial matrices
            $c ConstPolyMat $.
            $c matToPolyMat $.
            $c cPolyMatToMat $.
            CLASS ccpmat $a class ConstPolyMat $.
            CLASS cmat2pmat $a class matToPolyMat $.
            CLASS ccpmat2mat $a class cPolyMatToMat $.
            DEFINITION df-cpmat $a |- ConstPolyMat = ( n e. Fin , r e. _V |-> { m e. ( Base ` ( n Mat ( Poly1 ` r ) ) ) | A. i e. n A. j e. n A. k e. NN ( ( coe1 ` ( i m j ) ) ` k ) = ( 0g ` r ) } ) $.
            DEFINITION df-mat2pmat $a |- matToPolyMat = ( n e. Fin , r e. _V |-> ( m e. ( Base ` ( n Mat r ) ) |-> ( x e. n , y e. n |-> ( ( algSc ` ( Poly1 ` r ) ) ` ( x m y ) ) ) ) ) $.
            DEFINITION df-cpmat2mat $a |- cPolyMatToMat = ( n e. Fin , r e. _V |-> ( m e. ( n ConstPolyMat r ) |-> ( x e. n , y e. n |-> ( ( coe1 ` ( x m y ) ) ` 0 ) ) ) ) $.
        
        ### Collecting coefficients of polynomial matrices
            $c decompPMat $.
            CLASS cdecpmat $a class decompPMat $.
            DEFINITION df-decpmat $a |- decompPMat = ( m e. _V , k e. NN0 |-> ( i e. dom dom m , j e. dom dom m |-> ( ( coe1 ` ( i m j ) ) ` k ) ) ) $.
        
        ### Ring isomorphism between polynomial matrices and polynomials over matrices
            $c pMatToMatPoly $.
            CLASS cpm2mp $a class pMatToMatPoly $.
            DEFINITION df-pm2mp $a |- pMatToMatPoly = ( n e. Fin , r e. _V |-> ( m e. ( Base ` ( n Mat ( Poly1 ` r ) ) ) |-> [_ ( n Mat r ) / a ]_ [_ ( Poly1 ` a ) / q ]_ ( q gsum ( k e. NN0 |-> ( ( m decompPMat k ) ( .s ` q ) ( k ( .g ` ( mulGrp ` q ) ) ( var1 ` a ) ) ) ) ) ) ) $.
        
    
    ## The characteristic polynomial
        ### Definition and basic properties
            $c CharPlyMat $.
            CLASS cchpmat $a class CharPlyMat $.
            DEFINITION df-chpmat $a |- CharPlyMat = ( n e. Fin , r e. _V |-> ( m e. ( Base ` ( n Mat r ) ) |-> ( ( n maDet ( Poly1 ` r ) ) ` ( ( ( var1 ` r ) ( .s ` ( n Mat ( Poly1 ` r ) ) ) ( 1r ` ( n Mat ( Poly1 ` r ) ) ) ) ( -g ` ( n Mat ( Poly1 ` r ) ) ) ( ( n matToPolyMat r ) ` m ) ) ) ) ) $.
        
        ### The characteristic factor function G
        
        ### The Cayley-Hamilton theorem
        
    
# BASIC TOPOLOGY
    ## Topology
        ### Topological spaces
            #### Topologies
                $c Top $.
                CLASS ctop $a class Top $.
                DEFINITION df-top $a |- Top = { x | ( A. y e. ~P x U. y e. x /\ A. y e. x A. z e. x ( y i^i z ) e. x ) } $.
            
            #### Topologies on sets
                $c TopOn $.
                CLASS ctopon $a class TopOn $.
                DEFINITION df-topon $a |- TopOn = ( b e. _V |-> { j e. Top | b = U. j } ) $.
            
            #### Topological spaces
                $c TopSp $.
                CLASS ctps $a class TopSp $.
                DEFINITION df-topsp $a |- TopSp = { f | ( TopOpen ` f ) e. ( TopOn ` ( Base ` f ) ) } $.
            
        
        ### Topological bases
            $c TopBases $.
            CLASS ctb $a class TopBases $.
            DEFINITION df-bases $a |- TopBases = { x | A. y e. x A. z e. x ( y i^i z ) C_ U. ( x i^i ~P ( y i^i z ) ) } $.
        
        ### Examples of topologies
        
        ### Closure and interior
            $c int $.
            $c cls $.
            $c Clsd $.
            CLASS ccld $a class Clsd $.
            CLASS cnt $a class int $.
            CLASS ccl $a class cls $.
            DEFINITION df-cld $a |- Clsd = ( j e. Top |-> { x e. ~P U. j | ( U. j \ x ) e. j } ) $.
            DEFINITION df-ntr $a |- int = ( j e. Top |-> ( x e. ~P U. j |-> U. ( j i^i ~P x ) ) ) $.
            DEFINITION df-cls $a |- cls = ( j e. Top |-> ( x e. ~P U. j |-> |^| { y e. ( Clsd ` j ) | x C_ y } ) ) $.
        
        ### Neighborhoods
            $c nei $.
            CLASS cnei $a class nei $.
            DEFINITION df-nei $a |- nei = ( j e. Top |-> ( x e. ~P U. j |-> { y e. ~P U. j | E. g e. j ( x C_ g /\ g C_ y ) } ) ) $.
        
        ### Limit points and perfect sets
            $c limPt $.
            $c Perf $.
            CLASS clp $a class limPt $.
            CLASS cperf $a class Perf $.
            DEFINITION df-lp $a |- limPt = ( j e. Top |-> ( x e. ~P U. j |-> { y | y e. ( ( cls ` j ) ` ( x \ { y } ) ) } ) ) $.
            DEFINITION df-perf $a |- Perf = { j e. Top | ( ( limPt ` j ) ` U. j ) = U. j } $.
        
        ### Subspace topologies
        
        ### Order topology
        
        ### Limits and continuity in topological spaces
            $c Cn $.
            $c CnP $.
            $c ~~>t $.
            CLASS ccn $a class Cn $.
            CLASS ccnp $a class CnP $.
            CLASS clm $a class ~~>t $.
            DEFINITION df-cn $a |- Cn = ( j e. Top , k e. Top |-> { f e. ( U. k ^m U. j ) | A. y e. k ( `' f " y ) e. j } ) $.
            DEFINITION df-cnp $a |- CnP = ( j e. Top , k e. Top |-> ( x e. U. j |-> { f e. ( U. k ^m U. j ) | A. y e. k ( ( f ` x ) e. y -> E. g e. j ( x e. g /\ ( f " g ) C_ y ) ) } ) ) $.
            DEFINITION df-lm $a |- ~~>t = ( j e. Top |-> { <. f , x >. | ( f e. ( U. j ^pm CC ) /\ x e. U. j /\ A. u e. j ( x e. u -> E. y e. ran ZZ>= ( f |` y ) : y --> u ) ) } ) $.
        
        ### Separated spaces: T0, T1, T2 (Hausdorff) ...
            $c Kol2 $.
            $c Fre $.
            $c Haus $.
            $c Reg $.
            $c Nrm $.
            $c CNrm $.
            $c PNrm $.
            CLASS ct0 $a class Kol2 $.
            CLASS ct1 $a class Fre $.
            CLASS cha $a class Haus $.
            CLASS creg $a class Reg $.
            CLASS cnrm $a class Nrm $.
            CLASS ccnrm $a class CNrm $.
            CLASS cpnrm $a class PNrm $.
            DEFINITION df-t0 $a |- Kol2 = { j e. Top | A. x e. U. j A. y e. U. j ( A. o e. j ( x e. o <-> y e. o ) -> x = y ) } $.
            DEFINITION df-t1 $a |- Fre = { x e. Top | A. a e. U. x { a } e. ( Clsd ` x ) } $.
            DEFINITION df-haus $a |- Haus = { j e. Top | A. x e. U. j A. y e. U. j ( x =/= y -> E. n e. j E. m e. j ( x e. n /\ y e. m /\ ( n i^i m ) = (/) ) ) } $.
            DEFINITION df-reg $a |- Reg = { j e. Top | A. x e. j A. y e. x E. z e. j ( y e. z /\ ( ( cls ` j ) ` z ) C_ x ) } $.
            DEFINITION df-nrm $a |- Nrm = { j e. Top | A. x e. j A. y e. ( ( Clsd ` j ) i^i ~P x ) E. z e. j ( y C_ z /\ ( ( cls ` j ) ` z ) C_ x ) } $.
            DEFINITION df-cnrm $a |- CNrm = { j e. Top | A. x e. ~P U. j ( j |`t x ) e. Nrm } $.
            DEFINITION df-pnrm $a |- PNrm = { j e. Nrm | ( Clsd ` j ) C_ ran ( f e. ( j ^m NN ) |-> |^| ran f ) } $.
        
        ### Compactness
            $c Comp $.
            CLASS ccmp $a class Comp $.
            DEFINITION df-cmp $a |- Comp = { x e. Top | A. y e. ~P x ( U. x = U. y -> E. z e. ( ~P y i^i Fin ) U. x = U. z ) } $.
        
        ### Bolzano-Weierstrass theorem
        
        ### Connectedness
            $c Conn $.
            CLASS cconn $a class Conn $.
            DEFINITION df-conn $a |- Conn = { j e. Top | ( j i^i ( Clsd ` j ) ) = { (/) , U. j } } $.
        
        ### First- and second-countability
            $c 1stc $.
            CLASS c1stc $a class 1stc $.
            $c 2ndc $.
            CLASS c2ndc $a class 2ndc $.
            DEFINITION df-1stc $a |- 1stc = { j e. Top | A. x e. U. j E. y e. ~P j ( y ~<_ _om /\ A. z e. j ( x e. z -> x e. U. ( y i^i ~P z ) ) ) } $.
            DEFINITION df-2ndc $a |- 2ndc = { j | E. x e. TopBases ( x ~<_ _om /\ ( topGen ` x ) = j ) } $.
        
        ### Local topological properties
            $c Locally $.
            $c N-Locally $.
            CLASS clly $a class Locally A $.
            CLASS cnlly $a class N-Locally A $.
            DEFINITION df-lly $a |- Locally A = { j e. Top | A. x e. j A. y e. x E. u e. ( j i^i ~P x ) ( y e. u /\ ( j |`t u ) e. A ) } $.
            DEFINITION df-nlly $a |- N-Locally A = { j e. Top | A. x e. j A. y e. x E. u e. ( ( ( nei ` j ) ` { y } ) i^i ~P x ) ( j |`t u ) e. A } $.
        
        ### Refinements
            $c Ref $.
            CLASS cref $a class Ref $.
            $c PtFin $.
            CLASS cptfin $a class PtFin $.
            $c LocFin $.
            CLASS clocfin $a class LocFin $.
            DEFINITION df-ref $a |- Ref = { <. x , y >. | ( U. y = U. x /\ A. z e. x E. w e. y z C_ w ) } $.
            DEFINITION df-ptfin $a |- PtFin = { x | A. y e. U. x { z e. x | y e. z } e. Fin } $.
            DEFINITION df-locfin $a |- LocFin = ( x e. Top |-> { y | ( U. x = U. y /\ A. p e. U. x E. n e. x ( p e. n /\ { s e. y | ( s i^i n ) =/= (/) } e. Fin ) ) } ) $.
        
        ### Compactly generated spaces
            $c kGen $.
            CLASS ckgen $a class kGen $.
            DEFINITION df-kgen $a |- kGen = ( j e. Top |-> { x e. ~P U. j | A. k e. ~P U. j ( ( j |`t k ) e. Comp -> ( x i^i k ) e. ( j |`t k ) ) } ) $.
        
        ### Product topologies
            $c tX $.
            $c ^ko $.
            CLASS ctx $a class tX $.
            CLASS cxko $a class ^ko $.
            DEFINITION df-tx $a |- tX = ( r e. _V , s e. _V |-> ( topGen ` ran ( x e. r , y e. s |-> ( x X. y ) ) ) ) $.
            DEFINITION df-xko $a |- ^ko = ( s e. Top , r e. Top |-> ( topGen ` ( fi ` ran ( k e. { x e. ~P U. r | ( r |`t x ) e. Comp } , v e. s |-> { f e. ( r Cn s ) | ( f " k ) C_ v } ) ) ) ) $.
        
        ### Continuous function-builders
        
        ### Quotient maps and quotient topology
            $c KQ $.
            CLASS ckq $a class KQ $.
            DEFINITION df-kq $a |- KQ = ( j e. Top |-> ( j qTop ( x e. U. j |-> { y e. j | x e. y } ) ) ) $.
        
        ### Homeomorphisms
            $c Homeo $.
            $c ~= $.
            CLASS chmeo $a class Homeo $.
            CLASS chmph $a class ~= $.
            DEFINITION df-hmeo $a |- Homeo = ( j e. Top , k e. Top |-> { f e. ( j Cn k ) | `' f e. ( k Cn j ) } ) $.
            DEFINITION df-hmph $a |- ~= = ( `' Homeo " ( _V \ 1o ) ) $.
        
    
    ## Filters and filter bases
        ### Filter bases
        
        ### Filters
            $c Fil $.
            CLASS cfil $a class Fil $.
            DEFINITION df-fil $a |- Fil = ( z e. _V |-> { f e. ( fBas ` z ) | A. x e. ~P z ( ( f i^i ~P x ) =/= (/) -> x e. f ) } ) $.
        
        ### Ultrafilters
            $c UFil $.
            $c UFL $.
            CLASS cufil $a class UFil $.
            CLASS cufl $a class UFL $.
            DEFINITION df-ufil $a |- UFil = ( g e. _V |-> { f e. ( Fil ` g ) | A. x e. ~P g ( x e. f \/ ( g \ x ) e. f ) } ) $.
            DEFINITION df-ufl $a |- UFL = { x | A. f e. ( Fil ` x ) E. g e. ( UFil ` x ) f C_ g } $.
        
        ### Filter limits
            $c FilMap $.
            $c fLimf $.
            $c fLim $.
            $c fClus $.
            $c fClusf $.
            CLASS cfm $a class FilMap $.
            CLASS cflim $a class fLim $.
            CLASS cflf $a class fLimf $.
            CLASS cfcls $a class fClus $.
            CLASS cfcf $a class fClusf $.
            DEFINITION df-fm $a |- FilMap = ( x e. _V , f e. _V |-> ( y e. ( fBas ` dom f ) |-> ( x filGen ran ( t e. y |-> ( f " t ) ) ) ) ) $.
            DEFINITION df-flim $a |- fLim = ( j e. Top , f e. U. ran Fil |-> { x e. U. j | ( ( ( nei ` j ) ` { x } ) C_ f /\ f C_ ~P U. j ) } ) $.
            DEFINITION df-flf $a |- fLimf = ( x e. Top , y e. U. ran Fil |-> ( f e. ( U. x ^m U. y ) |-> ( x fLim ( ( U. x FilMap f ) ` y ) ) ) ) $.
            DEFINITION df-fcls $a |- fClus = ( j e. Top , f e. U. ran Fil |-> if ( U. j = U. f , |^|_ x e. f ( ( cls ` j ) ` x ) , (/) ) ) $.
            DEFINITION df-fcf $a |- fClusf = ( j e. Top , f e. U. ran Fil |-> ( g e. ( U. j ^m U. f ) |-> ( j fClus ( ( U. j FilMap g ) ` f ) ) ) ) $.
        
        ### Extension by continuity
            $c CnExt $.
            CLASS ccnext $a class CnExt $.
            DEFINITION df-cnext $a |- CnExt = ( j e. Top , k e. Top |-> ( f e. ( U. k ^pm U. j ) |-> U_ x e. ( ( cls ` j ) ` dom f ) ( { x } X. ( ( k fLimf ( ( ( nei ` j ) ` { x } ) |`t dom f ) ) ` f ) ) ) ) $.
        
        ### Topological groups
            $c TopMnd $.
            $c TopGrp $.
            CLASS ctmd $a class TopMnd $.
            CLASS ctgp $a class TopGrp $.
            DEFINITION df-tmd $a |- TopMnd = { f e. ( Mnd i^i TopSp ) | [. ( TopOpen ` f ) / j ]. ( +f ` f ) e. ( ( j tX j ) Cn j ) } $.
            DEFINITION df-tgp $a |- TopGrp = { f e. ( Grp i^i TopMnd ) | [. ( TopOpen ` f ) / j ]. ( invg ` f ) e. ( j Cn j ) } $.
        
        ### Infinite group sum on topological groups
            $c tsums $.
            CLASS ctsu $a class tsums $.
            DEFINITION df-tsms $a |- tsums = ( w e. _V , f e. _V |-> [_ ( ~P dom f i^i Fin ) / s ]_ ( ( ( TopOpen ` w ) fLimf ( s filGen ran ( z e. s |-> { y e. s | z C_ y } ) ) ) ` ( y e. s |-> ( w gsum ( f |` y ) ) ) ) ) $.
        
        ### Topological rings, fields, vector spaces
            $c TopRing $.
            $c TopDRing $.
            $c TopMod $.
            $c TopVec $.
            CLASS ctrg $a class TopRing $.
            CLASS ctdrg $a class TopDRing $.
            CLASS ctlm $a class TopMod $.
            CLASS ctvc $a class TopVec $.
            DEFINITION df-trg $a |- TopRing = { r e. ( TopGrp i^i Ring ) | ( mulGrp ` r ) e. TopMnd } $.
            DEFINITION df-tdrg $a |- TopDRing = { r e. ( TopRing i^i DivRing ) | ( ( mulGrp ` r ) |`s ( Unit ` r ) ) e. TopGrp } $.
            DEFINITION df-tlm $a |- TopMod = { w e. ( TopMnd i^i LMod ) | ( ( Scalar ` w ) e. TopRing /\ ( .sf ` w ) e. ( ( ( TopOpen ` ( Scalar ` w ) ) tX ( TopOpen ` w ) ) Cn ( TopOpen ` w ) ) ) } $.
            DEFINITION df-tvc $a |- TopVec = { w e. TopMod | ( Scalar ` w ) e. TopDRing } $.
        
    
    ## Uniform Structures and Spaces
        ### Uniform structures
            $c UnifOn $.
            CLASS cust $a class UnifOn $.
            DEFINITION df-ust $a |- UnifOn = ( x e. _V |-> { u | ( u C_ ~P ( x X. x ) /\ ( x X. x ) e. u /\ A. v e. u ( A. w e. ~P ( x X. x ) ( v C_ w -> w e. u ) /\ A. w e. u ( v i^i w ) e. u /\ ( ( _I |` x ) C_ v /\ `' v e. u /\ E. w e. u ( w o. w ) C_ v ) ) ) } ) $.
        
        ### The topology induced by an uniform structure
            $c unifTop $.
            CLASS cutop $a class unifTop $.
            DEFINITION df-utop $a |- unifTop = ( u e. U. ran UnifOn |-> { a e. ~P dom U. u | A. x e. a E. v e. u ( v " { x } ) C_ a } ) $.
        
        ### Uniform Spaces
            $c UnifSt $.
            $c UnifSp $.
            $c toUnifSp $.
            CLASS cuss $a class UnifSt $.
            CLASS cusp $a class UnifSp $.
            CLASS ctus $a class toUnifSp $.
            DEFINITION df-uss $a |- UnifSt = ( f e. _V |-> ( ( UnifSet ` f ) |`t ( ( Base ` f ) X. ( Base ` f ) ) ) ) $.
            DEFINITION df-usp $a |- UnifSp = { f | ( ( UnifSt ` f ) e. ( UnifOn ` ( Base ` f ) ) /\ ( TopOpen ` f ) = ( unifTop ` ( UnifSt ` f ) ) ) } $.
            DEFINITION df-tus $a |- toUnifSp = ( u e. U. ran UnifOn |-> ( { <. ( Base ` ndx ) , dom U. u >. , <. ( UnifSet ` ndx ) , u >. } sSet <. ( TopSet ` ndx ) , ( unifTop ` u ) >. ) ) $.
        
        ### Uniform continuity
            $c uCn $.
            CLASS cucn $a class uCn $.
            DEFINITION df-ucn $a |- uCn = ( u e. U. ran UnifOn , v e. U. ran UnifOn |-> { f e. ( dom U. v ^m dom U. u ) | A. s e. v E. r e. u A. x e. dom U. u A. y e. dom U. u ( x r y -> ( f ` x ) s ( f ` y ) ) } ) $.
        
        ### Cauchy filters in uniform spaces
            $c CauFilU $.
            CLASS ccfilu $a class CauFilU $.
            DEFINITION df-cfilu $a |- CauFilU = ( u e. U. ran UnifOn |-> { f e. ( fBas ` dom U. u ) | A. v e. u E. a e. f ( a X. a ) C_ v } ) $.
        
        ### Complete uniform spaces
            $c CUnifSp $.
            CLASS ccusp $a class CUnifSp $.
            DEFINITION df-cusp $a |- CUnifSp = { w e. UnifSp | A. c e. ( Fil ` ( Base ` w ) ) ( c e. ( CauFilU ` ( UnifSt ` w ) ) -> ( ( TopOpen ` w ) fLim c ) =/= (/) ) } $.
        
    
    ## Metric spaces
        ### Pseudometric spaces
        
        ### Basic metric space properties
            $c *MetSp $.
            $c MetSp $.
            $c toMetSp $.
            CLASS cxms $a class *MetSp $.
            CLASS cms $a class MetSp $.
            CLASS ctms $a class toMetSp $.
            DEFINITION df-xms $a |- *MetSp = { f e. TopSp | ( TopOpen ` f ) = ( MetOpen ` ( ( dist ` f ) |` ( ( Base ` f ) X. ( Base ` f ) ) ) ) } $.
            DEFINITION df-ms $a |- MetSp = { f e. *MetSp | ( ( dist ` f ) |` ( ( Base ` f ) X. ( Base ` f ) ) ) e. ( Met ` ( Base ` f ) ) } $.
            DEFINITION df-tms $a |- toMetSp = ( d e. U. ran *Met |-> ( { <. ( Base ` ndx ) , dom dom d >. , <. ( dist ` ndx ) , d >. } sSet <. ( TopSet ` ndx ) , ( MetOpen ` d ) >. ) ) $.
        
        ### Metric space balls
        
        ### Open sets of a metric space
        
        ### Continuity in metric spaces
        
        ### The uniform structure generated by a metric
        
        ### Examples of metric spaces
        
        ### Normed algebraic structures
            $c norm $.
            $c NrmGrp $.
            $c toNrmGrp $.
            $c NrmRing $.
            $c NrmMod $.
            $c NrmVec $.
            CLASS cnm $a class norm $.
            CLASS cngp $a class NrmGrp $.
            CLASS ctng $a class toNrmGrp $.
            CLASS cnrg $a class NrmRing $.
            CLASS cnlm $a class NrmMod $.
            CLASS cnvc $a class NrmVec $.
            DEFINITION df-nm $a |- norm = ( w e. _V |-> ( x e. ( Base ` w ) |-> ( x ( dist ` w ) ( 0g ` w ) ) ) ) $.
            DEFINITION df-ngp $a |- NrmGrp = { g e. ( Grp i^i MetSp ) | ( ( norm ` g ) o. ( -g ` g ) ) C_ ( dist ` g ) } $.
            DEFINITION df-tng $a |- toNrmGrp = ( g e. _V , f e. _V |-> ( ( g sSet <. ( dist ` ndx ) , ( f o. ( -g ` g ) ) >. ) sSet <. ( TopSet ` ndx ) , ( MetOpen ` ( f o. ( -g ` g ) ) ) >. ) ) $.
            DEFINITION df-nrg $a |- NrmRing = { w e. NrmGrp | ( norm ` w ) e. ( AbsVal ` w ) } $.
            DEFINITION df-nlm $a |- NrmMod = { w e. ( NrmGrp i^i LMod ) | [. ( Scalar ` w ) / f ]. ( f e. NrmRing /\ A. x e. ( Base ` f ) A. y e. ( Base ` w ) ( ( norm ` w ) ` ( x ( .s ` w ) y ) ) = ( ( ( norm ` f ) ` x ) x. ( ( norm ` w ) ` y ) ) ) } $.
            DEFINITION df-nvc $a |- NrmVec = ( NrmMod i^i LVec ) $.
        
        ### Normed space homomorphisms (bounded linear operators)
            $c normOp $.
            $c NGHom $.
            $c NMHom $.
            CLASS cnmo $a class normOp $.
            CLASS cnghm $a class NGHom $.
            CLASS cnmhm $a class NMHom $.
            DEFINITION df-nmo $a |- normOp = ( s e. NrmGrp , t e. NrmGrp |-> ( f e. ( s GrpHom t ) |-> inf ( { r e. ( 0 [,) +oo ) | A. x e. ( Base ` s ) ( ( norm ` t ) ` ( f ` x ) ) <_ ( r x. ( ( norm ` s ) ` x ) ) } , RR* , < ) ) ) $.
            DEFINITION df-nghm $a |- NGHom = ( s e. NrmGrp , t e. NrmGrp |-> ( `' ( s normOp t ) " RR ) ) $.
            DEFINITION df-nmhm $a |- NMHom = ( s e. NrmMod , t e. NrmMod |-> ( ( s LMHom t ) i^i ( s NGHom t ) ) ) $.
        
        ### Topology on the reals
        
        ### Topological definitions using the reals
            $c II $.
            $c -cn-> $.
            CLASS cii $a class II $.
            CLASS ccncf $a class -cn-> $.
            DEFINITION df-ii $a |- II = ( MetOpen ` ( ( abs o. - ) |` ( ( 0 [,] 1 ) X. ( 0 [,] 1 ) ) ) ) $.
            DEFINITION df-cncf $a |- -cn-> = ( a e. ~P CC , b e. ~P CC |-> { f e. ( b ^m a ) | A. x e. a A. e e. RR+ E. d e. RR+ A. y e. a ( ( abs ` ( x - y ) ) < d -> ( abs ` ( ( f ` x ) - ( f ` y ) ) ) < e ) } ) $.
        
        ### Path homotopy
            $c Htpy $.
            $c PHtpy $.
            $c ~=ph $.
            CLASS chtpy $a class Htpy $.
            CLASS cphtpy $a class PHtpy $.
            CLASS cphtpc $a class ~=ph $.
            DEFINITION df-htpy $a |- Htpy = ( x e. Top , y e. Top |-> ( f e. ( x Cn y ) , g e. ( x Cn y ) |-> { h e. ( ( x tX II ) Cn y ) | A. s e. U. x ( ( s h 0 ) = ( f ` s ) /\ ( s h 1 ) = ( g ` s ) ) } ) ) $.
            DEFINITION df-phtpy $a |- PHtpy = ( x e. Top |-> ( f e. ( II Cn x ) , g e. ( II Cn x ) |-> { h e. ( f ( II Htpy x ) g ) | A. s e. ( 0 [,] 1 ) ( ( 0 h s ) = ( f ` 0 ) /\ ( 1 h s ) = ( f ` 1 ) ) } ) ) $.
            DEFINITION df-phtpc $a |- ~=ph = ( x e. Top |-> { <. f , g >. | ( { f , g } C_ ( II Cn x ) /\ ( f ( PHtpy ` x ) g ) =/= (/) ) } ) $.
        
        ### The fundamental group
            $c *p $.
            $c Om1 $.
            $c OmN $.
            $c pi1 $.
            $c piN $.
            CLASS cpco $a class *p $.
            CLASS comi $a class Om1 $.
            CLASS comn $a class OmN $.
            CLASS cpi1 $a class pi1 $.
            CLASS cpin $a class piN $.
            DEFINITION df-pco $a |- *p = ( j e. Top |-> ( f e. ( II Cn j ) , g e. ( II Cn j ) |-> ( x e. ( 0 [,] 1 ) |-> if ( x <_ ( 1 / 2 ) , ( f ` ( 2 x. x ) ) , ( g ` ( ( 2 x. x ) - 1 ) ) ) ) ) ) $.
            DEFINITION df-om1 $a |- Om1 = ( j e. Top , y e. U. j |-> { <. ( Base ` ndx ) , { f e. ( II Cn j ) | ( ( f ` 0 ) = y /\ ( f ` 1 ) = y ) } >. , <. ( +g ` ndx ) , ( *p ` j ) >. , <. ( TopSet ` ndx ) , ( j ^ko II ) >. } ) $.
            DEFINITION df-omn $a |- OmN = ( j e. Top , y e. U. j |-> seq 0 ( ( ( x e. _V , p e. _V |-> <. ( ( TopOpen ` ( 1st ` x ) ) Om1 ( 2nd ` x ) ) , ( ( 0 [,] 1 ) X. { ( 2nd ` x ) } ) >. ) o. 1st ) , <. { <. ( Base ` ndx ) , U. j >. , <. ( TopSet ` ndx ) , j >. } , y >. ) ) $.
            DEFINITION df-pi1 $a |- pi1 = ( j e. Top , y e. U. j |-> ( ( j Om1 y ) /s ( ~=ph ` j ) ) ) $.
            DEFINITION df-pin $a |- piN = ( j e. Top , p e. U. j |-> ( n e. NN0 |-> ( ( 1st ` ( ( j OmN p ) ` n ) ) /s if ( n = 0 , { <. x , y >. | E. f e. ( II Cn j ) ( ( f ` 0 ) = x /\ ( f ` 1 ) = y ) } , ( ~=ph ` ( TopOpen ` ( 1st ` ( ( j OmN p ) ` ( n - 1 ) ) ) ) ) ) ) ) ) $.
        
    
    ## Metric subcomplex vector spaces
        ### Subcomplex modules
            $c CMod $.
            CLASS cclm $a class CMod $.
            DEFINITION df-clm $a |- CMod = { w e. LMod | [. ( Scalar ` w ) / f ]. [. ( Base ` f ) / k ]. ( f = ( CCfld |`s k ) /\ k e. ( SubRing ` CCfld ) ) } $.
        
        ### Subcomplex vector spaces
            $c CVec $.
            CLASS ccvs $a class CVec $.
            DEFINITION df-cvs $a |- CVec = ( CMod i^i LVec ) $.
        
        ### Normed subcomplex vector spaces
        
        ### Subcomplex pre-Hilbert spaces
            $c CPreHil $.
            $c toCPreHil $.
            CLASS ccph $a class CPreHil $.
            CLASS ctcph $a class toCPreHil $.
            DEFINITION df-cph $a |- CPreHil = { w e. ( PreHil i^i NrmMod ) | [. ( Scalar ` w ) / f ]. [. ( Base ` f ) / k ]. ( f = ( CCfld |`s k ) /\ ( sqrt " ( k i^i ( 0 [,) +oo ) ) ) C_ k /\ ( norm ` w ) = ( x e. ( Base ` w ) |-> ( sqrt ` ( x ( .i ` w ) x ) ) ) ) } $.
            DEFINITION df-tcph $a |- toCPreHil = ( w e. _V |-> ( w toNrmGrp ( x e. ( Base ` w ) |-> ( sqrt ` ( x ( .i ` w ) x ) ) ) ) ) $.
        
        ### Neighborhoods and closure
        
        ### Convergence and completeness
            $c CauFil $.
            $c Cau $.
            $c CMet $.
            CLASS ccfil $a class CauFil $.
            CLASS ccau $a class Cau $.
            CLASS ccmet $a class CMet $.
            DEFINITION df-cfil $a |- CauFil = ( d e. U. ran *Met |-> { f e. ( Fil ` dom dom d ) | A. x e. RR+ E. y e. f ( d " ( y X. y ) ) C_ ( 0 [,) x ) } ) $.
            DEFINITION df-cau $a |- Cau = ( d e. U. ran *Met |-> { f e. ( dom dom d ^pm CC ) | A. x e. RR+ E. j e. ZZ ( f |` ( ZZ>= ` j ) ) : ( ZZ>= ` j ) --> ( ( f ` j ) ( ball ` d ) x ) } ) $.
            DEFINITION df-cmet $a |- CMet = ( x e. _V |-> { d e. ( Met ` x ) | A. f e. ( CauFil ` d ) ( ( MetOpen ` d ) fLim f ) =/= (/) } ) $.
        
        ### Baire's Category Theorem
        
        ### Banach spaces and subcomplex Hilbert spaces
            $c CMetSp $.
            $c Ban $.
            $c CHil $.
            CLASS ccms $a class CMetSp $.
            CLASS cbn $a class Ban $.
            CLASS chl $a class CHil $.
            DEFINITION df-cms $a |- CMetSp = { w e. MetSp | [. ( Base ` w ) / b ]. ( ( dist ` w ) |` ( b X. b ) ) e. ( CMet ` b ) } $.
            DEFINITION df-bn $a |- Ban = { w e. ( NrmVec i^i CMetSp ) | ( Scalar ` w ) e. CMetSp } $.
            DEFINITION df-hl $a |- CHil = ( Ban i^i CPreHil ) $.
            #### The complete ordered field of the real numbers
            
        
        ### Euclidean spaces
            $c RR^ EEhil $.
            CLASS crrx $a class RR^ $.
            CLASS cehl $a class EEhil $.
            DEFINITION df-rrx $a |- RR^ = ( i e. _V |-> ( toCPreHil ` ( RRfld freeLMod i ) ) ) $.
            DEFINITION df-ehl $a |- EEhil = ( n e. NN0 |-> ( RR^ ` ( 1 ... n ) ) ) $.
        
        ### Minimizing Vector Theorem
        
        ### Projection Theorem
        
    
# BASIC REAL AND COMPLEX ANALYSIS
    ## Continuity
        ### Intermediate value theorem
        
    
    ## Integrals
        ### Lebesgue measure
            $c vol* $.
            $c vol $.
            CLASS covol $a class vol* $.
            CLASS cvol $a class vol $.
            DEFINITION df-ovol $a |- vol* = ( x e. ~P RR |-> inf ( { y e. RR* | E. f e. ( ( <_ i^i ( RR X. RR ) ) ^m NN ) ( x C_ U. ran ( (,) o. f ) /\ y = sup ( ran seq 1 ( + , ( ( abs o. - ) o. f ) ) , RR* , < ) ) } , RR* , < ) ) $.
            DEFINITION df-vol $a |- vol = ( vol* |` { x | A. y e. ( `' vol* " RR ) ( vol* ` y ) = ( ( vol* ` ( y i^i x ) ) + ( vol* ` ( y \ x ) ) ) } ) $.
        
        ### Lebesgue integration
            #### Lesbesgue integral
                $c MblFn $.
                $c L^1 $.
                $c S.1 $.
                $c S.2 $.
                $c S. $.
                $c S_ $.
                $c _d $.
                CLASS cmbf $a class MblFn $.
                CLASS citg1 $a class S.1 $.
                CLASS citg2 $a class S.2 $.
                CLASS cibl $a class L^1 $.
                CLASS citg $a class S. A B _d x $.
                DEFINITION df-mbf $a |- MblFn = { f e. ( CC ^pm RR ) | A. x e. ran (,) ( ( `' ( Re o. f ) " x ) e. dom vol /\ ( `' ( Im o. f ) " x ) e. dom vol ) } $.
                DEFINITION df-itg1 $a |- S.1 = ( f e. { g e. MblFn | ( g : RR --> RR /\ ran g e. Fin /\ ( vol ` ( `' g " ( RR \ { 0 } ) ) ) e. RR ) } |-> sum_ x e. ( ran f \ { 0 } ) ( x x. ( vol ` ( `' f " { x } ) ) ) ) $.
                DEFINITION df-itg2 $a |- S.2 = ( f e. ( ( 0 [,] +oo ) ^m RR ) |-> sup ( { x | E. g e. dom S.1 ( g oR <_ f /\ x = ( S.1 ` g ) ) } , RR* , < ) ) $.
                DEFINITION df-ibl $a |- L^1 = { f e. MblFn | A. k e. ( 0 ... 3 ) ( S.2 ` ( x e. RR |-> [_ ( Re ` ( ( f ` x ) / ( _i ^ k ) ) ) / y ]_ if ( ( x e. dom f /\ 0 <_ y ) , y , 0 ) ) ) e. RR } $.
                DEFINITION df-itg $a |- S. A B _d x = sum_ k e. ( 0 ... 3 ) ( ( _i ^ k ) x. ( S.2 ` ( x e. RR |-> [_ ( Re ` ( B / ( _i ^ k ) ) ) / y ]_ if ( ( x e. A /\ 0 <_ y ) , y , 0 ) ) ) ) $.
                $c 0p $.
                CLASS c0p $a class 0p $.
                DEFINITION df-0p $a |- 0p = ( CC X. { 0 } ) $.
            
            #### Lesbesgue directed integral
                CLASS cdit $a class S_ [ A -> B ] C _d x $.
                DEFINITION df-ditg $a |- S_ [ A -> B ] C _d x = if ( A <_ B , S. ( A (,) B ) C _d x , -u S. ( B (,) A ) C _d x ) $.
            
        
    
    ## Derivatives
        ### Real and complex differentiation
            #### Derivatives of functions of one complex or real variable
                $c limCC $.
                $c _D $.
                $c Dn $.
                $c C^n $.
                CLASS climc $a class limCC $.
                CLASS cdv $a class _D $.
                CLASS cdvn $a class Dn $.
                CLASS ccpn $a class C^n $.
                DEFINITION df-limc $a |- limCC = ( f e. ( CC ^pm CC ) , x e. CC |-> { y | [. ( TopOpen ` CCfld ) / j ]. ( z e. ( dom f u. { x } ) |-> if ( z = x , y , ( f ` z ) ) ) e. ( ( ( j |`t ( dom f u. { x } ) ) CnP j ) ` x ) } ) $.
                DEFINITION df-dv $a |- _D = ( s e. ~P CC , f e. ( CC ^pm s ) |-> U_ x e. ( ( int ` ( ( TopOpen ` CCfld ) |`t s ) ) ` dom f ) ( { x } X. ( ( z e. ( dom f \ { x } ) |-> ( ( ( f ` z ) - ( f ` x ) ) / ( z - x ) ) ) limCC x ) ) ) $.
                DEFINITION df-dvn $a |- Dn = ( s e. ~P CC , f e. ( CC ^pm s ) |-> seq 0 ( ( ( x e. _V |-> ( s _D x ) ) o. 1st ) , ( NN0 X. { f } ) ) ) $.
                DEFINITION df-cpn $a |- C^n = ( s e. ~P CC |-> ( x e. NN0 |-> { f e. ( CC ^pm s ) | ( ( s Dn f ) ` x ) e. ( dom f -cn-> CC ) } ) ) $.
            
            #### Results on real differentiation
            
        
    
# BASIC REAL AND COMPLEX FUNCTIONS
    ## Polynomials
        ### Polynomial degrees
            $c mDeg $.
            $c deg1 $.
            CLASS cmdg $a class mDeg $.
            CLASS cdg1 $a class deg1 $.
            DEFINITION df-mdeg $a |- mDeg = ( i e. _V , r e. _V |-> ( f e. ( Base ` ( i mPoly r ) ) |-> sup ( ran ( h e. ( f supp ( 0g ` r ) ) |-> ( CCfld gsum h ) ) , RR* , < ) ) ) $.
            DEFINITION df-deg1 $a |- deg1 = ( r e. _V |-> ( 1o mDeg r ) ) $.
        
        ### The division algorithm for univariate polynomials
            $c Monic1p $.
            $c Unic1p $.
            $c quot1p $.
            $c rem1p $.
            $c idlGen1p $.
            CLASS cmn1 $a class Monic1p $.
            CLASS cuc1p $a class Unic1p $.
            CLASS cq1p $a class quot1p $.
            CLASS cr1p $a class rem1p $.
            CLASS cig1p $a class idlGen1p $.
            DEFINITION df-mon1 $a |- Monic1p = ( r e. _V |-> { f e. ( Base ` ( Poly1 ` r ) ) | ( f =/= ( 0g ` ( Poly1 ` r ) ) /\ ( ( coe1 ` f ) ` ( ( deg1 ` r ) ` f ) ) = ( 1r ` r ) ) } ) $.
            DEFINITION df-uc1p $a |- Unic1p = ( r e. _V |-> { f e. ( Base ` ( Poly1 ` r ) ) | ( f =/= ( 0g ` ( Poly1 ` r ) ) /\ ( ( coe1 ` f ) ` ( ( deg1 ` r ) ` f ) ) e. ( Unit ` r ) ) } ) $.
            DEFINITION df-q1p $a |- quot1p = ( r e. _V |-> [_ ( Poly1 ` r ) / p ]_ [_ ( Base ` p ) / b ]_ ( f e. b , g e. b |-> ( iota_ q e. b ( ( deg1 ` r ) ` ( f ( -g ` p ) ( q ( .r ` p ) g ) ) ) < ( ( deg1 ` r ) ` g ) ) ) ) $.
            DEFINITION df-r1p $a |- rem1p = ( r e. _V |-> [_ ( Base ` ( Poly1 ` r ) ) / b ]_ ( f e. b , g e. b |-> ( f ( -g ` ( Poly1 ` r ) ) ( ( f ( quot1p ` r ) g ) ( .r ` ( Poly1 ` r ) ) g ) ) ) ) $.
            DEFINITION df-ig1p $a |- idlGen1p = ( r e. _V |-> ( i e. ( LIdeal ` ( Poly1 ` r ) ) |-> if ( i = { ( 0g ` ( Poly1 ` r ) ) } , ( 0g ` ( Poly1 ` r ) ) , ( iota_ g e. ( i i^i ( Monic1p ` r ) ) ( ( deg1 ` r ) ` g ) = inf ( ( ( deg1 ` r ) " ( i \ { ( 0g ` ( Poly1 ` r ) ) } ) ) , RR , < ) ) ) ) ) $.
        
        ### Elementary properties of complex polynomials
            $c Poly $.
            $c Xp $.
            $c coeff $.
            $c deg $.
            CLASS cply $a class Poly $.
            CLASS cidp $a class Xp $.
            CLASS ccoe $a class coeff $.
            CLASS cdgr $a class deg $.
            DEFINITION df-ply $a |- Poly = ( x e. ~P CC |-> { f | E. n e. NN0 E. a e. ( ( x u. { 0 } ) ^m NN0 ) f = ( z e. CC |-> sum_ k e. ( 0 ... n ) ( ( a ` k ) x. ( z ^ k ) ) ) } ) $.
            DEFINITION df-idp $a |- Xp = ( _I |` CC ) $.
            DEFINITION df-coe $a |- coeff = ( f e. ( Poly ` CC ) |-> ( iota_ a e. ( CC ^m NN0 ) E. n e. NN0 ( ( a " ( ZZ>= ` ( n + 1 ) ) ) = { 0 } /\ f = ( z e. CC |-> sum_ k e. ( 0 ... n ) ( ( a ` k ) x. ( z ^ k ) ) ) ) ) ) $.
            DEFINITION df-dgr $a |- deg = ( f e. ( Poly ` CC ) |-> sup ( ( `' ( coeff ` f ) " ( CC \ { 0 } ) ) , NN0 , < ) ) $.
        
        ### The division algorithm for polynomials
            $c quot $.
            CLASS cquot $a class quot $.
            DEFINITION df-quot $a |- quot = ( f e. ( Poly ` CC ) , g e. ( ( Poly ` CC ) \ { 0p } ) |-> ( iota_ q e. ( Poly ` CC ) [. ( f oF - ( g oF x. q ) ) / r ]. ( r = 0p \/ ( deg ` r ) < ( deg ` g ) ) ) ) $.
        
        ### Algebraic numbers
            $c AA $.
            CLASS caa $a class AA $.
            DEFINITION df-aa $a |- AA = U_ f e. ( ( Poly ` ZZ ) \ { 0p } ) ( `' f " { 0 } ) $.
        
        ### Liouville's approximation theorem
        
    
    ## Sequences and series
        ### Taylor polynomials and Taylor's theorem
            $c Tayl $.
            $c Ana $.
            CLASS ctayl $a class Tayl $.
            CLASS cana $a class Ana $.
            DEFINITION df-tayl $a |- Tayl = ( s e. { RR , CC } , f e. ( CC ^pm s ) |-> ( n e. ( NN0 u. { +oo } ) , a e. |^|_ k e. ( ( 0 [,] n ) i^i ZZ ) dom ( ( s Dn f ) ` k ) |-> U_ x e. CC ( { x } X. ( CCfld tsums ( k e. ( ( 0 [,] n ) i^i ZZ ) |-> ( ( ( ( ( s Dn f ) ` k ) ` a ) / ( ! ` k ) ) x. ( ( x - a ) ^ k ) ) ) ) ) ) ) $.
            DEFINITION df-ana $a |- Ana = ( s e. { RR , CC } |-> { f e. ( CC ^pm s ) | A. x e. dom f x e. ( ( int ` ( ( TopOpen ` CCfld ) |`t s ) ) ` dom ( f i^i ( +oo ( s Tayl f ) x ) ) ) } ) $.
        
        ### Uniform convergence
            $c ~~>u $.
            CLASS culm $a class ~~>u $.
            DEFINITION df-ulm $a |- ~~>u = ( s e. _V |-> { <. f , y >. | E. n e. ZZ ( f : ( ZZ>= ` n ) --> ( CC ^m s ) /\ y : s --> CC /\ A. x e. RR+ E. j e. ( ZZ>= ` n ) A. k e. ( ZZ>= ` j ) A. z e. s ( abs ` ( ( ( f ` k ) ` z ) - ( y ` z ) ) ) < x ) } ) $.
        
        ### Power series
        
    
    ## Basic trigonometry
        ### The exponential, sine, and cosine functions (cont.)
        
        ### Properties of pi = 3.14159...
        
        ### Mapping of the exponential function
        
        ### The natural logarithm on complex numbers
            $c log $.
            $c ^c $.
            CLASS clog $a class log $.
            CLASS ccxp $a class ^c $.
            DEFINITION df-log $a |- log = `' ( exp |` ( `' Im " ( -u _pi (,] _pi ) ) ) $.
            DEFINITION df-cxp $a |- ^c = ( x e. CC , y e. CC |-> if ( x = 0 , if ( y = 0 , 1 , 0 ) , ( exp ` ( y x. ( log ` x ) ) ) ) ) $.
        
        ### Logarithms to an arbitrary base
            $c logb $.
            CLASS clogb $a class logb $.
            DEFINITION df-logb $a |- logb = ( x e. ( CC \ { 0 , 1 } ) , y e. ( CC \ { 0 } ) |-> ( ( log ` y ) / ( log ` x ) ) ) $.
        
        ### Theorems of Pythagoras, isosceles triangles, and intersecting chords
        
        ### Solutions of quadratic, cubic, and quartic equations
        
        ### Inverse trigonometric functions
            $c arcsin $.
            $c arccos $.
            $c arctan $.
            CLASS casin $a class arcsin $.
            CLASS cacos $a class arccos $.
            CLASS catan $a class arctan $.
            DEFINITION df-asin $a |- arcsin = ( x e. CC |-> ( -u _i x. ( log ` ( ( _i x. x ) + ( sqrt ` ( 1 - ( x ^ 2 ) ) ) ) ) ) ) $.
            DEFINITION df-acos $a |- arccos = ( x e. CC |-> ( ( _pi / 2 ) - ( arcsin ` x ) ) ) $.
            DEFINITION df-atan $a |- arctan = ( x e. ( CC \ { -u _i , _i } ) |-> ( ( _i / 2 ) x. ( ( log ` ( 1 - ( _i x. x ) ) ) - ( log ` ( 1 + ( _i x. x ) ) ) ) ) ) $.
        
        ### The Birthday Problem
        
        ### Areas in R^2
            $c area $.
            CLASS carea $a class area $.
            DEFINITION df-area $a |- area = ( s e. { t e. ~P ( RR X. RR ) | ( A. x e. RR ( t " { x } ) e. ( `' vol " RR ) /\ ( x e. RR |-> ( vol ` ( t " { x } ) ) ) e. L^1 ) } |-> S. RR ( vol ` ( s " { x } ) ) _d x ) $.
        
        ### More miscellaneous converging sequences
        
        ### Inequality of arithmetic and geometric means
        
        ### Euler-Mascheroni constant
            $c gamma $.
            CLASS cem $a class gamma $.
            DEFINITION df-em $a |- gamma = sum_ k e. NN ( ( 1 / k ) - ( log ` ( 1 + ( 1 / k ) ) ) ) $.
        
        ### Zeta function
            $c zeta $.
            CLASS czeta $a class zeta $.
            DEFINITION df-zeta $a |- zeta = ( iota_ f e. ( ( CC \ { 1 } ) -cn-> CC ) A. s e. ( CC \ { 1 } ) ( ( 1 - ( 2 ^c ( 1 - s ) ) ) x. ( f ` s ) ) = sum_ n e. NN0 ( sum_ k e. ( 0 ... n ) ( ( ( -u 1 ^ k ) x. ( n _C k ) ) x. ( ( k + 1 ) ^c s ) ) / ( 2 ^ ( n + 1 ) ) ) ) $.
        
        ### Gamma function
            $c _G $.
            $c log_G $.
            $c 1/_G $.
            CLASS clgam $a class log_G $.
            CLASS cgam $a class _G $.
            CLASS cigam $a class 1/_G $.
            DEFINITION df-lgam $a |- log_G = ( z e. ( CC \ ( ZZ \ NN ) ) |-> ( sum_ m e. NN ( ( z x. ( log ` ( ( m + 1 ) / m ) ) ) - ( log ` ( ( z / m ) + 1 ) ) ) - ( log ` z ) ) ) $.
            DEFINITION df-gam $a |- _G = ( exp o. log_G ) $.
            DEFINITION df-igam $a |- 1/_G = ( x e. CC |-> if ( x e. ( ZZ \ NN ) , 0 , ( 1 / ( _G ` x ) ) ) ) $.
        
    
    ## Basic number theory
        ### Wilson's theorem
        
        ### The Fundamental Theorem of Algebra
        
        ### The Basel problem (&zeta;(2) = &pi;<sup>2</sup>/6)
        
        ### Number-theoretical functions
            $c theta $.
            $c Lam $.
            $c psi $.
            $c ppi $.
            $c mmu $.
            $c sigma $.
            CLASS ccht $a class theta $.
            CLASS cvma $a class Lam $.
            CLASS cchp $a class psi $.
            CLASS cppi $a class ppi $.
            CLASS cmu $a class mmu $.
            CLASS csgm $a class sigma $.
            DEFINITION df-cht $a |- theta = ( x e. RR |-> sum_ p e. ( ( 0 [,] x ) i^i Prime ) ( log ` p ) ) $.
            DEFINITION df-vma $a |- Lam = ( x e. NN |-> [_ { p e. Prime | p || x } / s ]_ if ( ( # ` s ) = 1 , ( log ` U. s ) , 0 ) ) $.
            DEFINITION df-chp $a |- psi = ( x e. RR |-> sum_ n e. ( 1 ... ( |_ ` x ) ) ( Lam ` n ) ) $.
            DEFINITION df-ppi $a |- ppi = ( x e. RR |-> ( # ` ( ( 0 [,] x ) i^i Prime ) ) ) $.
            DEFINITION df-mu $a |- mmu = ( x e. NN |-> if ( E. p e. Prime ( p ^ 2 ) || x , 0 , ( -u 1 ^ ( # ` { p e. Prime | p || x } ) ) ) ) $.
            DEFINITION df-sgm $a |- sigma = ( x e. CC , n e. NN |-> sum_ k e. { p e. NN | p || n } ( k ^c x ) ) $.
        
        ### Perfect Number Theorem
        
        ### Characters of Z/nZ
            $c DChr $.
            CLASS cdchr $a class DChr $.
            DEFINITION df-dchr $a |- DChr = ( n e. NN |-> [_ ( Z/nZ ` n ) / z ]_ [_ { x e. ( ( mulGrp ` z ) MndHom ( mulGrp ` CCfld ) ) | ( ( ( Base ` z ) \ ( Unit ` z ) ) X. { 0 } ) C_ x } / b ]_ { <. ( Base ` ndx ) , b >. , <. ( +g ` ndx ) , ( oF x. |` ( b X. b ) ) >. } ) $.
        
        ### Bertrand's postulate
        
        ### Quadratic residues and the Legendre symbol
            $c /L $.
            CLASS clgs $a class /L $.
            DEFINITION df-lgs $a |- /L = ( a e. ZZ , n e. ZZ |-> if ( n = 0 , if ( ( a ^ 2 ) = 1 , 1 , 0 ) , ( if ( ( n < 0 /\ a < 0 ) , -u 1 , 1 ) x. ( seq 1 ( x. , ( m e. NN |-> if ( m e. Prime , ( if ( m = 2 , if ( 2 || a , 0 , if ( ( a mod 8 ) e. { 1 , 7 } , 1 , -u 1 ) ) , ( ( ( ( a ^ ( ( m - 1 ) / 2 ) ) + 1 ) mod m ) - 1 ) ) ^ ( m pCnt n ) ) , 1 ) ) ) ` ( abs ` n ) ) ) ) ) $.
        
        ### Gauss' Lemma
        
        ### Quadratic reciprocity
        
        ### All primes 4n+1 are the sum of two squares
        
        ### Chebyshev's Weak Prime Number Theorem, Dirichlet's Theorem
        
        ### The Prime Number Theorem
        
        ### Ostrowski's theorem
        
    
# SURREAL NUMBERS
    ## Sign sequence representation and Alling's axioms
        ### Definitions and initial properties
            $c No <s bday $.
            CLASS csur $a class No $.
            CLASS cslt $a class <s $.
            CLASS cbday $a class bday $.
            DEFINITION df-no $a |- No = { f | E. a e. On f : a --> { 1o , 2o } } $.
            DEFINITION df-slt $a |- <s = { <. f , g >. | ( ( f e. No /\ g e. No ) /\ E. x e. On ( A. y e. x ( f ` y ) = ( g ` y ) /\ ( f ` x ) { <. 1o , (/) >. , <. 1o , 2o >. , <. (/) , 2o >. } ( g ` x ) ) ) } $.
            DEFINITION df-bday $a |- bday = ( x e. No |-> dom x ) $.
        
        ### Ordering
        
        ### Birthday Function
        
        ### Density
        
        ### Full-Eta Property
        
    
    ## Initial consequences of Alling's axioms
        ### Ordering Theorems
            $c <_s $.
            CLASS csle $a class <_s $.
            DEFINITION df-sle $a |- <_s = ( ( No X. No ) \ `' <s ) $.
        
        ### Birthday Theorems
        
    
    ## Conway cut representation
        ### Conway cuts
            $c <<s |s $.
            CLASS csslt $a class <<s $.
            DEFINITION df-sslt $a |- <<s = { <. a , b >. | ( a C_ No /\ b C_ No /\ A. x e. a A. y e. b x <s y ) } $.
            CLASS cscut $a class |s $.
            DEFINITION df-scut $a |- |s = ( a e. ~P No , b e. ( <<s " { a } ) |-> ( iota_ x e. { y e. No | ( a <<s { y } /\ { y } <<s b ) } ( bday ` x ) = |^| ( bday " { y e. No | ( a <<s { y } /\ { y } <<s b ) } ) ) ) $.
        
        ### Zero and One
            $c 0s 1s $.
            CLASS c0s $a class 0s $.
            CLASS c1s $a class 1s $.
            DEFINITION df-0s $a |- 0s = ( (/) |s (/) ) $.
            DEFINITION df-1s $a |- 1s = ( { 0s } |s (/) ) $.
        
        ### Cuts and Options
            $c _Made _Old _New _Left _Right $.
            CLASS cmade $a class _Made $.
            CLASS cold $a class _Old $.
            CLASS cnew $a class _New $.
            CLASS cleft $a class _Left $.
            CLASS cright $a class _Right $.
            DEFINITION df-made $a |- _Made = recs ( ( f e. _V |-> ( |s " ( ~P U. ran f X. ~P U. ran f ) ) ) ) $.
            DEFINITION df-old $a |- _Old = ( x e. On |-> U. ( _Made " x ) ) $.
            DEFINITION df-new $a |- _New = ( x e. On |-> ( ( _Made ` x ) \ ( _Old ` x ) ) ) $.
            DEFINITION df-left $a |- _Left = ( x e. No |-> { y e. ( _Old ` ( bday ` x ) ) | y <s x } ) $.
            DEFINITION df-right $a |- _Right = ( x e. No |-> { y e. ( _Old ` ( bday ` x ) ) | x <s y } ) $.
        
        ### Cofinality and coinitiality
        
    
    ## Induction and recursion
        ### Induction and recursion on one variable
            $c norec $.
            CLASS cnorec $a class norec ( F ) $.
            DEFINITION df-norec $a |- norec ( F ) = frecs ( { <. x , y >. | x e. ( ( _Left ` y ) u. ( _Right ` y ) ) } , No , F ) $.
        
        ### Induction and recursion on two variables
            $c norec2 $.
            CLASS cnorec2 $a class norec2 ( F ) $.
            DEFINITION df-norec2 $a |- norec2 ( F ) = frecs ( { <. a , b >. | ( a e. ( No X. No ) /\ b e. ( No X. No ) /\ ( ( ( 1st ` a ) { <. c , d >. | c e. ( ( _Left ` d ) u. ( _Right ` d ) ) } ( 1st ` b ) \/ ( 1st ` a ) = ( 1st ` b ) ) /\ ( ( 2nd ` a ) { <. c , d >. | c e. ( ( _Left ` d ) u. ( _Right ` d ) ) } ( 2nd ` b ) \/ ( 2nd ` a ) = ( 2nd ` b ) ) /\ a =/= b ) ) } , ( No X. No ) , F ) $.
        
    
    ## Surreal arithmetic
        ### Addition
            $c +s $.
            CLASS cadds $a class +s $.
            DEFINITION df-adds $a |- +s = norec2 ( ( x e. _V , a e. _V |-> ( ( { y | E. l e. ( _Left ` ( 1st ` x ) ) y = ( l a ( 2nd ` x ) ) } u. { z | E. l e. ( _Left ` ( 2nd ` x ) ) z = ( ( 1st ` x ) a l ) } ) |s ( { y | E. r e. ( _Right ` ( 1st ` x ) ) y = ( r a ( 2nd ` x ) ) } u. { z | E. r e. ( _Right ` ( 2nd ` x ) ) z = ( ( 1st ` x ) a r ) } ) ) ) ) $.
        
        ### Negation and Subtraction
            $c -us $.
            $c -s $.
            CLASS cnegs $a class -us $.
            CLASS csubs $a class -s $.
            DEFINITION df-negs $a |- -us = norec ( ( x e. _V , n e. _V |-> ( ( n " ( _Right ` x ) ) |s ( n " ( _Left ` x ) ) ) ) ) $.
            DEFINITION df-subs $a |- -s = ( x e. No , y e. No |-> ( x +s ( -us ` y ) ) ) $.
        
        ### Multiplication
            $c x.s $.
            CLASS cmuls $a class x.s $.
            DEFINITION df-muls $a |- x.s = norec2 ( ( z e. _V , m e. _V |-> [_ ( 1st ` z ) / x ]_ [_ ( 2nd ` z ) / y ]_ ( ( { a | E. p e. ( _Left ` x ) E. q e. ( _Left ` y ) a = ( ( ( p m y ) +s ( x m q ) ) -s ( p m q ) ) } u. { b | E. r e. ( _Right ` x ) E. s e. ( _Right ` y ) b = ( ( ( r m y ) +s ( x m s ) ) -s ( r m s ) ) } ) |s ( { c | E. t e. ( _Left ` x ) E. u e. ( _Right ` y ) c = ( ( ( t m y ) +s ( x m u ) ) -s ( t m u ) ) } u. { d | E. v e. ( _Right ` x ) E. w e. ( _Left ` y ) d = ( ( ( v m y ) +s ( x m w ) ) -s ( v m w ) ) } ) ) ) ) $.
        
        ### Division
            $c /su $.
            CLASS cdivs $a class /su $.
            DEFINITION df-divs $a |- /su = ( x e. No , y e. ( No \ { 0s } ) |-> ( iota_ z e. No ( y x.s z ) = x ) ) $.
        
    
    ## Subsystems of surreals
        ### Ordinal numbers
            $c On_s $.
            CLASS cons $a class On_s $.
            DEFINITION df-ons $a |- On_s = { x e. No | ( _Right ` x ) = (/) } $.
        
        ### Natural numbers
            $c NN0_s NN_s $.
            CLASS cnn0s $a class NN0_s $.
            CLASS cnns $a class NN_s $.
            DEFINITION df-n0s $a |- NN0_s = ( rec ( ( x e. _V |-> ( x +s 1s ) ) , 0s ) " _om ) $.
            DEFINITION df-nns $a |- NN_s = ( NN0_s \ { 0s } ) $.
        
    
# ELEMENTARY GEOMETRY
    ## Definition and Tarski's Axioms of Geometry
        $c TarskiG Itv LineG $.
        $c TarskiGC TarskiGB TarskiGCB TarskiGE TarskiGDim>= $.
        CLASS cstrkg $a class TarskiG $.
        CLASS cstrkgc $a class TarskiGC $.
        CLASS cstrkgb $a class TarskiGB $.
        CLASS cstrkgcb $a class TarskiGCB $.
        CLASS cstrkgld $a class TarskiGDim>= $.
        CLASS cstrkge $a class TarskiGE $.
        CLASS citv $a class Itv $.
        CLASS clng $a class LineG $.
        DEFINITION df-itv $a |- Itv = Slot ; 1 6 $.
        DEFINITION df-lng $a |- LineG = Slot ; 1 7 $.
        DEFINITION df-trkgc $a |- TarskiGC = { f | [. ( Base ` f ) / p ]. [. ( dist ` f ) / d ]. ( A. x e. p A. y e. p ( x d y ) = ( y d x ) /\ A. x e. p A. y e. p A. z e. p ( ( x d y ) = ( z d z ) -> x = y ) ) } $.
        DEFINITION df-trkgb $a |- TarskiGB = { f | [. ( Base ` f ) / p ]. [. ( Itv ` f ) / i ]. ( A. x e. p A. y e. p ( y e. ( x i x ) -> x = y ) /\ A. x e. p A. y e. p A. z e. p A. u e. p A. v e. p ( ( u e. ( x i z ) /\ v e. ( y i z ) ) -> E. a e. p ( a e. ( u i y ) /\ a e. ( v i x ) ) ) /\ A. s e. ~P p A. t e. ~P p ( E. a e. p A. x e. s A. y e. t x e. ( a i y ) -> E. b e. p A. x e. s A. y e. t b e. ( x i y ) ) ) } $.
        DEFINITION df-trkgcb $a |- TarskiGCB = { f | [. ( Base ` f ) / p ]. [. ( dist ` f ) / d ]. [. ( Itv ` f ) / i ]. ( A. x e. p A. y e. p A. z e. p A. u e. p A. a e. p A. b e. p A. c e. p A. v e. p ( ( ( x =/= y /\ y e. ( x i z ) /\ b e. ( a i c ) ) /\ ( ( ( x d y ) = ( a d b ) /\ ( y d z ) = ( b d c ) ) /\ ( ( x d u ) = ( a d v ) /\ ( y d u ) = ( b d v ) ) ) ) -> ( z d u ) = ( c d v ) ) /\ A. x e. p A. y e. p A. a e. p A. b e. p E. z e. p ( y e. ( x i z ) /\ ( y d z ) = ( a d b ) ) ) } $.
        DEFINITION df-trkge $a |- TarskiGE = { f | [. ( Base ` f ) / p ]. [. ( Itv ` f ) / i ]. A. x e. p A. y e. p A. z e. p A. u e. p A. v e. p ( ( u e. ( x i v ) /\ u e. ( y i z ) /\ x =/= u ) -> E. a e. p E. b e. p ( y e. ( x i a ) /\ z e. ( x i b ) /\ v e. ( a i b ) ) ) } $.
        DEFINITION df-trkgld $a |- TarskiGDim>= = { <. g , n >. | [. ( Base ` g ) / p ]. [. ( dist ` g ) / d ]. [. ( Itv ` g ) / i ]. E. f ( f : ( 1 ..^ n ) -1-1-> p /\ E. x e. p E. y e. p E. z e. p ( A. j e. ( 2 ..^ n ) ( ( ( f ` 1 ) d x ) = ( ( f ` j ) d x ) /\ ( ( f ` 1 ) d y ) = ( ( f ` j ) d y ) /\ ( ( f ` 1 ) d z ) = ( ( f ` j ) d z ) ) /\ -. ( z e. ( x i y ) \/ x e. ( z i y ) \/ y e. ( x i z ) ) ) ) } $.
        DEFINITION df-trkg $a |- TarskiG = ( ( TarskiGC i^i TarskiGB ) i^i ( TarskiGCB i^i { f | [. ( Base ` f ) / p ]. [. ( Itv ` f ) / i ]. ( LineG ` f ) = ( x e. p , y e. ( p \ { x } ) |-> { z e. p | ( z e. ( x i y ) \/ x e. ( z i y ) \/ y e. ( x i z ) ) } ) } ) ) $.
        ### Justification for the congruence notation
        
    
    ## Tarskian Geometry
        ### Congruence
        
        ### Betweenness
        
        ### Dimension
        
        ### Betweenness and Congruence
        
        ### Congruence of a series of points
            $c cgrG $.
            CLASS ccgrg $a class cgrG $.
            DEFINITION df-cgrg $a |- cgrG = ( g e. _V |-> { <. a , b >. | ( ( a e. ( ( Base ` g ) ^pm RR ) /\ b e. ( ( Base ` g ) ^pm RR ) ) /\ ( dom a = dom b /\ A. i e. dom a A. j e. dom a ( ( a ` i ) ( dist ` g ) ( a ` j ) ) = ( ( b ` i ) ( dist ` g ) ( b ` j ) ) ) ) } ) $.
        
        ### Motions
            $c Ismt $.
            CLASS cismt $a class Ismt $.
            DEFINITION df-ismt $a |- Ismt = ( g e. _V , h e. _V |-> { f | ( f : ( Base ` g ) -1-1-onto-> ( Base ` h ) /\ A. a e. ( Base ` g ) A. b e. ( Base ` g ) ( ( f ` a ) ( dist ` h ) ( f ` b ) ) = ( a ( dist ` g ) b ) ) } ) $.
        
        ### Colinearity
        
        ### Connectivity of betweenness
        
        ### Less-than relation in geometric congruences
            $c leG $.
            CLASS cleg $a class leG $.
            DEFINITION df-leg $a |- leG = ( g e. _V |-> { <. e , f >. | [. ( Base ` g ) / p ]. [. ( dist ` g ) / d ]. [. ( Itv ` g ) / i ]. E. x e. p E. y e. p ( f = ( x d y ) /\ E. z e. p ( z e. ( x i y ) /\ e = ( x d z ) ) ) } ) $.
        
        ### Rays
            $c hlG $.
            CLASS chlg $a class hlG $.
            DEFINITION df-hlg $a |- hlG = ( g e. _V |-> ( c e. ( Base ` g ) |-> { <. a , b >. | ( ( a e. ( Base ` g ) /\ b e. ( Base ` g ) ) /\ ( a =/= c /\ b =/= c /\ ( a e. ( c ( Itv ` g ) b ) \/ b e. ( c ( Itv ` g ) a ) ) ) ) } ) ) $.
        
        ### Lines
        
        ### Point inversions
            $c pInvG $.
            CLASS cmir $a class pInvG $.
            DEFINITION df-mir $a |- pInvG = ( g e. _V |-> ( m e. ( Base ` g ) |-> ( a e. ( Base ` g ) |-> ( iota_ b e. ( Base ` g ) ( ( m ( dist ` g ) b ) = ( m ( dist ` g ) a ) /\ m e. ( b ( Itv ` g ) a ) ) ) ) ) ) $.
        
        ### Right angles
            $c raG $.
            CLASS crag $a class raG $.
            DEFINITION df-rag $a |- raG = ( g e. _V |-> { w e. Word ( Base ` g ) | ( ( # ` w ) = 3 /\ ( ( w ` 0 ) ( dist ` g ) ( w ` 2 ) ) = ( ( w ` 0 ) ( dist ` g ) ( ( ( pInvG ` g ) ` ( w ` 1 ) ) ` ( w ` 2 ) ) ) ) } ) $.
            $c perpG $.
            CLASS cperpg $a class perpG $.
            DEFINITION df-perpg $a |- perpG = ( g e. _V |-> { <. a , b >. | ( ( a e. ran ( LineG ` g ) /\ b e. ran ( LineG ` g ) ) /\ E. x e. ( a i^i b ) A. u e. a A. v e. b <" u x v "> e. ( raG ` g ) ) } ) $.
        
        ### Half-planes
            $c hpG $.
            CLASS chpg $a class hpG $.
            DEFINITION df-hpg $a |- hpG = ( g e. _V |-> ( d e. ran ( LineG ` g ) |-> { <. a , b >. | [. ( Base ` g ) / p ]. [. ( Itv ` g ) / i ]. E. c e. p ( ( ( a e. ( p \ d ) /\ c e. ( p \ d ) ) /\ E. t e. d t e. ( a i c ) ) /\ ( ( b e. ( p \ d ) /\ c e. ( p \ d ) ) /\ E. t e. d t e. ( b i c ) ) ) } ) ) $.
        
        ### Midpoints and Line Mirroring
            $c midG lInvG $.
            CLASS cmid $a class midG $.
            CLASS clmi $a class lInvG $.
            DEFINITION df-mid $a |- midG = ( g e. _V |-> ( a e. ( Base ` g ) , b e. ( Base ` g ) |-> ( iota_ m e. ( Base ` g ) b = ( ( ( pInvG ` g ) ` m ) ` a ) ) ) ) $.
            DEFINITION df-lmi $a |- lInvG = ( g e. _V |-> ( m e. ran ( LineG ` g ) |-> ( a e. ( Base ` g ) |-> ( iota_ b e. ( Base ` g ) ( ( a ( midG ` g ) b ) e. m /\ ( m ( perpG ` g ) ( a ( LineG ` g ) b ) \/ a = b ) ) ) ) ) ) $.
        
        ### Congruence of angles
            $c cgrA $.
            CLASS ccgra $a class cgrA $.
            DEFINITION df-cgra $a |- cgrA = ( g e. _V |-> { <. a , b >. | [. ( Base ` g ) / p ]. [. ( hlG ` g ) / k ]. ( ( a e. ( p ^m ( 0 ..^ 3 ) ) /\ b e. ( p ^m ( 0 ..^ 3 ) ) ) /\ E. x e. p E. y e. p ( a ( cgrG ` g ) <" x ( b ` 1 ) y "> /\ x ( k ` ( b ` 1 ) ) ( b ` 0 ) /\ y ( k ` ( b ` 1 ) ) ( b ` 2 ) ) ) } ) $.
        
        ### Angle Comparisons
            $c inA leA $.
            CLASS cinag $a class inA $.
            CLASS cleag $a class leA $.
            DEFINITION df-inag $a |- inA = ( g e. _V |-> { <. p , t >. | ( ( p e. ( Base ` g ) /\ t e. ( ( Base ` g ) ^m ( 0 ..^ 3 ) ) ) /\ ( ( ( t ` 0 ) =/= ( t ` 1 ) /\ ( t ` 2 ) =/= ( t ` 1 ) /\ p =/= ( t ` 1 ) ) /\ E. x e. ( Base ` g ) ( x e. ( ( t ` 0 ) ( Itv ` g ) ( t ` 2 ) ) /\ ( x = ( t ` 1 ) \/ x ( ( hlG ` g ) ` ( t ` 1 ) ) p ) ) ) ) } ) $.
            DEFINITION df-leag $a |- leA = ( g e. _V |-> { <. a , b >. | ( ( a e. ( ( Base ` g ) ^m ( 0 ..^ 3 ) ) /\ b e. ( ( Base ` g ) ^m ( 0 ..^ 3 ) ) ) /\ E. x e. ( Base ` g ) ( x ( inA ` g ) <" ( b ` 0 ) ( b ` 1 ) ( b ` 2 ) "> /\ <" ( a ` 0 ) ( a ` 1 ) ( a ` 2 ) "> ( cgrA ` g ) <" ( b ` 0 ) ( b ` 1 ) x "> ) ) } ) $.
        
        ### Congruence Theorems
        
        ### Equilateral triangles
            $c eqltrG $.
            CLASS ceqlg $a class eqltrG $.
            DEFINITION df-eqlg $a |- eqltrG = ( g e. _V |-> { x e. ( ( Base ` g ) ^m ( 0 ..^ 3 ) ) | x ( cgrG ` g ) <" ( x ` 1 ) ( x ` 2 ) ( x ` 0 ) "> } ) $.
        
    
    ## Properties of geometries
        ### Isomorphisms between geometries
        
    
    ## Geometry in Hilbert spaces
        $c toTG $.
        CLASS cttg $a class toTG $.
        DEFINITION df-ttg $a |- toTG = ( w e. _V |-> [_ ( x e. ( Base ` w ) , y e. ( Base ` w ) |-> { z e. ( Base ` w ) | E. k e. ( 0 [,] 1 ) ( z ( -g ` w ) x ) = ( k ( .s ` w ) ( y ( -g ` w ) x ) ) } ) / i ]_ ( ( w sSet <. ( Itv ` ndx ) , i >. ) sSet <. ( LineG ` ndx ) , ( x e. ( Base ` w ) , y e. ( Base ` w ) |-> { z e. ( Base ` w ) | ( z e. ( x i y ) \/ x e. ( z i y ) \/ y e. ( x i z ) ) } ) >. ) ) $.
        ### Geometry in the complex plane
        
        ### Geometry in Euclidean spaces
            #### Definition of the Euclidean space
                $c EE Btwn Cgr $.
                CLASS cee $a class EE $.
                CLASS cbtwn $a class Btwn $.
                CLASS ccgr $a class Cgr $.
                DEFINITION df-ee $a |- EE = ( n e. NN |-> ( RR ^m ( 1 ... n ) ) ) $.
                DEFINITION df-btwn $a |- Btwn = `' { <. <. x , z >. , y >. | E. n e. NN ( ( x e. ( EE ` n ) /\ z e. ( EE ` n ) /\ y e. ( EE ` n ) ) /\ E. t e. ( 0 [,] 1 ) A. i e. ( 1 ... n ) ( y ` i ) = ( ( ( 1 - t ) x. ( x ` i ) ) + ( t x. ( z ` i ) ) ) ) } $.
                DEFINITION df-cgr $a |- Cgr = { <. x , y >. | E. n e. NN ( ( x e. ( ( EE ` n ) X. ( EE ` n ) ) /\ y e. ( ( EE ` n ) X. ( EE ` n ) ) ) /\ sum_ i e. ( 1 ... n ) ( ( ( ( 1st ` x ) ` i ) - ( ( 2nd ` x ) ` i ) ) ^ 2 ) = sum_ i e. ( 1 ... n ) ( ( ( ( 1st ` y ) ` i ) - ( ( 2nd ` y ) ` i ) ) ^ 2 ) ) } $.
            
            #### Tarski's axioms for geometry for the Euclidean space
            
            #### EE^n fulfills Tarski's Axioms
                $c EEG $.
                CLASS ceeng $a class EEG $.
                DEFINITION df-eeng $a |- EEG = ( n e. NN |-> ( { <. ( Base ` ndx ) , ( EE ` n ) >. , <. ( dist ` ndx ) , ( x e. ( EE ` n ) , y e. ( EE ` n ) |-> sum_ i e. ( 1 ... n ) ( ( ( x ` i ) - ( y ` i ) ) ^ 2 ) ) >. } u. { <. ( Itv ` ndx ) , ( x e. ( EE ` n ) , y e. ( EE ` n ) |-> { z e. ( EE ` n ) | z Btwn <. x , y >. } ) >. , <. ( LineG ` ndx ) , ( x e. ( EE ` n ) , y e. ( ( EE ` n ) \ { x } ) |-> { z e. ( EE ` n ) | ( z Btwn <. x , y >. \/ x Btwn <. z , y >. \/ y Btwn <. x , z >. ) } ) >. } ) ) $.
            
        
    
# GRAPH THEORY
    ## Vertices and edges
        ### The edge function extractor for extensible structures
            $c .ef $.
            CLASS cedgf $a class .ef $.
            DEFINITION df-edgf $a |- .ef = Slot ; 1 8 $.
        
        ### Vertices and indexed edges
            #### Definitions and basic properties
                $c Vtx iEdg $.
                CLASS cvtx $a class Vtx $.
                CLASS ciedg $a class iEdg $.
                DEFINITION df-vtx $a |- Vtx = ( g e. _V |-> if ( g e. ( _V X. _V ) , ( 1st ` g ) , ( Base ` g ) ) ) $.
                DEFINITION df-iedg $a |- iEdg = ( g e. _V |-> if ( g e. ( _V X. _V ) , ( 2nd ` g ) , ( .ef ` g ) ) ) $.
            
            #### The vertices and edges of a graph represented as ordered pair
            
            #### The vertices and edges of a graph represented as extensible structure
            
            #### Representations of graphs without edges
            
            #### Degenerated cases of representations of graphs
            
        
        ### Edges as range of the edge function
            $c Edg $.
            CLASS cedg $a class Edg $.
            DEFINITION df-edg $a |- Edg = ( g e. _V |-> ran ( iEdg ` g ) ) $.
        
    
    ## Undirected graphs
        ### Undirected hypergraphs
            $c UHGraph $.
            $c USHGraph $.
            CLASS cuhgr $a class UHGraph $.
            CLASS cushgr $a class USHGraph $.
            DEFINITION df-uhgr $a |- UHGraph = { g | [. ( Vtx ` g ) / v ]. [. ( iEdg ` g ) / e ]. e : dom e --> ( ~P v \ { (/) } ) } $.
            DEFINITION df-ushgr $a |- USHGraph = { g | [. ( Vtx ` g ) / v ]. [. ( iEdg ` g ) / e ]. e : dom e -1-1-> ( ~P v \ { (/) } ) } $.
        
        ### Undirected pseudographs and multigraphs
            $c UPGraph UMGraph $.
            CLASS cupgr $a class UPGraph $.
            CLASS cumgr $a class UMGraph $.
            DEFINITION df-upgr $a |- UPGraph = { g | [. ( Vtx ` g ) / v ]. [. ( iEdg ` g ) / e ]. e : dom e --> { x e. ( ~P v \ { (/) } ) | ( # ` x ) <_ 2 } } $.
            DEFINITION df-umgr $a |- UMGraph = { g | [. ( Vtx ` g ) / v ]. [. ( iEdg ` g ) / e ]. e : dom e --> { x e. ( ~P v \ { (/) } ) | ( # ` x ) = 2 } } $.
        
        ### Loop-free graphs
        
        ### Edges as subsets of vertices of graphs
        
        ### Undirected simple graphs
            $c USPGraph $.
            $c USGraph $.
            CLASS cuspgr $a class USPGraph $.
            CLASS cusgr $a class USGraph $.
            DEFINITION df-uspgr $a |- USPGraph = { g | [. ( Vtx ` g ) / v ]. [. ( iEdg ` g ) / e ]. e : dom e -1-1-> { x e. ( ~P v \ { (/) } ) | ( # ` x ) <_ 2 } } $.
            DEFINITION df-usgr $a |- USGraph = { g | [. ( Vtx ` g ) / v ]. [. ( iEdg ` g ) / e ]. e : dom e -1-1-> { x e. ( ~P v \ { (/) } ) | ( # ` x ) = 2 } } $.
        
        ### Examples for graphs
        
        ### Subgraphs
            $c SubGraph $.
            CLASS csubgr $a class SubGraph $.
            DEFINITION df-subgr $a |- SubGraph = { <. s , g >. | ( ( Vtx ` s ) C_ ( Vtx ` g ) /\ ( iEdg ` s ) = ( ( iEdg ` g ) |` dom ( iEdg ` s ) ) /\ ( Edg ` s ) C_ ~P ( Vtx ` s ) ) } $.
        
        ### Finite undirected simple graphs
            $c FinUSGraph $.
            CLASS cfusgr $a class FinUSGraph $.
            DEFINITION df-fusgr $a |- FinUSGraph = { g e. USGraph | ( Vtx ` g ) e. Fin } $.
        
        ### Neighbors, complete graphs and universal vertices
            #### Neighbors
                $c NeighbVtx $.
                CLASS cnbgr $a class NeighbVtx $.
                DEFINITION df-nbgr $a |- NeighbVtx = ( g e. _V , v e. ( Vtx ` g ) |-> { n e. ( ( Vtx ` g ) \ { v } ) | E. e e. ( Edg ` g ) { v , n } C_ e } ) $.
            
            #### Universal vertices
                $c UnivVtx $.
                CLASS cuvtx $a class UnivVtx $.
                DEFINITION df-uvtx $a |- UnivVtx = ( g e. _V |-> { v e. ( Vtx ` g ) | A. n e. ( ( Vtx ` g ) \ { v } ) n e. ( g NeighbVtx v ) } ) $.
            
            #### Complete graphs
                $c ComplGraph $.
                $c ComplUSGraph $.
                CLASS ccplgr $a class ComplGraph $.
                CLASS ccusgr $a class ComplUSGraph $.
                DEFINITION df-cplgr $a |- ComplGraph = { g | ( UnivVtx ` g ) = ( Vtx ` g ) } $.
                DEFINITION df-cusgr $a |- ComplUSGraph = ( USGraph i^i ComplGraph ) $.
            
        
        ### Vertex degree
            $c VtxDeg $.
            CLASS cvtxdg $a class VtxDeg $.
            DEFINITION df-vtxdg $a |- VtxDeg = ( g e. _V |-> [_ ( Vtx ` g ) / v ]_ [_ ( iEdg ` g ) / e ]_ ( u e. v |-> ( ( # ` { x e. dom e | u e. ( e ` x ) } ) +e ( # ` { x e. dom e | ( e ` x ) = { u } } ) ) ) ) $.
        
        ### Regular graphs
            $c RegGraph $.
            $c RegUSGraph $.
            CLASS crgr $a class RegGraph $.
            CLASS crusgr $a class RegUSGraph $.
            DEFINITION df-rgr $a |- RegGraph = { <. g , k >. | ( k e. NN0* /\ A. v e. ( Vtx ` g ) ( ( VtxDeg ` g ) ` v ) = k ) } $.
            DEFINITION df-rusgr $a |- RegUSGraph = { <. g , k >. | ( g e. USGraph /\ g RegGraph k ) } $.
        
    
    ## Walks, paths and cycles
        ### Walks
            $c EdgWalks $.
            $c Walks $.
            $c WalksOn $.
            CLASS cewlks $a class EdgWalks $.
            CLASS cwlks $a class Walks $.
            CLASS cwlkson $a class WalksOn $.
            DEFINITION df-ewlks $a |- EdgWalks = ( g e. _V , s e. NN0* |-> { f | [. ( iEdg ` g ) / i ]. ( f e. Word dom i /\ A. k e. ( 1 ..^ ( # ` f ) ) s <_ ( # ` ( ( i ` ( f ` ( k - 1 ) ) ) i^i ( i ` ( f ` k ) ) ) ) ) } ) $.
            DEFINITION df-wlks $a |- Walks = ( g e. _V |-> { <. f , p >. | ( f e. Word dom ( iEdg ` g ) /\ p : ( 0 ... ( # ` f ) ) --> ( Vtx ` g ) /\ A. k e. ( 0 ..^ ( # ` f ) ) if- ( ( p ` k ) = ( p ` ( k + 1 ) ) , ( ( iEdg ` g ) ` ( f ` k ) ) = { ( p ` k ) } , { ( p ` k ) , ( p ` ( k + 1 ) ) } C_ ( ( iEdg ` g ) ` ( f ` k ) ) ) ) } ) $.
            DEFINITION df-wlkson $a |- WalksOn = ( g e. _V |-> ( a e. ( Vtx ` g ) , b e. ( Vtx ` g ) |-> { <. f , p >. | ( f ( Walks ` g ) p /\ ( p ` 0 ) = a /\ ( p ` ( # ` f ) ) = b ) } ) ) $.
        
        ### Walks for loop-free graphs
        
        ### Trails
            $c Trails $.
            $c TrailsOn $.
            CLASS ctrls $a class Trails $.
            CLASS ctrlson $a class TrailsOn $.
            DEFINITION df-trls $a |- Trails = ( g e. _V |-> { <. f , p >. | ( f ( Walks ` g ) p /\ Fun `' f ) } ) $.
            DEFINITION df-trlson $a |- TrailsOn = ( g e. _V |-> ( a e. ( Vtx ` g ) , b e. ( Vtx ` g ) |-> { <. f , p >. | ( f ( a ( WalksOn ` g ) b ) p /\ f ( Trails ` g ) p ) } ) ) $.
        
        ### Paths and simple paths
            $c Paths $.
            $c SPaths $.
            $c PathsOn $.
            $c SPathsOn $.
            CLASS cpths $a class Paths $.
            CLASS cspths $a class SPaths $.
            CLASS cpthson $a class PathsOn $.
            CLASS cspthson $a class SPathsOn $.
            DEFINITION df-pths $a |- Paths = ( g e. _V |-> { <. f , p >. | ( f ( Trails ` g ) p /\ Fun `' ( p |` ( 1 ..^ ( # ` f ) ) ) /\ ( ( p " { 0 , ( # ` f ) } ) i^i ( p " ( 1 ..^ ( # ` f ) ) ) ) = (/) ) } ) $.
            DEFINITION df-spths $a |- SPaths = ( g e. _V |-> { <. f , p >. | ( f ( Trails ` g ) p /\ Fun `' p ) } ) $.
            DEFINITION df-pthson $a |- PathsOn = ( g e. _V |-> ( a e. ( Vtx ` g ) , b e. ( Vtx ` g ) |-> { <. f , p >. | ( f ( a ( TrailsOn ` g ) b ) p /\ f ( Paths ` g ) p ) } ) ) $.
            DEFINITION df-spthson $a |- SPathsOn = ( g e. _V |-> ( a e. ( Vtx ` g ) , b e. ( Vtx ` g ) |-> { <. f , p >. | ( f ( a ( TrailsOn ` g ) b ) p /\ f ( SPaths ` g ) p ) } ) ) $.
        
        ### Closed walks
            $c ClWalks $.
            CLASS cclwlks $a class ClWalks $.
            DEFINITION df-clwlks $a |- ClWalks = ( g e. _V |-> { <. f , p >. | ( f ( Walks ` g ) p /\ ( p ` 0 ) = ( p ` ( # ` f ) ) ) } ) $.
        
        ### Circuits and cycles
            $c Circuits $.
            $c Cycles $.
            CLASS ccrcts $a class Circuits $.
            CLASS ccycls $a class Cycles $.
            DEFINITION df-crcts $a |- Circuits = ( g e. _V |-> { <. f , p >. | ( f ( Trails ` g ) p /\ ( p ` 0 ) = ( p ` ( # ` f ) ) ) } ) $.
            DEFINITION df-cycls $a |- Cycles = ( g e. _V |-> { <. f , p >. | ( f ( Paths ` g ) p /\ ( p ` 0 ) = ( p ` ( # ` f ) ) ) } ) $.
        
        ### Walks as words
            $c WWalks $.
            $c WWalksN $.
            $c WWalksNOn $.
            $c WSPathsN $.
            $c WSPathsNOn $.
            CLASS cwwlks $a class WWalks $.
            CLASS cwwlksn $a class WWalksN $.
            CLASS cwwlksnon $a class WWalksNOn $.
            CLASS cwwspthsn $a class WSPathsN $.
            CLASS cwwspthsnon $a class WSPathsNOn $.
            DEFINITION df-wwlks $a |- WWalks = ( g e. _V |-> { w e. Word ( Vtx ` g ) | ( w =/= (/) /\ A. i e. ( 0 ..^ ( ( # ` w ) - 1 ) ) { ( w ` i ) , ( w ` ( i + 1 ) ) } e. ( Edg ` g ) ) } ) $.
            DEFINITION df-wwlksn $a |- WWalksN = ( n e. NN0 , g e. _V |-> { w e. ( WWalks ` g ) | ( # ` w ) = ( n + 1 ) } ) $.
            DEFINITION df-wwlksnon $a |- WWalksNOn = ( n e. NN0 , g e. _V |-> ( a e. ( Vtx ` g ) , b e. ( Vtx ` g ) |-> { w e. ( n WWalksN g ) | ( ( w ` 0 ) = a /\ ( w ` n ) = b ) } ) ) $.
            DEFINITION df-wspthsn $a |- WSPathsN = ( n e. NN0 , g e. _V |-> { w e. ( n WWalksN g ) | E. f f ( SPaths ` g ) w } ) $.
            DEFINITION df-wspthsnon $a |- WSPathsNOn = ( n e. NN0 , g e. _V |-> ( a e. ( Vtx ` g ) , b e. ( Vtx ` g ) |-> { w e. ( a ( n WWalksNOn g ) b ) | E. f f ( a ( SPathsOn ` g ) b ) w } ) ) $.
        
        ### Walks/paths of length 2 (as length 3 strings)
        
        ### Walks in regular graphs
        
        ### Closed walks as words
            #### Closed walks as words
                $c ClWWalks $.
                CLASS cclwwlk $a class ClWWalks $.
                DEFINITION df-clwwlk $a |- ClWWalks = ( g e. _V |-> { w e. Word ( Vtx ` g ) | ( w =/= (/) /\ A. i e. ( 0 ..^ ( ( # ` w ) - 1 ) ) { ( w ` i ) , ( w ` ( i + 1 ) ) } e. ( Edg ` g ) /\ { ( lastS ` w ) , ( w ` 0 ) } e. ( Edg ` g ) ) } ) $.
            
            #### Closed walks of a fixed length as words
                $c ClWWalksN $.
                CLASS cclwwlkn $a class ClWWalksN $.
                DEFINITION df-clwwlkn $a |- ClWWalksN = ( n e. NN0 , g e. _V |-> { w e. ( ClWWalks ` g ) | ( # ` w ) = n } ) $.
            
            #### Closed walks on a vertex of a fixed length as words
                $c ClWWalksNOn $.
                CLASS cclwwlknon $a class ClWWalksNOn $.
                DEFINITION df-clwwlknon $a |- ClWWalksNOn = ( g e. _V |-> ( v e. ( Vtx ` g ) , n e. NN0 |-> { w e. ( n ClWWalksN g ) | ( w ` 0 ) = v } ) ) $.
            
        
        ### Examples for walks, trails and paths
        
        ### Connected graphs
            $c ConnGraph $.
            CLASS cconngr $a class ConnGraph $.
            DEFINITION df-conngr $a |- ConnGraph = { g | [. ( Vtx ` g ) / v ]. A. k e. v A. n e. v E. f E. p f ( k ( PathsOn ` g ) n ) p } $.
        
    
    ## Eulerian paths and the Konigsberg Bridge problem
        ### Eulerian paths
            $c EulerPaths $.
            CLASS ceupth $a class EulerPaths $.
            DEFINITION df-eupth $a |- EulerPaths = ( g e. _V |-> { <. f , p >. | ( f ( Trails ` g ) p /\ f : ( 0 ..^ ( # ` f ) ) -onto-> dom ( iEdg ` g ) ) } ) $.
        
        ### The K&ouml;nigsberg Bridge problem
        
    
    ## The Friendship Theorem
        ### Friendship graphs - basics
            $c FriendGraph $.
            CLASS cfrgr $a class FriendGraph $.
            DEFINITION df-frgr $a |- FriendGraph = { g e. USGraph | [. ( Vtx ` g ) / v ]. [. ( Edg ` g ) / e ]. A. k e. v A. l e. ( v \ { k } ) E! x e. v { { x , k } , { x , l } } C_ e } $.
        
        ### The friendship theorem for small graphs
        
        ### Theorems according to Mertzios and Unger
        
        ### Huneke's Proof of the Friendship Theorem
        
    
# GUIDES AND MISCELLANEA
    ## Guides (conventions, explanations, and examples)
        ### Conventions
        
        ### Natural deduction
        
        ### Natural deduction examples
        
        ### Definitional examples
        
        ### Other examples
        
    
    ## Humor
        ### April Fool's theorem
            AXIOM ax-flt $a |- ( ( N e. ( ZZ>= ` 3 ) /\ ( X e. NN /\ Y e. NN /\ Z e. NN ) ) -> ( ( X ^ N ) + ( Y ^ N ) ) =/= ( Z ^ N ) ) $.
        
    
    ## (Future - to be reviewed and classified)
        ### Planar incidence geometry
            $c Plig $.
            CLASS cplig $a class Plig $.
            DEFINITION df-plig $a |- Plig = { x | ( A. a e. U. x A. b e. U. x ( a =/= b -> E! l e. x ( a e. l /\ b e. l ) ) /\ A. l e. x E. a e. U. x E. b e. U. x ( a =/= b /\ a e. l /\ b e. l ) /\ E. a e. U. x E. b e. U. x E. c e. U. x A. l e. x -. ( a e. l /\ b e. l /\ c e. l ) ) } $.
        
        ### Aliases kept to prevent broken links
        
    
# COMPLEX TOPOLOGICAL VECTOR SPACES (DEPRECATED)
    ## Additional material on group theory (deprecated)
        ### Definitions and basic properties for groups
            $c GrpOp $.
            $c GId $.
            $c inv $.
            $c /g $.
            CLASS cgr $a class GrpOp $.
            CLASS cgi $a class GId $.
            CLASS cgn $a class inv $.
            CLASS cgs $a class /g $.
            DEFINITION df-grpo $a |- GrpOp = { g | E. t ( g : ( t X. t ) --> t /\ A. x e. t A. y e. t A. z e. t ( ( x g y ) g z ) = ( x g ( y g z ) ) /\ E. u e. t A. x e. t ( ( u g x ) = x /\ E. y e. t ( y g x ) = u ) ) } $.
            DEFINITION df-gid $a |- GId = ( g e. _V |-> ( iota_ u e. ran g A. x e. ran g ( ( u g x ) = x /\ ( x g u ) = x ) ) ) $.
            DEFINITION df-ginv $a |- inv = ( g e. GrpOp |-> ( x e. ran g |-> ( iota_ z e. ran g ( z g x ) = ( GId ` g ) ) ) ) $.
            DEFINITION df-gdiv $a |- /g = ( g e. GrpOp |-> ( x e. ran g , y e. ran g |-> ( x g ( ( inv ` g ) ` y ) ) ) ) $.
        
        ### Abelian groups
            $c AbelOp $.
            CLASS cablo $a class AbelOp $.
            DEFINITION df-ablo $a |- AbelOp = { g e. GrpOp | A. x e. ran g A. y e. ran g ( x g y ) = ( y g x ) } $.
        
    
    ## Complex vector spaces
        ### Definition and basic properties
            $c CVecOLD $.
            CLASS cvc $a class CVecOLD $.
            DEFINITION df-vc $a |- CVecOLD = { <. g , s >. | ( g e. AbelOp /\ s : ( CC X. ran g ) --> ran g /\ A. x e. ran g ( ( 1 s x ) = x /\ A. y e. CC ( A. z e. ran g ( y s ( x g z ) ) = ( ( y s x ) g ( y s z ) ) /\ A. z e. CC ( ( ( y + z ) s x ) = ( ( y s x ) g ( z s x ) ) /\ ( ( y x. z ) s x ) = ( y s ( z s x ) ) ) ) ) ) } $.
        
        ### Examples of complex vector spaces
        
    
    ## Normed complex vector spaces
        ### Definition and basic properties
            $c NrmCVec $.
            $c +v $.
            $c BaseSet $.
            $c .sOLD $.
            $c 0vec $.
            $c -v $.
            $c normCV $.
            $c IndMet $.
            CLASS cnv $a class NrmCVec $.
            CLASS cpv $a class +v $.
            CLASS cba $a class BaseSet $.
            CLASS cns $a class .sOLD $.
            CLASS cn0v $a class 0vec $.
            CLASS cnsb $a class -v $.
            CLASS cnmcv $a class normCV $.
            CLASS cims $a class IndMet $.
            DEFINITION df-nv $a |- NrmCVec = { <. <. g , s >. , n >. | ( <. g , s >. e. CVecOLD /\ n : ran g --> RR /\ A. x e. ran g ( ( ( n ` x ) = 0 -> x = ( GId ` g ) ) /\ A. y e. CC ( n ` ( y s x ) ) = ( ( abs ` y ) x. ( n ` x ) ) /\ A. y e. ran g ( n ` ( x g y ) ) <_ ( ( n ` x ) + ( n ` y ) ) ) ) } $.
            DEFINITION df-va $a |- +v = ( 1st o. 1st ) $.
            DEFINITION df-ba $a |- BaseSet = ( x e. _V |-> ran ( +v ` x ) ) $.
            DEFINITION df-sm $a |- .sOLD = ( 2nd o. 1st ) $.
            DEFINITION df-0v $a |- 0vec = ( GId o. +v ) $.
            DEFINITION df-vs $a |- -v = ( /g o. +v ) $.
            DEFINITION df-nmcv $a |- normCV = 2nd $.
            DEFINITION df-ims $a |- IndMet = ( u e. NrmCVec |-> ( ( normCV ` u ) o. ( -v ` u ) ) ) $.
        
        ### Examples of normed complex vector spaces
        
        ### Induced metric of a normed complex vector space
        
        ### Inner product
            $c .iOLD $.
            CLASS cdip $a class .iOLD $.
            DEFINITION df-dip $a |- .iOLD = ( u e. NrmCVec |-> ( x e. ( BaseSet ` u ) , y e. ( BaseSet ` u ) |-> ( sum_ k e. ( 1 ... 4 ) ( ( _i ^ k ) x. ( ( ( normCV ` u ) ` ( x ( +v ` u ) ( ( _i ^ k ) ( .sOLD ` u ) y ) ) ) ^ 2 ) ) / 4 ) ) ) $.
        
        ### Subspaces
            $c SubSp $.
            CLASS css $a class SubSp $.
            DEFINITION df-ssp $a |- SubSp = ( u e. NrmCVec |-> { w e. NrmCVec | ( ( +v ` w ) C_ ( +v ` u ) /\ ( .sOLD ` w ) C_ ( .sOLD ` u ) /\ ( normCV ` w ) C_ ( normCV ` u ) ) } ) $.
        
    
    ## Operators on complex vector spaces
        ### Definitions and basic properties
            $c LnOp $.
            $c normOpOLD $.
            $c BLnOp $.
            $c 0op $.
            CLASS clno $a class LnOp $.
            CLASS cnmoo $a class normOpOLD $.
            CLASS cblo $a class BLnOp $.
            CLASS c0o $a class 0op $.
            DEFINITION df-lno $a |- LnOp = ( u e. NrmCVec , w e. NrmCVec |-> { t e. ( ( BaseSet ` w ) ^m ( BaseSet ` u ) ) | A. x e. CC A. y e. ( BaseSet ` u ) A. z e. ( BaseSet ` u ) ( t ` ( ( x ( .sOLD ` u ) y ) ( +v ` u ) z ) ) = ( ( x ( .sOLD ` w ) ( t ` y ) ) ( +v ` w ) ( t ` z ) ) } ) $.
            DEFINITION df-nmoo $a |- normOpOLD = ( u e. NrmCVec , w e. NrmCVec |-> ( t e. ( ( BaseSet ` w ) ^m ( BaseSet ` u ) ) |-> sup ( { x | E. z e. ( BaseSet ` u ) ( ( ( normCV ` u ) ` z ) <_ 1 /\ x = ( ( normCV ` w ) ` ( t ` z ) ) ) } , RR* , < ) ) ) $.
            DEFINITION df-blo $a |- BLnOp = ( u e. NrmCVec , w e. NrmCVec |-> { t e. ( u LnOp w ) | ( ( u normOpOLD w ) ` t ) < +oo } ) $.
            DEFINITION df-0o $a |- 0op = ( u e. NrmCVec , w e. NrmCVec |-> ( ( BaseSet ` u ) X. { ( 0vec ` w ) } ) ) $.
            $c adj $.
            CLASS caj $a class adj $.
            $c HmOp $.
            CLASS chmo $a class HmOp $.
            DEFINITION df-aj $a |- adj = ( u e. NrmCVec , w e. NrmCVec |-> { <. t , s >. | ( t : ( BaseSet ` u ) --> ( BaseSet ` w ) /\ s : ( BaseSet ` w ) --> ( BaseSet ` u ) /\ A. x e. ( BaseSet ` u ) A. y e. ( BaseSet ` w ) ( ( t ` x ) ( .iOLD ` w ) y ) = ( x ( .iOLD ` u ) ( s ` y ) ) ) } ) $.
            DEFINITION df-hmo $a |- HmOp = ( u e. NrmCVec |-> { t e. dom ( u adj u ) | ( ( u adj u ) ` t ) = t } ) $.
        
    
    ## Inner product (pre-Hilbert) spaces
        ### Definition and basic properties
            $c CPreHilOLD $.
            CLASS ccphlo $a class CPreHilOLD $.
            DEFINITION df-ph $a |- CPreHilOLD = ( NrmCVec i^i { <. <. g , s >. , n >. | A. x e. ran g A. y e. ran g ( ( ( n ` ( x g y ) ) ^ 2 ) + ( ( n ` ( x g ( -u 1 s y ) ) ) ^ 2 ) ) = ( 2 x. ( ( ( n ` x ) ^ 2 ) + ( ( n ` y ) ^ 2 ) ) ) } ) $.
        
        ### Examples of pre-Hilbert spaces
        
        ### Properties of pre-Hilbert spaces
        
    
    ## Complex Banach spaces
        ### Definition and basic properties
            $c CBan $.
            CLASS ccbn $a class CBan $.
            DEFINITION df-cbn $a |- CBan = { u e. NrmCVec | ( IndMet ` u ) e. ( CMet ` ( BaseSet ` u ) ) } $.
        
        ### Examples of complex Banach spaces
        
        ### Uniform Boundedness Theorem
        
        ### Minimizing Vector Theorem
        
    
    ## Complex Hilbert spaces
        ### Definition and basic properties
            $c CHilOLD $.
            CLASS chlo $a class CHilOLD $.
            DEFINITION df-hlo $a |- CHilOLD = ( CBan i^i CPreHilOLD ) $.
        
        ### Standard axioms for a complex Hilbert space
        
        ### Examples of complex Hilbert spaces
        
        ### Hellinger-Toeplitz Theorem
        
    
    ## Appendix:  Typesetting definitions for the tokens in this file
    
# COMPLEX HILBERT SPACE EXPLORER (DEPRECATED)
    ## Axiomatization of complex pre-Hilbert spaces
        ### Basic Hilbert space definitions
            $c ~H $.
            $c +h $.
            $c .h $.
            $c 0h $.
            $c -h $.
            $c .ih $.
            $c normh $.
            $c Cauchy $.
            $c ~~>v $.
            $c SH $.
            $c CH $.
            $c _|_ $.
            $c +H $.
            $c span $.
            $c vH $.
            $c \/H $.
            $c 0H $.
            $c C_H $.
            $c projh $.
            $c 0hop $.
            $c Iop $.
            $c +op $.
            $c .op $.
            $c -op $.
            $c +fn $.
            $c .fn $.
            $c normop $.
            $c ContOp $.
            $c LinOp $.
            $c BndLinOp $.
            $c UniOp $.
            $c HrmOp $.
            $c normfn $.
            $c null $.
            $c ContFn $.
            $c LinFn $.
            $c adjh $.
            $c bra $.
            $c ketbra $.
            $c <_op $.
            $c eigvec $.
            $c eigval $.
            $c Lambda $.
            $c States $.
            $c CHStates $.
            $c HAtoms $.
            $c <oH $.
            $c MH $.
            $c MH* $.
            CLASS chba $a class ~H $.
            CLASS cva $a class +h $.
            CLASS csm $a class .h $.
            CLASS csp $a class .ih $.
            CLASS cno $a class normh $.
            CLASS c0v $a class 0h $.
            CLASS cmv $a class -h $.
            CLASS ccauold $a class Cauchy $.
            CLASS chli $a class ~~>v $.
            CLASS csh $a class SH $.
            CLASS cch $a class CH $.
            CLASS cort $a class _|_ $.
            CLASS cph $a class +H $.
            CLASS cspn $a class span $.
            CLASS chj $a class vH $.
            CLASS chsup $a class \/H $.
            CLASS c0h $a class 0H $.
            CLASS ccm $a class C_H $.
            CLASS cpjh $a class projh $.
            CLASS chos $a class +op $.
            CLASS chot $a class .op $.
            CLASS chod $a class -op $.
            CLASS chfs $a class +fn $.
            CLASS chft $a class .fn $.
            CLASS ch0o $a class 0hop $.
            CLASS chio $a class Iop $.
            CLASS cnop $a class normop $.
            CLASS ccop $a class ContOp $.
            CLASS clo $a class LinOp $.
            CLASS cbo $a class BndLinOp $.
            CLASS cuo $a class UniOp $.
            CLASS cho $a class HrmOp $.
            CLASS cnmf $a class normfn $.
            CLASS cnl $a class null $.
            CLASS ccnfn $a class ContFn $.
            CLASS clf $a class LinFn $.
            CLASS cado $a class adjh $.
            CLASS cbr $a class bra $.
            CLASS ck $a class ketbra $.
            CLASS cleo $a class <_op $.
            CLASS cei $a class eigvec $.
            CLASS cel $a class eigval $.
            CLASS cspc $a class Lambda $.
            CLASS cst $a class States $.
            CLASS chst $a class CHStates $.
            CLASS ccv $a class <oH $.
            CLASS cat $a class HAtoms $.
            CLASS cmd $a class MH $.
            CLASS cdmd $a class MH* $.
        
        ### Preliminary ZFC lemmas
            DEFINITION df-hnorm $a |- normh = ( x e. dom dom .ih |-> ( sqrt ` ( x .ih x ) ) ) $.
            DEFINITION df-hba $a |- ~H = ( BaseSet ` <. <. +h , .h >. , normh >. ) $.
            DEFINITION df-h0v $a |- 0h = ( 0vec ` <. <. +h , .h >. , normh >. ) $.
            DEFINITION df-hvsub $a |- -h = ( x e. ~H , y e. ~H |-> ( x +h ( -u 1 .h y ) ) ) $.
            DEFINITION df-hlim $a |- ~~>v = { <. f , w >. | ( ( f : NN --> ~H /\ w e. ~H ) /\ A. x e. RR+ E. y e. NN A. z e. ( ZZ>= ` y ) ( normh ` ( ( f ` z ) -h w ) ) < x ) } $.
            DEFINITION df-hcau $a |- Cauchy = { f e. ( ~H ^m NN ) | A. x e. RR+ E. y e. NN A. z e. ( ZZ>= ` y ) ( normh ` ( ( f ` y ) -h ( f ` z ) ) ) < x } $.
        
        ### Derive the Hilbert space axioms from ZFC set theory
        
        ### Introduce the vector space axioms for a Hilbert space
            AXIOM ax-hilex $a |- ~H e. _V $.
            AXIOM ax-hfvadd $a |- +h : ( ~H X. ~H ) --> ~H $.
            AXIOM ax-hvcom $a |- ( ( A e. ~H /\ B e. ~H ) -> ( A +h B ) = ( B +h A ) ) $.
            AXIOM ax-hvass $a |- ( ( A e. ~H /\ B e. ~H /\ C e. ~H ) -> ( ( A +h B ) +h C ) = ( A +h ( B +h C ) ) ) $.
            AXIOM ax-hv0cl $a |- 0h e. ~H $.
            AXIOM ax-hvaddid $a |- ( A e. ~H -> ( A +h 0h ) = A ) $.
            AXIOM ax-hfvmul $a |- .h : ( CC X. ~H ) --> ~H $.
            AXIOM ax-hvmulid $a |- ( A e. ~H -> ( 1 .h A ) = A ) $.
            AXIOM ax-hvmulass $a |- ( ( A e. CC /\ B e. CC /\ C e. ~H ) -> ( ( A x. B ) .h C ) = ( A .h ( B .h C ) ) ) $.
            AXIOM ax-hvdistr1 $a |- ( ( A e. CC /\ B e. ~H /\ C e. ~H ) -> ( A .h ( B +h C ) ) = ( ( A .h B ) +h ( A .h C ) ) ) $.
            AXIOM ax-hvdistr2 $a |- ( ( A e. CC /\ B e. CC /\ C e. ~H ) -> ( ( A + B ) .h C ) = ( ( A .h C ) +h ( B .h C ) ) ) $.
            AXIOM ax-hvmul0 $a |- ( A e. ~H -> ( 0 .h A ) = 0h ) $.
        
        ### Vector operations
        
        ### Inner product postulates for a Hilbert space
            AXIOM ax-hfi $a |- .ih : ( ~H X. ~H ) --> CC $.
            AXIOM ax-his1 $a |- ( ( A e. ~H /\ B e. ~H ) -> ( A .ih B ) = ( * ` ( B .ih A ) ) ) $.
            AXIOM ax-his2 $a |- ( ( A e. ~H /\ B e. ~H /\ C e. ~H ) -> ( ( A +h B ) .ih C ) = ( ( A .ih C ) + ( B .ih C ) ) ) $.
            AXIOM ax-his3 $a |- ( ( A e. CC /\ B e. ~H /\ C e. ~H ) -> ( ( A .h B ) .ih C ) = ( A x. ( B .ih C ) ) ) $.
            AXIOM ax-his4 $a |- ( ( A e. ~H /\ A =/= 0h ) -> 0 < ( A .ih A ) ) $.
        
    
    ## Inner product and norms
        ### Inner product
        
        ### Norms
        
        ### Relate Hilbert space to normed complex vector spaces
        
        ### Bunjakovaskij-Cauchy-Schwarz inequality
        
    
    ## Cauchy sequences and completeness axiom
        ### Cauchy sequences and limits
        
        ### Derivation of the completeness axiom from ZF set theory
        
        ### Completeness postulate for a Hilbert space
            AXIOM ax-hcompl $a |- ( F e. Cauchy -> E. x e. ~H F ~~>v x ) $.
        
        ### Relate Hilbert space to ZFC pre-Hilbert and Hilbert spaces
        
    
    ## Subspaces and projections
        ### Subspaces
            DEFINITION df-sh $a |- SH = { h e. ~P ~H | ( 0h e. h /\ ( +h " ( h X. h ) ) C_ h /\ ( .h " ( CC X. h ) ) C_ h ) } $.
        
        ### Closed subspaces
            DEFINITION df-ch $a |- CH = { h e. SH | ( ~~>v " ( h ^m NN ) ) C_ h } $.
        
        ### Orthocomplements
            DEFINITION df-oc $a |- _|_ = ( x e. ~P ~H |-> { y e. ~H | A. z e. x ( y .ih z ) = 0 } ) $.
            DEFINITION df-ch0 $a |- 0H = { 0h } $.
        
        ### Subspace sum, span, lattice join, lattice supremum
            DEFINITION df-shs $a |- +H = ( x e. SH , y e. SH |-> ( +h " ( x X. y ) ) ) $.
            DEFINITION df-span $a |- span = ( x e. ~P ~H |-> |^| { y e. SH | x C_ y } ) $.
            DEFINITION df-chj $a |- vH = ( x e. ~P ~H , y e. ~P ~H |-> ( _|_ ` ( _|_ ` ( x u. y ) ) ) ) $.
            DEFINITION df-chsup $a |- \/H = ( x e. ~P ~P ~H |-> ( _|_ ` ( _|_ ` U. x ) ) ) $.
        
        ### Projection theorem
        
        ### Projectors
            DEFINITION df-pjh $a |- projh = ( h e. CH |-> ( x e. ~H |-> ( iota_ z e. h E. y e. ( _|_ ` h ) x = ( z +h y ) ) ) ) $.
        
    
    ## Properties of Hilbert subspaces
        ### Orthomodular law
        
        ### Projectors (cont.)
        
        ### Hilbert lattice operations
        
        ### Span (cont.) and one-dimensional subspaces
        
        ### Commutes relation for Hilbert lattice elements
            DEFINITION df-cm $a |- C_H = { <. x , y >. | ( ( x e. CH /\ y e. CH ) /\ x = ( ( x i^i y ) vH ( x i^i ( _|_ ` y ) ) ) ) } $.
        
        ### Foulis-Holland theorem
        
        ### Quantum Logic Explorer axioms
        
        ### Orthogonal subspaces
        
        ### Orthoarguesian laws 5OA and 3OA
        
        ### Projectors (cont.)
        
        ### Mayet's equation E_3
        
    
    ## Operators on Hilbert spaces
        ### Operator sum, difference, and scalar multiplication
            DEFINITION df-hosum $a |- +op = ( f e. ( ~H ^m ~H ) , g e. ( ~H ^m ~H ) |-> ( x e. ~H |-> ( ( f ` x ) +h ( g ` x ) ) ) ) $.
            DEFINITION df-homul $a |- .op = ( f e. CC , g e. ( ~H ^m ~H ) |-> ( x e. ~H |-> ( f .h ( g ` x ) ) ) ) $.
            DEFINITION df-hodif $a |- -op = ( f e. ( ~H ^m ~H ) , g e. ( ~H ^m ~H ) |-> ( x e. ~H |-> ( ( f ` x ) -h ( g ` x ) ) ) ) $.
            DEFINITION df-hfsum $a |- +fn = ( f e. ( CC ^m ~H ) , g e. ( CC ^m ~H ) |-> ( x e. ~H |-> ( ( f ` x ) + ( g ` x ) ) ) ) $.
            DEFINITION df-hfmul $a |- .fn = ( f e. CC , g e. ( CC ^m ~H ) |-> ( x e. ~H |-> ( f x. ( g ` x ) ) ) ) $.
        
        ### Zero and identity operators
            DEFINITION df-h0op $a |- 0hop = ( projh ` 0H ) $.
            DEFINITION df-iop $a |- Iop = ( projh ` ~H ) $.
        
        ### Operations on Hilbert space operators
        
        ### Linear, continuous, bounded, Hermitian, unitary operators and norms
            DEFINITION df-nmop $a |- normop = ( t e. ( ~H ^m ~H ) |-> sup ( { x | E. z e. ~H ( ( normh ` z ) <_ 1 /\ x = ( normh ` ( t ` z ) ) ) } , RR* , < ) ) $.
            DEFINITION df-cnop $a |- ContOp = { t e. ( ~H ^m ~H ) | A. x e. ~H A. y e. RR+ E. z e. RR+ A. w e. ~H ( ( normh ` ( w -h x ) ) < z -> ( normh ` ( ( t ` w ) -h ( t ` x ) ) ) < y ) } $.
            DEFINITION df-lnop $a |- LinOp = { t e. ( ~H ^m ~H ) | A. x e. CC A. y e. ~H A. z e. ~H ( t ` ( ( x .h y ) +h z ) ) = ( ( x .h ( t ` y ) ) +h ( t ` z ) ) } $.
            DEFINITION df-bdop $a |- BndLinOp = { t e. LinOp | ( normop ` t ) < +oo } $.
            DEFINITION df-unop $a |- UniOp = { t | ( t : ~H -onto-> ~H /\ A. x e. ~H A. y e. ~H ( ( t ` x ) .ih ( t ` y ) ) = ( x .ih y ) ) } $.
            DEFINITION df-hmop $a |- HrmOp = { t e. ( ~H ^m ~H ) | A. x e. ~H A. y e. ~H ( x .ih ( t ` y ) ) = ( ( t ` x ) .ih y ) } $.
        
        ### Linear and continuous functionals and norms
            DEFINITION df-nmfn $a |- normfn = ( t e. ( CC ^m ~H ) |-> sup ( { x | E. z e. ~H ( ( normh ` z ) <_ 1 /\ x = ( abs ` ( t ` z ) ) ) } , RR* , < ) ) $.
            DEFINITION df-nlfn $a |- null = ( t e. ( CC ^m ~H ) |-> ( `' t " { 0 } ) ) $.
            DEFINITION df-cnfn $a |- ContFn = { t e. ( CC ^m ~H ) | A. x e. ~H A. y e. RR+ E. z e. RR+ A. w e. ~H ( ( normh ` ( w -h x ) ) < z -> ( abs ` ( ( t ` w ) - ( t ` x ) ) ) < y ) } $.
            DEFINITION df-lnfn $a |- LinFn = { t e. ( CC ^m ~H ) | A. x e. CC A. y e. ~H A. z e. ~H ( t ` ( ( x .h y ) +h z ) ) = ( ( x x. ( t ` y ) ) + ( t ` z ) ) } $.
        
        ### Adjoint
            DEFINITION df-adjh $a |- adjh = { <. t , u >. | ( t : ~H --> ~H /\ u : ~H --> ~H /\ A. x e. ~H A. y e. ~H ( ( t ` x ) .ih y ) = ( x .ih ( u ` y ) ) ) } $.
        
        ### Dirac bra-ket notation
            DEFINITION df-bra $a |- bra = ( x e. ~H |-> ( y e. ~H |-> ( y .ih x ) ) ) $.
            DEFINITION df-kb $a |- ketbra = ( x e. ~H , y e. ~H |-> ( z e. ~H |-> ( ( z .ih y ) .h x ) ) ) $.
        
        ### Positive operators
            DEFINITION df-leop $a |- <_op = { <. t , u >. | ( ( u -op t ) e. HrmOp /\ A. x e. ~H 0 <_ ( ( ( u -op t ) ` x ) .ih x ) ) } $.
        
        ### Eigenvectors, eigenvalues, spectrum
            DEFINITION df-eigvec $a |- eigvec = ( t e. ( ~H ^m ~H ) |-> { x e. ( ~H \ 0H ) | E. z e. CC ( t ` x ) = ( z .h x ) } ) $.
            DEFINITION df-eigval $a |- eigval = ( t e. ( ~H ^m ~H ) |-> ( x e. ( eigvec ` t ) |-> ( ( ( t ` x ) .ih x ) / ( ( normh ` x ) ^ 2 ) ) ) ) $.
            DEFINITION df-spec $a |- Lambda = ( t e. ( ~H ^m ~H ) |-> { x e. CC | -. ( t -op ( x .op ( _I |` ~H ) ) ) : ~H -1-1-> ~H } ) $.
        
        ### Theorems about operators and functionals
        
        ### Riesz lemma
        
        ### Adjoints (cont.)
        
        ### Quantum computation error bound theorem
        
        ### Dirac bra-ket notation (cont.)
        
        ### Positive operators (cont.)
        
        ### Projectors as operators
        
    
    ## States on a Hilbert lattice and Godowski's equation
        ### States on a Hilbert lattice
            DEFINITION df-st $a |- States = { f e. ( ( 0 [,] 1 ) ^m CH ) | ( ( f ` ~H ) = 1 /\ A. x e. CH A. y e. CH ( x C_ ( _|_ ` y ) -> ( f ` ( x vH y ) ) = ( ( f ` x ) + ( f ` y ) ) ) ) } $.
            DEFINITION df-hst $a |- CHStates = { f e. ( ~H ^m CH ) | ( ( normh ` ( f ` ~H ) ) = 1 /\ A. x e. CH A. y e. CH ( x C_ ( _|_ ` y ) -> ( ( ( f ` x ) .ih ( f ` y ) ) = 0 /\ ( f ` ( x vH y ) ) = ( ( f ` x ) +h ( f ` y ) ) ) ) ) } $.
        
        ### Godowski's equation
        
    
    ## Cover relation, atoms, exchange axiom, and modular symmetry
        ### Covers relation; modular pairs
            DEFINITION df-cv $a |- <oH = { <. x , y >. | ( ( x e. CH /\ y e. CH ) /\ ( x C. y /\ -. E. z e. CH ( x C. z /\ z C. y ) ) ) } $.
            DEFINITION df-md $a |- MH = { <. x , y >. | ( ( x e. CH /\ y e. CH ) /\ A. z e. CH ( z C_ y -> ( ( z vH x ) i^i y ) = ( z vH ( x i^i y ) ) ) ) } $.
            DEFINITION df-dmd $a |- MH* = { <. x , y >. | ( ( x e. CH /\ y e. CH ) /\ A. z e. CH ( y C_ z -> ( ( z i^i x ) vH y ) = ( z i^i ( x vH y ) ) ) ) } $.
        
        ### Atoms
            DEFINITION df-at $a |- HAtoms = { x e. CH | 0H <oH x } $.
        
        ### Superposition principle
        
        ### Atoms, exchange and covering properties, atomicity
        
        ### Irreducibility
        
        ### Atoms (cont.)
        
        ### Modular symmetry
        
    
